<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>karriganasta&#39;s blog</title>
  
  <subtitle>infinite OI road.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-09T07:29:40.463Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>karriganasta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「树链剖分 - 学习笔记」</title>
    <link href="http://yoursite.com/2018/06/08/%E3%80%8C%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8D/"/>
    <id>http://yoursite.com/2018/06/08/「树链剖分-学习笔记」/</id>
    <published>2018-06-08T15:01:28.000Z</published>
    <updated>2018-06-09T07:29:40.463Z</updated>
    
    <content type="html"><![CDATA[<p>树链剖分<del>似乎</del>是个很强大的东西</p><p>可惜我之前不会啊</p><p>所以就mark一下啊</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>树链剖分 简称树剖.对于一般的树上路径/权值的问题,Tarjan的LCA在线性内就可以快速求解.</p><p>如果要修改点权或者边权呢?</p><p>树链剖分就是用来解决动态修改树上权值并求解的问题的</p><p>一般树链剖分更新权值的复杂度为$O(logn)$,统计路径信息的复杂度为$O((logn)^2)$</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p><strong>某些一定要知道的概念</strong></p><ul><li>重节点：子树结点数目最多的节点；</li><li>轻节点：父亲节点中除了重结点以外的节点；</li><li>重边：父亲节点和重节点连成的边；</li><li>轻边：父亲节点和轻节点连成的边；</li><li>重链：由多条重边连接而成的路径；</li><li>轻链：由多条轻边连接而成的路径；</li></ul><p>这些东西有一个性质.</p><p>1.一条重链在线段树上是一段连续的区间。</p><p>2.一个节点的重儿子就是这个节点的子节点中子树最大的点。 </p><p>所以第一次dfs求出重儿子</p><p>第二次通过dfs时间戳(dfn),得出节点新编号,并且将各个重节点连接成重链，轻节点连接成轻链</p><p>将重链（其实就是一段区间）用数据结构（一般是树状数组或线段树）来进行维护</p><p>为每个节点进行编号，其实就是DFS在执行时的顺序（id数组）</p><p>以及当前节点所在链的起点（top数组），还有当前节点在树中的位置（rnk数组）.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dfs1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> F, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    dep[u] = depth;</span><br><span class="line">    fa[u] = F;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u]) &#123; <span class="comment">//如果不是父节点就继续向下找节点</span></span><br><span class="line">            dfs1(v, u, depth + <span class="number">1</span>);</span><br><span class="line">            siz[u] += siz[v];<span class="comment">//加子结点的sz</span></span><br><span class="line">            <span class="keyword">if</span> ((!hson[u]) || siz[v] &gt; siz[hson[u]]) hson[u] = v;<span class="comment">//如果没有重孩子或者此孩子的sz较大则更新hson[u]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dfs2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfs_cnt; rnk[dfs_cnt] = u; top[u] = t;<span class="comment">//维护u顶点的节点t</span></span><br><span class="line">    <span class="keyword">if</span> (!hson[u]) <span class="keyword">return</span> ;<span class="comment">//不是重儿子就return</span></span><br><span class="line">    dfs2(hson[u], t);<span class="comment">//继续向下找重链</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != hson[u] &amp;&amp; v != fa[u]) dfs2(v, v);<span class="comment">//找其他非u为顶点的链</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LUOGU P3384 树链剖分[模板]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PER(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125; E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segmentTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    <span class="keyword">int</span> sum, tag;</span><br><span class="line">&#125; tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], siz[MAXN], top[MAXN], hson[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN], fa[MAXN], dfn[MAXN], rnk[MAXN];</span><br><span class="line"><span class="keyword">int</span> N, M, R, A[MAXN], cnt = <span class="number">0</span>, dfs_cnt = <span class="number">0</span>,mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    E[++cnt].to = v; E[cnt].next = head[u]; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> F, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    dep[u] = depth;</span><br><span class="line">    fa[u] = F;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">            dfs1(v, u, depth + <span class="number">1</span>);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span> ((!hson[u]) || siz[v] &gt; siz[hson[u]]) hson[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfs_cnt; rnk[dfs_cnt] = u; top[u] = t;</span><br><span class="line">    <span class="keyword">if</span> (!hson[u]) <span class="keyword">return</span> ;</span><br><span class="line">    dfs2(hson[u], t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != hson[u] &amp;&amp; v != fa[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tree[o].L = l; tree[o].R = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) tree[o].sum = A[rnk[l]];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Build(lc, l , mid);</span><br><span class="line">        Build(rc | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        tree[o].sum = tree[lc].sum + tree[rc].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    tree[lc].sum += (tree[lc].R - tree[lc].L + <span class="number">1</span>) * tree[o].tag;</span><br><span class="line">    tree[rc].sum += (tree[rc].R - tree[rc].L + <span class="number">1</span>) * tree[o].tag;</span><br><span class="line">    tree[lc].tag += tree[o].tag;</span><br><span class="line">    tree[rc].tag += tree[o].tag;</span><br><span class="line">    tree[o].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].L &gt; y || tree[o].R &lt; x) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= tree[o].L &amp;&amp; tree[o].R &lt;= y) &#123;</span><br><span class="line">        tree[o].sum += (tree[o].R - tree[o].L + <span class="number">1</span>) * z;</span><br><span class="line">        tree[o].tag += z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[o].tag) pushdown(o);</span><br><span class="line">        update(lc, x, y, z);</span><br><span class="line">        update(rc, x, y, z);</span><br><span class="line">        tree[o].sum = tree[lc].sum + tree[rc].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= tree[o].L &amp;&amp; tree[o].R &lt;= y) <span class="keyword">return</span> tree[o].sum;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].L &gt; y || tree[o].R &lt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].tag) pushdown(o);</span><br><span class="line">    <span class="keyword">return</span> query(lc, x, y) + query(rc, x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_path</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tu = top[u], tv = top[v];</span><br><span class="line">    <span class="keyword">while</span> (tu != tv) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[tu] &lt; dep[tv]) swap(u, v), swap(tu, tv);</span><br><span class="line">        update(<span class="number">1</span>, dfn[tu], dfn[u], z);</span><br><span class="line">        u = fa[tu], tu = top[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">    update(<span class="number">1</span>, dfn[v], dfn[u], z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_path</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tu = top[u], tv = top[v];</span><br><span class="line">    <span class="keyword">while</span> (tu != tv) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[tu] &lt; dep[tv]) swap(u, v), swap(tu, tv);</span><br><span class="line">        res += query(<span class="number">1</span>, dfn[tu], dfn[u]);</span><br><span class="line">        u = fa[tu], tu = top[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">return</span> res + query(<span class="number">1</span>, dfn[v], dfn[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    N = read(), M = read(), R = read(), mod = read();</span><br><span class="line">    REP(i, <span class="number">1</span>, N) A[i] = read();</span><br><span class="line">    REP(i, <span class="number">2</span>, N) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = read(), v = read();</span><br><span class="line">        adde(u, v); adde(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(R, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(R, R);</span><br><span class="line">    <span class="comment">//REP(i,1,N) printf("%d %d %d %d %d\n",i,fa[i],dfn[i],siz[i],dep[i]);</span></span><br><span class="line">    Build(<span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">    <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt = read();</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read(), y = read();</span><br><span class="line">                <span class="keyword">int</span> z; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;z);</span><br><span class="line">                update_path(x, y, z);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read(), y = read();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query_path(x, y) % mod);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read();</span><br><span class="line">                <span class="keyword">int</span> z; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;z);</span><br><span class="line">                update(<span class="number">1</span>, dfn[x], dfn[x] + siz[x] - <span class="number">1</span>, z);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, dfn[x], dfn[x] + siz[x] - <span class="number">1</span>) % mod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>POJ-2763</strong></p><p>基于边权修改的树剖.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">int</span> fa[MAXN],hson[MAXN],dep[MAXN],dfn[MAXN],rnk[MAXN],top[MAXN],sz[MAXN],val[MAXN];</span><br><span class="line"><span class="keyword">int</span> head[MAXN],cnt=<span class="number">0</span>,dfs_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,val;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">R</span><span class="params">()</span></span>&#123;</span><br><span class="line">u=read();v=read();val=read();</span><br><span class="line">&#125;</span><br><span class="line">Edge(<span class="keyword">int</span> uu=<span class="number">0</span>,<span class="keyword">int</span> vv=<span class="number">0</span>,<span class="keyword">int</span> vval=<span class="number">0</span>):u(uu),v(vv),val(vval)&#123;&#125;</span><br><span class="line">&#125;Edges[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> to,next;</span><br><span class="line">&#125;E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> L,R,val;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    E[++cnt].to = v; E[cnt].next = head[u]; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    dep[u] = depth;</span><br><span class="line">    fa[u] = father;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">            dfs1(v, u, dep[u]+<span class="number">1</span>);</span><br><span class="line">            sz[u] += sz[v];</span><br><span class="line">            <span class="keyword">if</span> (hson[u] == <span class="number">-1</span> || sz[v] &gt; sz[hson[u]]) hson[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfs_cnt; rnk[dfs_cnt] = u; top[u] = t;</span><br><span class="line">    <span class="keyword">if</span> (!hson[u]) <span class="keyword">return</span> ;</span><br><span class="line">    dfs2(hson[u], t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != hson[u] &amp;&amp; v != fa[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;Tree[o].val = Tree[lc].val + Tree[rc].val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">Tree[o].L = l;</span><br><span class="line">Tree[o].R = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;Tree[o].val = val[l]; <span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(l,mid,lc);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rc);</span><br><span class="line">pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Tree[o].L == Tree[o].R) &#123;Tree[o].val = val; <span class="keyword">return</span> ;&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (Tree[o].L + Tree[o].R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (v &lt;= mid) Update(lc,v,val);</span><br><span class="line"><span class="keyword">else</span> Update(rc,v,val);</span><br><span class="line">pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree[o].L &gt;= l &amp;&amp; Tree[o].R &lt;= r) <span class="keyword">return</span> Tree[o].val;</span><br><span class="line"><span class="keyword">int</span> mid = (Tree[o].L + Tree[o].R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> query(lc,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> query(rc,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(lc,l,mid)+query(rc,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tp1 = top[u],tp2 = top[v];</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tp1 != tp2)&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[tp1] &lt; dep[tp2]) &#123;</span><br><span class="line">swap(u,v); swap(tp1,tp2);</span><br><span class="line">&#125;</span><br><span class="line">ret += query(<span class="number">1</span>,dfn[tp1],dfn[u]);</span><br><span class="line">u = fa[tp1];</span><br><span class="line">tp1 = top[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> ret;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u,v);</span><br><span class="line">ret += query(<span class="number">1</span>,dfn[hson[u]],dfn[v]);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read(),m=read(),s=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;Edges[i].R();adde(Edges[i].u,Edges[i].v);adde(Edges[i].v,Edges[i].u);&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[Edges[i].u] &lt; dep[Edges[i].v]) swap(Edges[i].u,Edges[i].v);</span><br><span class="line">val[dfn[Edges[i].u]] = Edges[i].val;</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,dfs_cnt,<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> op=read(),x,y;</span><br><span class="line"><span class="keyword">if</span>(!op)&#123;x=read();<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query(s,x));s=x;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;x=read(),y=read();Update(<span class="number">1</span>,dfn[Edges[x].u],y);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*in</span></span><br><span class="line"><span class="comment">3 3 1</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">0 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*out</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>:）karriganasta</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树链剖分&lt;del&gt;似乎&lt;/del&gt;是个很强大的东西&lt;/p&gt;
&lt;p&gt;可惜我之前不会啊&lt;/p&gt;
&lt;p&gt;所以就mark一下啊&lt;/p&gt;
&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;树链剖
      
    
    </summary>
    
      <category term="动态树" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces」CF-Round485 Div2 复盘</title>
    <link href="http://yoursite.com/2018/05/30/%E3%80%8CCodeforces%E3%80%8DCF-Round485-Div2-%E5%A4%8D%E7%9B%98/"/>
    <id>http://yoursite.com/2018/05/30/「Codeforces」CF-Round485-Div2-复盘/</id>
    <published>2018-05-30T13:33:11.000Z</published>
    <updated>2018-05-30T15:16:00.351Z</updated>
    
    <content type="html"><![CDATA[<p>我这种傻逼选手也只能做做Div2练练手了…</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/contest/987" target="_blank" rel="noopener">CF-Round485 Div2</a></p><p><a href="http://codeforces.com/contest/987/room/134" target="_blank" rel="noopener">某彩笔选手的Room</a></p><a id="more"></a><p><img src="/2018/05/30/「Codeforces」CF-Round485-Div2-复盘/1.png" alt="Ranklist"></p><p>算是CF打到现在自己发挥算好的吧..但是为什么才涨了49分啊…不资瓷啊.</p><p>以后每次比赛都写一次复盘吧.（有可能我懒不想写</p><h3 id="划水记"><a href="#划水记" class="headerlink" title="划水记"></a>划水记</h3><h4 id="赛前"><a href="#赛前" class="headerlink" title="赛前"></a>赛前</h4><p>半夜23:35开打的Div2,<del>肝快爆了</del>,ZhangZisu还有GCC314大爷带我飞啊啊啊啊啊.</p><p>赛前疯狂打CodeSource(滑稽</p><p>尝试着睡着但是没成功,魔爪也没啦,抱着必掉$rating$的心打的比赛.</p><h4 id="赛中"><a href="#赛中" class="headerlink" title="赛中"></a>赛中</h4><p>A </p><p>一看哇特么的是 <del>复联3</del> 灭霸1背景诶!傻逼题,手速还是慢啊花了6min.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[<span class="number">7</span>] = &#123;<span class="string">"Reality"</span>,<span class="string">"Power"</span>,<span class="string">"Mind"</span>,<span class="string">"Soul"</span>,<span class="string">"Space"</span>,<span class="string">"Time"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> wd[<span class="number">7</span>] = &#123;<span class="string">"red"</span>,<span class="string">"purple"</span>,<span class="string">"yellow"</span>,<span class="string">"orange"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> g[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">MM(g,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n=read(),ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">5</span>) <span class="keyword">if</span> (wd[i] == s) g[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">5</span>) ans += (!g[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">5</span>) <span class="keyword">if</span>(!g[i]) <span class="built_in">cout</span> &lt;&lt; s[i] &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B. </p><p>给出$x$,$y$,求比较$x^y,y^x$的大小.</p><p>log一下什么的就好了.愚蠢的我忘了换底公式.</p><p>只能pow了.我菜爆了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> x,y,r;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">2</span> &amp;&amp; y == <span class="number">4</span>)&#123;<span class="built_in">puts</span>(<span class="string">"="</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">4</span> &amp;&amp; y == <span class="number">2</span>)&#123;<span class="built_in">puts</span>(<span class="string">"="</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; y)&#123;</span><br><span class="line"><span class="keyword">double</span> a1 = x,a2 = <span class="built_in">pow</span>(y,x/y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,(a1-a2 &gt; eps) ? <span class="string">'&gt;'</span> : <span class="string">'&lt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == y) &#123;<span class="built_in">puts</span>(<span class="string">"="</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">double</span> a1 = x,a2 = <span class="built_in">pow</span>(y,x/y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,(a1-a2 &gt; eps) ? <span class="string">'&gt;'</span> : <span class="string">'&lt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C.</p><p>给定$n,{ s_i} {c_i},1 \leq n \leq 3000$,求三元组$(i,j,k)$满足$s_i &lt; s_j &lt; s_k,i&lt;j&lt;k$</p><p>求出最小的$c_i+c_j+c_k$</p><p>似乎是个DP啊,想了好久的奇怪做法<del>(二分+RMQ)</del></p><p>然后发现是个$O(n^2)$的DP</p><p>啊啊啊啊啊</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000000001LL</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3003</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn],f[maxn][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> d[maxn][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">d[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span>&lt;&lt;j) - <span class="number">1</span> &lt;= n; i++) <span class="comment">//可以从第0位置开始</span></span><br><span class="line">d[i][j] = min(d[i][j<span class="number">-1</span>],d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ_query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>)) &lt;= r-l+<span class="number">1</span>) k++;</span><br><span class="line"><span class="keyword">return</span> min(d[l][k],d[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0x3F3F3F3F</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)b[i]=read();</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0x80000000</span>;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3F</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">rep(j,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">rep(k,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k] &gt;= a[i]) <span class="keyword">continue</span>;</span><br><span class="line">f[i][j] = min(f[i][j],f[k][j<span class="number">-1</span>]+b[i]);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n) ans=min(ans,f[i][<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans&gt;<span class="number">300000001</span>?<span class="number">-1</span>:ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D. </p><p>题意:</p><p>有$n$个村庄,$m$条边,每条边默认的边权为1,每个村庄有一个货物$x_i$,货物最多有$min(100,k)$种</p><p>分别求每个村庄作为主办方(要从其他村庄获取货物),要展览$s$个物品的最小花费？</p><p><strong>(每种货物算1个) </strong></p><p>思考了很久很久啊..中间一会儿看E一会儿看D并行地写啊..</p><p>发现是个傻逼题.</p><p>对于每种货物.选取当前的货物种类$x$,扔到队列里笨法师一遍,记录$F(i,x)$,表示第x种货物搬到村庄$i$的最小花费.这样是$O(nk)$的,那么每次每个村庄在$F(i)$里的$x$,$sort$一下求前$s$个就完事了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,k;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">101</span>],ans;</span><br><span class="line"><span class="keyword">int</span> types[<span class="number">100010</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pa; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;lt[maxn];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">MM(f,<span class="number">0x7f</span>);</span><br><span class="line">n=read(),m=read(),k=read(),s=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n) types[i]=read();</span><br><span class="line">rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">lt[x].push_back(y);</span><br><span class="line">lt[y].push_back(x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//system("pause");</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(<span class="number">100</span>,k); i++)&#123;</span><br><span class="line">MM(vis,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>(i==types[j])vis[j]=<span class="number">1</span>,q.push(make_pair(j,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">pa = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">f[pa.fi][i] = min(f[pa.fi][i],pa.se);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> oo = <span class="number">0</span>; oo &lt; lt[pa.fi].size(); oo++)</span><br><span class="line"><span class="keyword">if</span>(!vis[lt[pa.fi][oo]]) vis[lt[pa.fi][oo]]=<span class="number">1</span>,q.push(make_pair(lt[pa.fi][oo],pa.se+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(b,f[i],<span class="keyword">sizeof</span>(f[i]));</span><br><span class="line">sort(b+<span class="number">1</span>,b+<span class="number">100</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">1</span>;p&lt;=s;p++) ans+=b[p];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E.</p><p>给一个1~N的排列,Petr把两个不同元素交换$3n$次得到一个新的序列,Um_nik把两个不同元素交换$7n+1$次得到一个新的序列.现在给出这个新的序列,求是谁操作了这个序列.</p><p>求逆序对就完事了.01:49想到的做法,1发入魂.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b[maxn],n;</span><br><span class="line"><span class="keyword">namespace</span> getrev&#123;</span><br><span class="line"><span class="keyword">int</span> a[maxn],c[maxn],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,i,j,tmp;   </span><br><span class="line">   <span class="keyword">if</span>(r&gt;l)   </span><br><span class="line">    &#123;   </span><br><span class="line">        x(l,mid);   </span><br><span class="line">        x(mid+<span class="number">1</span>,r);   </span><br><span class="line">        tmp=l;   </span><br><span class="line">        <span class="keyword">for</span>(i=l,j=mid+<span class="number">1</span>;i&lt;=mid&amp;&amp;j&lt;=r;)   </span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])   </span><br><span class="line">            &#123;   </span><br><span class="line">                c[tmp++]=a[j++];   </span><br><span class="line">                ans+=mid-i+<span class="number">1</span>;   </span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="keyword">else</span> c[tmp++]=a[i++];   </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">if</span>(i&lt;=mid) <span class="keyword">for</span>(;i&lt;=mid;) c[tmp++]=a[i++];   </span><br><span class="line">        <span class="keyword">if</span>(j&lt;=r) <span class="keyword">for</span>(;j&lt;=r;) c[tmp++]=a[j++];   </span><br><span class="line">        <span class="keyword">for</span>(i=l;i&lt;=r;i++) a[i]=c[i];  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sol</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(a,b,<span class="keyword">sizeof</span>(b));</span><br><span class="line">x(<span class="number">1</span>,n); </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n) b[i]=read();</span><br><span class="line"><span class="keyword">int</span> petr=(n*<span class="number">3</span>) &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=getrev::sol();</span><br><span class="line">cnt=cnt&amp;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,cnt==petr?<span class="string">"Petr"</span>:<span class="string">"Um_nik"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F.(订正)</p><p>给出n,给出m个$1\leq x \leq 2^n$的元素,其中某两个元素$a,b$有连边当且仅当$a \&amp;b = 0$</p><p>求联通快的个数.</p><p>看上去很不可做！</p><p>ckr:我几秒钟就秒掉了</p><p>被D爆了啊…</p><p>首先$3^n$的暴力是很显然的,但是通不过,考虑优化.</p><p>ckr:”我们尝试着Gay掉1位”</p><p>类似于记忆化的过程,我们在dfs时记录vis[x]表示访问过x.</p><p>我们在dfs时枚举$0-n$,如果$(2^i \&amp; x)$,就可以Gay掉.</p><p>继续下去$dfs(x^{2^i})$</p><p>如果x在读入种出现了就dfs它的补集.</p><p>因为x的补集种所有子集必然与x联通,因此正确性显然.</p><p>哇 我特么这都没想到.是被难度吓退了啊.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span>&lt;&lt;<span class="number">23</span>;</span><br><span class="line"><span class="keyword">int</span> vis[N],ins[N],ans=<span class="number">0</span>,x,n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> ;vis[u]=<span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;u) dfs((<span class="number">1</span>&lt;&lt;i)^u);</span><br><span class="line"><span class="keyword">if</span>(ins[u]) dfs((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>-u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">MM(ins,<span class="number">0</span>);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">x=read();</span><br><span class="line">ins[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;ins[<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"1"</span>),<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(vis[i]||!ins[i]))&#123;</span><br><span class="line">++ans;</span><br><span class="line">dfs((<span class="number">1</span>&lt;&lt;n)-i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后记</strong></p><p>算是第一次打到5题吧..</p><p>之后要坚持啊…</p><p>​                                                                                                  karriganasta :P</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我这种傻逼选手也只能做做Div2练练手了…&lt;/p&gt;
&lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/987&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF-Round485 Div2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/987/room/134&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;某彩笔选手的Room&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELO Record" scheme="http://yoursite.com/categories/ELO-Record/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>浅谈次小生成树</title>
    <link href="http://yoursite.com/2018/05/08/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%80%E5%A4%A7%E7%94%9F%E6%88%90%E6%A0%91-%E4%B8%80%E4%BA%9B%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/08/次小生成树-最大生成树-一些奇奇怪怪的生成树问题/</id>
    <published>2018-05-08T14:17:55.000Z</published>
    <updated>2018-05-09T15:33:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>顾名思义,在一个图$G=(V,E)$中如果存在最小生成树$T$，如果有一个生成树$T’ \not= T $且对于$\forall T_x &gt; T’$,则称生成树$T’$为$G$的次小生成树.</p><h5 id="算法0"><a href="#算法0" class="headerlink" title="算法0"></a>算法0</h5><p>枚举原来$T$中每一条边将其删去,每次求一遍MST.</p><p>复杂度:$O(n*mlog_2m)$</p><p>显然难以接受.</p><p>应该还是挺好写的(但是并不保证严格)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,c;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c &lt; b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> sel;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn],sell[maxn],cnt = <span class="number">0</span>,n,m,ans = INT_MAX;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) fa[i] = i;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=getf(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f=c==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;c=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;c=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">a[i].u = read(),a[i].v = read(),a[i].c = read(),a[i].sel = <span class="number">1</span>;</span><br><span class="line">Pre();</span><br><span class="line">sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ltotal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ltotal == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> fax = getf(a[i].u),fay = getf(a[i].v);</span><br><span class="line"><span class="keyword">if</span> (fax == fay) <span class="keyword">continue</span>;</span><br><span class="line">fa[fax] = fay;</span><br><span class="line">++ltotal;</span><br><span class="line">sell[++cnt] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">&#123;</span><br><span class="line">Pre();</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">a[sell[i]].sel = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[j].sel) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (lt == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> fax = getf(a[j].u),fay = getf(a[j].v);</span><br><span class="line"><span class="keyword">if</span> (fax == fay) <span class="keyword">continue</span>;</span><br><span class="line">fa[fax] = fay;</span><br><span class="line">++lt;</span><br><span class="line">ret += a[j].c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lt == n - <span class="number">1</span>) ans = min(ans,ret);</span><br><span class="line">a[sell[i]].sel = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（还能接受的）算法"><a href="#（还能接受的）算法" class="headerlink" title="（还能接受的）算法"></a><del>（还能接受的）</del>算法</h5><p><strong>倍增LCA（似乎ST表也可以） + MST</strong></p><p>定理:如果图G的边的个数E和个点的个数N不满足关系E + 1 = N,那么存在边(u,v) 属于 T 和(x, y)不属于T满足T \ (u, v) U (x, y)是图的一颗次小生成树.</p><p>根据这个定理,记录下原最小生成树中的边,</p><p>然后枚举它的邻边并尝试添入并删去环中（如果有）最长的边,取权值的最小值即可.</p><p>置于怎么求最小生成树中$X \ to \ Y$的最短距离,可以树形dp或者LCA.</p><p>辣鸡的我<del>（拉拉板子）</del>写了个倍增,跑的还行吧…</p><p><a href="https://www.luogu.org/problemnew/show/P4180" target="_blank" rel="noopener">LUOGU模板传送</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a[SIZE];</span><br><span class="line"><span class="keyword">int</span> f[SIZE],fa[<span class="number">25</span>][SIZE],dep[SIZE];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">2</span>][<span class="number">25</span>][SIZE],n,m,ret,ans = LLONG_MAX,mx;</span><br><span class="line"><span class="keyword">bool</span> used[SIZE &lt;&lt; <span class="number">2</span>],vis[SIZE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge y)&#123;</span><br><span class="line">        <span class="keyword">return</span> val &lt; y.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[SIZE&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==f[x]?x:f[x]=F(f[x]);&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sort(e,e+m);</span><br><span class="line"><span class="keyword">int</span> Lfs=n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m &amp;&amp; Lfs; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x=F(e[i].from),y=F(e[i].to);</span><br><span class="line"><span class="keyword">if</span>(x!=y) &#123;</span><br><span class="line">f[x]=y;ret+=e[i].val;used[i]=<span class="number">1</span>;</span><br><span class="line">--Lfs;mx=max(mx,e[i].val);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">23</span>; ++i) &#123;</span><br><span class="line">fa[i][x]=fa[i<span class="number">-1</span>][fa[i<span class="number">-1</span>][x]];</span><br><span class="line"><span class="keyword">int</span> t1=d[<span class="number">0</span>][i<span class="number">-1</span>][x], t2=d[<span class="number">0</span>][i<span class="number">-1</span>][fa[i<span class="number">-1</span>][x]];</span><br><span class="line">d[<span class="number">0</span>][i][x]=max(t1 ,t2);</span><br><span class="line">d[<span class="number">1</span>][i][x]=max(d[<span class="number">1</span>][i<span class="number">-1</span>][x] , d[<span class="number">1</span>][i<span class="number">-1</span>][fa[i<span class="number">-1</span>][x]]);</span><br><span class="line"><span class="keyword">if</span>(t1!=t2) d[<span class="number">1</span>][i][x]=max(d[<span class="number">1</span>][i][x] , min(t1 , t2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a[x].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> t=e[a[x][i]].to+e[a[x][i]].from-x;</span><br><span class="line"><span class="keyword">if</span>(vis[t]) <span class="keyword">continue</span>;   </span><br><span class="line">dep[t]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[<span class="number">0</span>][t]=x;</span><br><span class="line">d[<span class="number">0</span>][<span class="number">0</span>][t]=e[a[x][i]].val;</span><br><span class="line">dfs(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])</span><br><span class="line">swap(u,v);</span><br><span class="line"><span class="keyword">if</span>(dep[u]!=dep[v]) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">23</span>,h=dep[u]-dep[v]; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span>(h&amp;(<span class="number">1</span>&lt;&lt;i)) u=fa[i][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">23</span>; i&gt;=<span class="number">0</span>; --i) <span class="keyword">if</span>(fa[i][u]!=fa[i][v])</span><br><span class="line">u=fa[i][u] , v=fa[i][v];</span><br><span class="line"><span class="keyword">return</span> fa[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fht=lca(u,v);</span><br><span class="line"><span class="keyword">int</span> m1=<span class="number">-1</span>,m2=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">23</span>,h1=dep[u]-dep[fht],h2=dep[v]-dep[fht]; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span>(h1&amp;(<span class="number">1</span>&lt;&lt;i)) &#123;</span><br><span class="line"><span class="keyword">if</span>(d[<span class="number">0</span>][i][u]&gt;m1) m2=m1,m1=d[<span class="number">0</span>][i][u];</span><br><span class="line">m2=max(m2 , d[<span class="number">1</span>][i][u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h2&amp;(<span class="number">1</span>&lt;&lt;i)) &#123;</span><br><span class="line"><span class="keyword">if</span>(d[<span class="number">0</span>][i][v]&gt;m1) m2=m1,m1=d[<span class="number">0</span>][i][v];</span><br><span class="line">m2=max(m2 , d[<span class="number">1</span>][i][v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//严格大于的关键,这里若是return没有处理好极其容易被Hack </span></span><br><span class="line"><span class="keyword">if</span>(m1!=c) <span class="keyword">return</span> c-m1;</span><br><span class="line"><span class="keyword">if</span>(m2!=<span class="number">-1</span>) <span class="keyword">return</span> c-m2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) &#123; </span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">u = read(),v = read(),w = read();</span><br><span class="line">e[i]=(Edge)&#123;u,v,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line">kruskal();  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) <span class="keyword">if</span>(used[i]) &#123; </span><br><span class="line">a[e[i].from].push_back(i);</span><br><span class="line">a[e[i].to].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dep[<span class="number">1</span>]=<span class="number">1</span>;dfs(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) <span class="keyword">if</span>(!used[i]) &#123; </span><br><span class="line"><span class="keyword">if</span>(e[i].val-mx&gt;ans) <span class="keyword">break</span>; <span class="keyword">int</span> t=get(e[i].from,e[i].to,e[i].val); <span class="keyword">if</span>(t) ans=min(ans,t); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ret+ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>听说好像有大爷还用LCT来维护这个X到Y的最大值,给跪了啊</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;次小生成树&quot;&gt;&lt;a href=&quot;#次小生成树&quot; class=&quot;headerlink&quot; title=&quot;次小生成树&quot;&gt;&lt;/a&gt;次小生成树&lt;/h3&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定
      
    
    </summary>
    
      <category term="生成树" scheme="http://yoursite.com/categories/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[资瓷新域名辣！欢迎使用karriganasta.xyz访问]</title>
    <link href="http://yoursite.com/2018/05/03/%E8%B5%84%E7%93%B7%E6%96%B0%E5%9F%9F%E5%90%8D%E8%BE%A3%EF%BC%81%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8karriganasta-xyz%E8%AE%BF%E9%97%AE-md/"/>
    <id>http://yoursite.com/2018/05/03/资瓷新域名辣！欢迎使用karriganasta-xyz访问-md/</id>
    <published>2018-05-03T12:25:22.000Z</published>
    <updated>2018-05-03T12:36:19.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ZJOI2018酱油记</title>
    <link href="http://yoursite.com/2018/04/26/ZJOI2018%E9%85%B1%E6%B2%B9%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/26/ZJOI2018酱油记/</id>
    <published>2018-04-26T08:25:53.000Z</published>
    <updated>2018-04-26T11:07:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>上次的游记好像忘了写了就当一起补上吧qwq</strong></p><p><strong>课件在这</strong></p><p><a href="download\Series1.rar">Series 1</a></p><p><a href="download\Series2.rar">Series 2</a></p><p><a href="download\ZJOI2018Day1.rar">ZJOI Day 1 Statement &amp; Solution</a></p><p><a href="download\ZJOI2018Day2.rar">ZJOI Day 2 Statement &amp; Solution</a></p><a id="more"></a><h3 id="ZJOI-2018-衢州-2018-3-18-2018-3-21"><a href="#ZJOI-2018-衢州-2018-3-18-2018-3-21" class="headerlink" title="ZJOI 2018  @ 衢州 2018.3.18-2018.3.21"></a>ZJOI 2018  @ 衢州 2018.3.18-2018.3.21</h3><h4 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h4><p>撞上体育中考好气哦不能搭大巴去啦,滚回杭州搞了一上午拿了30分满分.嗯资瓷啊.</p><p>下午就赶着火车飞到衢州去啦</p><p>到了宾馆卧槽还有电脑啊这么高端,然后似乎因为人数是奇数个,而且我又是最后一个到的.所以我一个人占了一个大床?!所以说到的迟还有福利?惊了.</p><p>晚上模板题敲敲人生大有希望.</p><p>睡觉前看了几集番,舒服.</p><h4 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h4><p>上午rxd大爷神级讲题,挑的都是CF我不根本不敢开的题,在线了一个小时左右就掉线了,我好菜啊.</p><p>中午衢州二中伙食怎么这么辣啊…</p><p>下午HEZ的陈嘉乐和陆宇暄网格图还挺有意思的.资瓷一波.但是感觉思考时间太少了啊啊啊.</p><p>晚上pogemo.</p><h4 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h4><p>上午绍一季雨田讲CF<strong>水题</strong> 结果不太听得懂,场内有个小哥好骚啊几乎每次都要上去 <del>浪</del> 切题.</p><p>真的是大到不行.</p><p>下午lych_cys梁大讲课!资瓷!JOIsc什么的太大了.后半程是真的听不动了.</p><p>晚上敲裸题+pogemo.</p><p><del>PA查房真的神出鬼没</del></p><h4 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h4><p>啊人生第一场省选(还是非正式选手).别爆零就行.</p><p>开场看T1. 花一个半小时撸出大暴力.诶!好像可以拿20分!</p><p>似乎再在20分基础上搞一下点点度数可以拿30分!又花了一个小时写那个10分.</p><p>看T2,数据结构题啊没信仰的,那个十分好像看起来挺好吃的.</p><p>next_permutation()半小时写掉10分</p><p>看T3似乎是结论题…</p><p>暴力找规律两小时毫无卵用. 最后绝望之中srand(19260817)</p><p>gg wp</p><p>赛后好像评测出锅了! 有人把我的编号占了! 所以全机房好像就我一个不知道自己几分! qnmd!</p><p><del>听说30分（20+10+0）</del></p><h3 id="ZJOI-2018-衢州-2018-4-24-2018-4-26"><a href="#ZJOI-2018-衢州-2018-4-24-2018-4-26" class="headerlink" title="ZJOI 2018  @ 衢州 2018.4.24-2018.4.26"></a>ZJOI 2018  @ 衢州 2018.4.24-2018.4.26</h3><h4 id="Day-0-1"><a href="#Day-0-1" class="headerlink" title="Day 0"></a>Day 0</h4><p>省选前机房好像都在切题啊,十分慌张,大爷们要进队了啊.</p><p>(似乎没看到汪大和梁大)</p><p>下午似乎在爆Stupid OJ训练压行?! 罗大压行真的凶啊.</p><p>两点四十分PA来机房叫人啦.</p><p>出校门坐大巴车1H30min到酒店.</p><p>哇这次三人间! 一个大床加两个小床!其实是可以睡四个的,但是为了防止我们晚上玩♂游戏,所以就没有四人一间啦.</p><p>插口这么多我带个屁插线板啊</p><p>环境超好的!资瓷!枕头贼舒服!就是网络真的不稳健.</p><p>晚上po魔禁</p><h4 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h4><p>上午学车cbh神仙讲题,好高端啊.不是很听的懂.姿势水平不够啊.</p><p>余姚中学午饭资瓷!小卖部居然被我们五分钟找到,震惊!</p><p>中午想找个篮球打但是找不到啊,余姚中学都没人把球藏灌木丛里的吗?震惊!</p><p>下午毛老师mjy来啦! <del>果然dls妹子就是好看</del> </p><p>题目还挺友善的,不是开场就是毒瘤题,资瓷!</p><p>有道题好像刷出了ZJOCh的梗（ZJOI群里刷的）.</p><p><img src="/2018/04/26/ZJOI2018酱油记/1.jpg" alt="markdown"></p><p>吐槽:有个小哥一直把那种蓝塑料凳子倒扣在自己头上然后站着撸代码,好大爷啊可就是挡着我看屏幕了.</p><p>毛老师后面的题有些不是很懂啊..</p><p>晚上pogemo</p><h4 id="Day-2-1"><a href="#Day-2-1" class="headerlink" title="Day 2"></a>Day 2</h4><p>上午果然还是陈嘉乐和陆宇暄大爷的毒瘤讲题.</p><p>资瓷一波.</p><p>听不动啊集训队胡策是给人做的吗…</p><p>几乎全程掉线.</p><p>下午miaom讲课啊!资瓷!miaom讲课一直笑着帅死了啊!</p><p>可能还是听不太懂啊.QAQ</p><p>高校宣讲（撕b大会）好多人没来听啊,ckr和pc都走了.感觉第一次来省选开开眼界也好啊.</p><p><del>（顺便下个决心）</del></p><p>果然D起来了,我看着浙大说自己计算机和软件应用都是A+而清北都没有.</p><p>结果我一翻手机看ACM-ICPC2018的Ranklist. 呀Zhejiang University似乎都倒数了..</p><p>感觉没有对比就没有伤害啊…</p><p>中科大看上去挺高端的. THU和PKU讲的真的走心.</p><p>杭电的教练逗死我了他居然拿出了“包分配妹子”的杀器!震惊!</p><p>晚饭去万达吔麦,次了好多东西.</p><p>skylee提议去游戏厅但是觉得玩娃娃机明天会WA WA机啊.</p><p>于是没去.</p><p>晚上不是很想po但还是po了一会儿.</p><p>睡得还算早吧,顺便理了下东西.</p><p>安.</p><h4 id="Day-3-1"><a href="#Day-3-1" class="headerlink" title="Day 3"></a>Day 3</h4><p>比上次感觉EZ一点啊,不过可能对我这种弱鸡还是暴力分写写.</p><p>T1上来感觉不可做,写了个O(n!)的暴力居然花了一个小时!震惊!我菜死了!</p><p>$N = 10$没过啊,难过!我常数这么挫的?</p><p>出来似乎连暴力也写错了?!</p><p>GCC314暴力和boom手算结果一样?!</p><p>药丸.祈祷$N = 5$的时候我是对的啊.QAQ</p><p>T2可能写了个假算法……不知道为什么感觉上午毫无码力啊.</p><p>(<del>我怎么感觉我好像提交文件时候出锅了</del>)</p><p>UPD : 似乎真的出锅了. 凉凉</p><p>T3算几弃坑.rand()一发完事.</p><p>要爆蛋啦Day2!</p><p>滚回去提高姿势水平!</p><p>ZJOI2019再战!</p><p>​                                                                                                     Edited By karriganasta</p><p>​                                                                                    2018.04.26</p><p>​                                      </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;上次的游记好像忘了写了就当一起补上吧qwq&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;课件在这&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;download\Series1.rar&quot;&gt;Series 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;download\Series2.rar&quot;&gt;Series 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;download\ZJOI2018Day1.rar&quot;&gt;ZJOI Day 1 Statement &amp;amp; Solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;download\ZJOI2018Day2.rar&quot;&gt;ZJOI Day 2 Statement &amp;amp; Solution&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://yoursite.com/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="游记" scheme="http://yoursite.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「模板」常用板子</title>
    <link href="http://yoursite.com/2018/04/12/%E3%80%8C%E6%A8%A1%E6%9D%BF%E3%80%8D%E5%B8%B8%E7%94%A8%E6%9D%BF%E5%AD%90/"/>
    <id>http://yoursite.com/2018/04/12/「模板」常用板子/</id>
    <published>2018-04-12T11:02:39.000Z</published>
    <updated>2018-05-01T09:39:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>终于是感觉东西多了要腾个地方出来挂板子了</strong></p><p>To be continued…</p><p><del>顺便置顶一波</del></p><p><a href="download\板子全家桶.rar">板子全家桶</a></p><p><strong>字符串</strong></p><p><a href="download\AC Automaton非指针.cpp">AC Automaton非指针</a> <a href="download\AC Automaton.cpp">AC Automaton</a> <a href="download\kmp.cpp">kmp</a> <a href="download\Trie.cpp">Trie</a></p><p><strong>数学</strong></p><p><a href="download\CRT.cpp">CRT</a> <a href="download\Extended Euclid.cpp">Extended Euclid</a> <a href="download\FFT递归.cpp">FFT递归</a> <a href="download\FFT迭代.cpp">FFT迭代</a> <a href="download\NTT模费马质数.cpp">NTT模费马质数</a> <a href="download\NTT任意模.cpp">NTT任意模</a> <a href="download\多项式求逆.cpp">多项式求逆</a> <a href="download\SG函数.cpp">SG函数</a> <a href="download\矩阵乘法&amp;快速幂.cpp">矩阵乘法&amp;快速幂</a> <a href="download\数论函数线筛.cpp">数论函数线筛</a> <a href="download\线筛乘法逆元.cpp">线筛乘法逆元</a></p><p><strong>图论</strong></p><p><a href="download\LCA.cpp">LCA</a> <a href="download\MST-Kruskal.cpp">MST-Kruskal</a> <a href="download\SPFA.cpp">SPFA</a></p><p><strong>数据结构</strong></p><p><a href="download\Scapegoat替罪羊树.cpp">Scapegoat替罪羊树</a> <a href="download\并查集.cpp">并查集</a> <a href="download\Splay区间反转文艺平衡树.cpp">Splay区间反转文艺平衡树</a> <a href="download\Treap.cpp">Treap</a> <a href="download\线段树区间操作.cpp">线段树区间操作</a> <a href="download\树状数组FenwickTree.cpp">树状数组FenwickTree</a></p><p><strong>杂</strong></p><p><a href="download\Fast IO 1.cpp">Fast IO 1</a> <a href="download\Fast IO 2.cpp">Fast IO 2</a>  <a href="download\快速幂.cpp">快速幂</a> <a href="download\三分法.cpp">三分法</a> <a href="download\三维偏序CDQ分治.cpp">三维偏序CDQ分治</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;终于是感觉东西多了要腾个地方出来挂板子了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To be continued…&lt;/p&gt;
&lt;p&gt;&lt;del&gt;顺便置顶一波&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;download\板子全家桶.rar&quot;&gt;板子全家桶&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="模板" scheme="http://yoursite.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>「HR(HackerRank)」斯波题切题记</title>
    <link href="http://yoursite.com/2018/04/10/%E3%80%8CHR-HackerRank-%E3%80%8D%E6%96%AF%E6%B3%A2%E9%A2%98%E5%88%87%E9%A2%98%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/10/「HR-HackerRank-」斯波题切题记/</id>
    <published>2018-04-10T11:17:13.000Z</published>
    <updated>2018-04-12T05:46:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>切了一波斯波题<del>hjq素质不能更差</del>随便玩玩,还是有点收获的吧..</p><h4 id="K-Candy-Store"><a href="#K-Candy-Store" class="headerlink" title="K Candy Store"></a>K Candy Store</h4><p><strong>Links there:</strong><a href="https://www.hackerrank.com/challenges/k-candy-store/problem" target="_blank" rel="noopener">HR-K Candy Store</a></p><p>大意:有N个人,分不同的K种糖果,各个糖果可以选无数个,求方案数.</p><p><strong>solution:</strong>典型的插板法.答案为$C(n+m-1,n-1)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>; </span><br><span class="line"><span class="keyword">int</span> T,n,m,C[<span class="number">5003</span>][<span class="number">5003</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5000</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j || i == <span class="number">0</span>) C[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> C[i][j] = (C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">T = read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(), m = read();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,C[n+m<span class="number">-1</span>][n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Special-Multiple"><a href="#Special-Multiple" class="headerlink" title="Special Multiple"></a>Special Multiple</h4><p><strong>Links there:</strong><a href="https://www.hackerrank.com/challenges/special-multiple/problem" target="_blank" rel="noopener">HR-Special Multiple</a> </p><p>大意:给出一个N,求最小的只由0,9组成的数字串使得其为给定N的倍数.$N  \leq  500$</p><p><strong>solution:</strong> 考虑01串二进制的转换,[1,2,3,4] $-&gt;$ [1,10,11,100]当我们把右边乘9即可得到0-9串.</p><p>逐位构造即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">binar</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1L</span>L * <span class="number">10</span>*binar(n/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1L</span>L * <span class="number">10</span>*binar(n/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,a=<span class="number">1</span>,b=<span class="number">9</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(b % n) &#123;</span><br><span class="line">a++;</span><br><span class="line">b = binar(a);</span><br><span class="line">b *= <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉和SOJ上马三的二进制数一题很像.而且似乎加个高精就可以A掉.</p><p>当时本蒟蒻做这题还用的dp哈哈.</p><h4 id="Matrix-Racing"><a href="#Matrix-Racing" class="headerlink" title="Matrix Racing"></a>Matrix Racing</h4><p><strong>Links there:</strong><a href="https://www.hackerrank.com/challenges/matrix-tracing/problem" target="_blank" rel="noopener">HR-Matrix Racing</a></p><p>大意:给出一个$N \times M$的矩阵,求从左上角$(1,1)$到右下角$(N,M)$的方案数</p><p>变相的杨辉三角.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>; </span><br><span class="line"><span class="keyword">int</span> T,n,m,jc[<span class="number">2000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) b = b * m % mod;</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line">m = m * m % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i1 = quickpow(jc[n-r],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">int</span> i2 = quickpow(jc[r],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1L</span>L * i1 * i2 % mod * jc[n] % mod;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">jc[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000004</span>; i++)</span><br><span class="line">jc[i] = <span class="number">1L</span>L * jc[i<span class="number">-1</span>] * i % mod;</span><br><span class="line">T = read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(), m = read();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,C(n+m<span class="number">-2</span>,n<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>剩下的好像都挺傻逼的就不写题面了</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sherlock和约数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t = read();</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(n+<span class="number">0.5</span>); i++)</span><br><span class="line"><span class="keyword">if</span> (!(n % i)) &#123;<span class="keyword">if</span>(!(i%<span class="number">2</span>))++ans; <span class="keyword">if</span>(i*i == n) <span class="keyword">continue</span>; <span class="keyword">if</span>(!((n/i)%<span class="number">2</span>)) ++ans;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Diwali Lights</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T = read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(),prod = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) prod *= <span class="number">2</span>,prod %= mod;</span><br><span class="line">prod = ((prod<span class="number">-1</span>) % mod + mod) % mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Summing N Series</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">n %= mod;</span><br><span class="line">n = n * n % mod;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;切了一波斯波题&lt;del&gt;hjq素质不能更差&lt;/del&gt;随便玩玩,还是有点收获的吧..&lt;/p&gt;
&lt;h4 id=&quot;K-Candy-Store&quot;&gt;
      
    
    </summary>
    
      <category term="HackerRank" scheme="http://yoursite.com/categories/HackerRank/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[奇技淫巧] bitset大法吼啊</title>
    <link href="http://yoursite.com/2018/03/29/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-bitset%E5%A4%A7%E6%B3%95%E5%90%BC%E5%95%8A/"/>
    <id>http://yoursite.com/2018/03/29/奇技淫巧-bitset大法吼啊/</id>
    <published>2018-03-29T12:32:46.000Z</published>
    <updated>2018-03-30T12:21:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>bitset不止一次听大爷们安利过了…</p><p><del>似乎</del> 挺厉害的.<br>因为bool数组在用的时候只能够用一个byte但是byte有8个bit,0/1只要1个就够了.. 所以浪费了7个bit.</p><p><strong>Reference:</strong></p><p><a href="http://zh.cppreference.com/w/cpp/utility/bitset" target="_blank" rel="noopener">bitset/zh-cpp-reference</a></p><p><a href="http://www.cplusplus.com/reference/bitset/bitset/?kw=bitset" target="_blank" rel="noopener">bitset/cppcontainer</a></p><p><del>hfq is so toxic.!</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//正常的构造 </span></span><br><span class="line"><span class="built_in">bitset</span>&lt;8&gt;a(<span class="number">42</span>); <span class="comment">//[0,0,1,0,1,0,1,0]</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;70&gt;b(LLONG_MAX); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串string构造</span></span><br><span class="line"><span class="built_in">string</span> bit_s = <span class="string">"110010"</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;8&gt;c(bit_s);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// bitset&lt;sz&gt;b(bit_string,x,(y));</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;8&gt;d(bit_s,<span class="number">2</span>); <span class="comment">//字符串的第 x+1(下标为x)个及之后的甩进bitset.</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;8&gt;e(bit_s,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//字符串的第 x+1(下标为x) 及共y个甩进bitset. </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// string的自定义构造0,1串</span></span><br><span class="line"><span class="built_in">string</span> bit_as = <span class="string">"HHHJJJHHJH"</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;10&gt;f(bit_as,<span class="number">0</span>,bit_as.size(),<span class="string">'H'</span>,<span class="string">'J'</span>); <span class="comment">//把H设为0，J设为1,如果出现了其他的字符就返回错误 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Atcoder-Grand-Contest-AGC-020-C-Median-Sum"><a href="#Atcoder-Grand-Contest-AGC-020-C-Median-Sum" class="headerlink" title="Atcoder Grand Contest AGC 020 C Median Sum"></a>Atcoder Grand Contest AGC 020 C Median Sum</h4><p><a href="https://agc020.contest.atcoder.jp/tasks/agc020_c" target="_blank" rel="noopener">AGC 020C</a></p><p><strong>水题(<del>我还是不会做</del>)</strong></p><p>用bitset维护一个类似背包的东西..</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ret = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;4000010&gt;f;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = read();</span><br><span class="line">f = f|(f&lt;&lt;x);</span><br><span class="line">ret += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = (ret+<span class="number">1</span>)/<span class="number">2</span>; !f[i]; i++);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;bitset不止一次听大爷们安利过了…&lt;/p&gt;
&lt;p&gt;&lt;del&gt;似乎&lt;/del&gt; 挺厉害的.&lt;br&gt;因为bool数组在用的时候只能够用一个b
      
    
    </summary>
    
      <category term="bitset" scheme="http://yoursite.com/categories/bitset/"/>
    
    
      <category term="-&quot;奇技淫巧&quot;" scheme="http://yoursite.com/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Treap/Splay/Scapegoat 学习笔记&amp;板子</title>
    <link href="http://yoursite.com/2018/03/28/Treap-Splay-Scapegoat-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9D%BF%E5%AD%90/"/>
    <id>http://yoursite.com/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/</id>
    <published>2018-03-28T12:35:45.000Z</published>
    <updated>2018-03-29T02:35:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>先祝贺岁纳京子Toshinou Kyouko生快!</p><p><img src="/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/DZW-modW0AE-L0E.jpg" alt="Toshinou Kyouko Senpai"></p><p><img src="/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/DZTl7-EU0AApZ7Z.jpg" alt="Toshinou Kyouko"></p><p>啊啊啊啊啊啊可爱死了~~</p><p><strong>Treap/Splay/Scapegoat板子</strong></p><p>全指针 毕竟指针好写好调（虽然占多了点M</p><h3 id="Treap-LUOGU-P3369-BZOJ-3224可食用"><a href="#Treap-LUOGU-P3369-BZOJ-3224可食用" class="headerlink" title="Treap(LUOGU P3369/BZOJ 3224可食用)"></a>Treap(LUOGU P3369/BZOJ 3224可食用)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m     操作有m个</span></span><br><span class="line"><span class="comment">// 1 x   插入元素x</span></span><br><span class="line"><span class="comment">// 2 x   删除元素x。如果成功，输入1，否则输出0</span></span><br><span class="line"><span class="comment">// 3 k   输出值x的“名次”，即比x小的结点个数加1</span></span><br><span class="line"><span class="comment">// 4 x   第k小元素。k=1为最小元素</span></span><br><span class="line"><span class="comment">// 5 x   prefix of x</span></span><br><span class="line"><span class="comment">// 6 x   suffix of x</span></span><br><span class="line"><span class="comment">// ... to be continued ...</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">Node *ch[<span class="number">2</span>]; <span class="comment">// 左右子树</span></span><br><span class="line"><span class="keyword">int</span> r; <span class="comment">// 随机优先级</span></span><br><span class="line"><span class="keyword">int</span> v; <span class="comment">// 值</span></span><br><span class="line"><span class="keyword">int</span> s; <span class="comment">// 结点总数</span></span><br><span class="line">Node(<span class="keyword">int</span> v = <span class="number">0</span>):v(v) &#123;</span><br><span class="line">ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">r = rand();</span><br><span class="line">s = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == v) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> x &lt; v ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>] != <span class="literal">NULL</span>) s += ch[<span class="number">0</span>]-&gt;s;</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">1</span>] != <span class="literal">NULL</span>) s += ch[<span class="number">1</span>]-&gt;s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">Node* k = o-&gt;ch[d^<span class="number">1</span>];</span><br><span class="line">o-&gt;ch[d^<span class="number">1</span>] = k-&gt;ch[d];</span><br><span class="line">k-&gt;ch[d] = o;</span><br><span class="line">o-&gt;maintain();</span><br><span class="line">k-&gt;maintain();</span><br><span class="line">o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span>) o = <span class="keyword">new</span> Node(x);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> d = (x &lt; o-&gt;v ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">insert(o-&gt;ch[d], x);</span><br><span class="line"><span class="keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o, d^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">o-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node* <span class="title">find</span><span class="params">(Node* o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(x == o-&gt;v) <span class="keyword">return</span> o;</span><br><span class="line"><span class="keyword">return</span> x &lt; o-&gt;v ? find(o-&gt;ch[<span class="number">0</span>], x) : find(o-&gt;ch[<span class="number">1</span>], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = o-&gt;cmp(x);</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">-1</span>) &#123;</span><br><span class="line">Node* u = o;</span><br><span class="line"><span class="keyword">if</span>(o-&gt;ch[<span class="number">0</span>] != <span class="literal">NULL</span> &amp;&amp; o-&gt;ch[<span class="number">1</span>] != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> d2 = (o-&gt;ch[<span class="number">0</span>]-&gt;r &gt; o-&gt;ch[<span class="number">1</span>]-&gt;r ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">rotate(o, d2);</span><br><span class="line">remove(o-&gt;ch[d2], x);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span>) o = o-&gt;ch[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> o = o-&gt;ch[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">delete</span> u;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">remove(o-&gt;ch[d], x);</span><br><span class="line"><span class="keyword">if</span>(o != <span class="literal">NULL</span>) o-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(Node* o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span> || k &lt;= <span class="number">0</span> || k &gt; o-&gt;s) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s = (o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">0</span> : o-&gt;ch[<span class="number">0</span>]-&gt;s);</span><br><span class="line"><span class="keyword">if</span>(k == s+<span class="number">1</span>) <span class="keyword">return</span> o-&gt;v;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k &lt;= s) <span class="keyword">return</span> kth(o-&gt;ch[<span class="number">0</span>], k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> kth(o-&gt;ch[<span class="number">1</span>], k-s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node* o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= o-&gt;v) <span class="keyword">return</span> rank(o-&gt;ch[<span class="number">0</span>], x);</span><br><span class="line"><span class="keyword">return</span> rank(o-&gt;ch[<span class="number">1</span>], x) + (o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">0</span> : o-&gt;ch[<span class="number">0</span>]-&gt;s) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prefix</span><span class="params">(Node *o, <span class="keyword">int</span> k,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (o == <span class="literal">NULL</span>) <span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">if</span> (k &gt; o-&gt;v) <span class="keyword">return</span> prefix(o-&gt;ch[<span class="number">1</span>],k,o-&gt;v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> prefix(o-&gt;ch[<span class="number">0</span>],k,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">suffix</span><span class="params">(Node *o, <span class="keyword">int</span> k,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (o == <span class="literal">NULL</span>) <span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">if</span> (k &lt; o-&gt;v) <span class="keyword">return</span> suffix(o-&gt;ch[<span class="number">0</span>],k,o-&gt;v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> suffix(o-&gt;ch[<span class="number">1</span>],k,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void dfs(Node *o)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (o == NULL) return ;</span></span><br><span class="line"><span class="comment">printf("%d\n",o-&gt;v);</span></span><br><span class="line"><span class="comment"> printf("LC of %d:\n",o-&gt;v);dfs(o-&gt;ch[0]);</span></span><br><span class="line"><span class="comment"> printf("RC of %d:\n",o-&gt;v); dfs(o-&gt;ch[1]);</span></span><br><span class="line"><span class="comment">printf("EO %d!\n\n",o-&gt;v); </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">srand(<span class="keyword">int</span>(time(<span class="literal">NULL</span>)));</span><br><span class="line"><span class="keyword">int</span> m, c, v;</span><br><span class="line">Node* root = <span class="keyword">new</span> Node(INF);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;v);</span><br><span class="line"><span class="keyword">if</span>(c == <span class="number">1</span>) insert(root, v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">2</span>) &#123;</span><br><span class="line">Node* o = find(root, v);</span><br><span class="line"><span class="keyword">if</span>(o != <span class="literal">NULL</span>) remove(root, v);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rank(root, v));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kth(root,v));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prefix(root,v,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,suffix(root,v,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Splay-LUOGU-P3391-BZOJ-3223可食用"><a href="#Splay-LUOGU-P3391-BZOJ-3223可食用" class="headerlink" title="Splay(LUOGU P3391/BZOJ 3223可食用)"></a>Splay(LUOGU P3391/BZOJ 3223可食用)</h3><p>(好像叫Spaly的也有 大雾)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">Node* ch[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> v,s,flip;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d=k-ch[<span class="number">0</span>]-&gt;s;</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> d&lt;=<span class="number">0</span>? <span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s=ch[<span class="number">0</span>]-&gt;s+ch[<span class="number">1</span>]-&gt;s+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flip) &#123;</span><br><span class="line">flip=<span class="number">0</span>;</span><br><span class="line">swap(ch[<span class="number">0</span>],ch[<span class="number">1</span>]);</span><br><span class="line">ch[<span class="number">0</span>]-&gt;flip^=<span class="number">1</span>;</span><br><span class="line">ch[<span class="number">1</span>]-&gt;flip^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node* null=<span class="keyword">new</span> Node();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* &amp;o,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">Node* k=o-&gt;ch[d^<span class="number">1</span>];</span><br><span class="line">o-&gt;ch[d^<span class="number">1</span>]=k-&gt;ch[d];</span><br><span class="line">k-&gt;ch[d]=o;</span><br><span class="line">o-&gt;maintain(),k-&gt;maintain();</span><br><span class="line">o=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(Node* &amp;o,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">o-&gt;pushdown();</span><br><span class="line"><span class="keyword">int</span> d=o-&gt;cmp(k);</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">1</span>) k-=o-&gt;ch[<span class="number">0</span>]-&gt;s+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(d!=<span class="number">-1</span>) &#123;</span><br><span class="line">Node* p=o-&gt;ch[d];</span><br><span class="line">p-&gt;pushdown();</span><br><span class="line"><span class="keyword">int</span> d2=p-&gt;cmp(k);</span><br><span class="line"><span class="keyword">int</span> k2=d2==<span class="number">0</span>? k:k-p-&gt;ch[<span class="number">0</span>]-&gt;s<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(d2!=<span class="number">-1</span>) &#123;</span><br><span class="line">splay(p-&gt;ch[d2],k2);</span><br><span class="line"><span class="keyword">if</span>(d==d2) rotate(o,d^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> rotate(o-&gt;ch[d],d);</span><br><span class="line">&#125;</span><br><span class="line">rotate(o,d^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node* <span class="title">merge</span><span class="params">(Node* left,Node* right)</span> </span>&#123;</span><br><span class="line">splay(left,left-&gt;s);</span><br><span class="line">left-&gt;ch[<span class="number">1</span>]=right,left-&gt;maintain();</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(Node* o,<span class="keyword">int</span> k,Node* &amp;left,Node* &amp;right)</span> </span>&#123;</span><br><span class="line">splay(o,k);</span><br><span class="line">left=o,right=left-&gt;ch[<span class="number">1</span>],left-&gt;ch[<span class="number">1</span>]=null;</span><br><span class="line">left-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SplaySequence</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Node seq[maxn];</span><br><span class="line">Node* root;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">build</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!sz) <span class="keyword">return</span> null;</span><br><span class="line">Node* l=build(sz/<span class="number">2</span>);</span><br><span class="line">Node* o=&amp;seq[++n];</span><br><span class="line">o-&gt;v=n;</span><br><span class="line">o-&gt;ch[<span class="number">0</span>]=l;</span><br><span class="line">o-&gt;ch[<span class="number">1</span>]=build(sz-sz/<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">o-&gt;flip=o-&gt;s=<span class="number">0</span>;</span><br><span class="line">o-&gt;maintain();</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">n=null-&gt;s=<span class="number">0</span>;</span><br><span class="line">root=build(sz);</span><br><span class="line">&#125;</span><br><span class="line">&#125; spaly;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Node* o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o!=null) &#123;</span><br><span class="line">o-&gt;pushdown();</span><br><span class="line">print(o-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">ans.push_back(o-&gt;v);</span><br><span class="line">print(o-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) c=getchar();</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">spaly.init(n+<span class="number">1</span>);   </span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">Node *left,*right,*mid;</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line">l=read(),r=read();</span><br><span class="line">split(spaly.root,l,left,right);</span><br><span class="line">split(right,r-l+<span class="number">1</span>,mid,right);</span><br><span class="line">mid-&gt;flip^=<span class="number">1</span>;</span><br><span class="line">spaly.root = merge(merge(left,mid),right);</span><br><span class="line">&#125;</span><br><span class="line">print(spaly.root);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;ans.size(); i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scapegoat-LUOGU-P3369-BZOJ-3224可食用"><a href="#Scapegoat-LUOGU-P3369-BZOJ-3224可食用" class="headerlink" title="Scapegoat(LUOGU P3369/BZOJ 3224可食用)"></a>Scapegoat(LUOGU P3369/BZOJ 3224可食用)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha=<span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scapegoat</span>&#123;</span></span><br><span class="line">    scapegoat *l,*r;</span><br><span class="line">    <span class="keyword">int</span> val,size,cnt;</span><br><span class="line">    <span class="keyword">bool</span> deleted;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (l-&gt;cnt &gt; alpha*cnt+<span class="number">5</span> || r-&gt;cnt &gt; alpha*cnt+<span class="number">5</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>&#123;size=!deleted+l-&gt;size+r-&gt;size; cnt=<span class="number">1</span>+r-&gt;cnt+l-&gt;cnt;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">scapegoat *null;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(scapegoat *o,<span class="built_in">vector</span>&lt;scapegoat*&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o == null) <span class="keyword">return</span>;</span><br><span class="line">    dfs(o-&gt;l,v);</span><br><span class="line">    <span class="keyword">if</span>(!o-&gt;deleted) v.push_back(o);</span><br><span class="line">    dfs(o-&gt;r,v);</span><br><span class="line">    <span class="keyword">if</span>(o-&gt;deleted) <span class="keyword">delete</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">scapegoat *<span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;scapegoat*&gt; &amp;v,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> null;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    scapegoat *o = v[mid];</span><br><span class="line">    o-&gt;l = build(v,l,mid);</span><br><span class="line">    o-&gt;r = build(v,mid+<span class="number">1</span>,r);</span><br><span class="line">    o-&gt;maintain();</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(scapegoat* &amp;o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;scapegoat*&gt; v;</span><br><span class="line">    dfs(o,v);</span><br><span class="line">    o = build(v,<span class="number">0</span>,v.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,scapegoat* &amp;o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o==null)</span><br><span class="line">    &#123;</span><br><span class="line">        o=<span class="keyword">new</span> scapegoat;</span><br><span class="line">        o-&gt;l=o-&gt;r=null;</span><br><span class="line">        o-&gt;deleted=<span class="literal">false</span>;</span><br><span class="line">        o-&gt;size=o-&gt;cnt=<span class="number">1</span>;</span><br><span class="line">        o-&gt;val=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++o-&gt;size;</span><br><span class="line">        ++o-&gt;cnt;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=o-&gt;val)</span><br><span class="line">            insert(x,o-&gt;r);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            insert(x,o-&gt;l);</span><br><span class="line">        <span class="keyword">if</span>(o-&gt;is_bad())rebuild(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(scapegoat *now,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(now!=null)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(now-&gt;val&gt;=x)now=now-&gt;l;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans+=now-&gt;l-&gt;size+!now-&gt;deleted;</span><br><span class="line">                now=now-&gt;r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(scapegoat *now,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(now!=null)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!now-&gt;deleted &amp;&amp; now-&gt;l-&gt;size+<span class="number">1</span>==x)</span><br><span class="line">            <span class="keyword">return</span> now-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;l-&gt;size&gt;=x)now=now-&gt;l;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                x-=now-&gt;l-&gt;size+!now-&gt;deleted;</span><br><span class="line">                now=now-&gt;r;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(scapegoat *o,<span class="keyword">int</span> rk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!o-&gt;deleted &amp;&amp; rk==o-&gt;l-&gt;size+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        o-&gt;deleted=<span class="number">1</span>;</span><br><span class="line">        --o-&gt;size;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --o-&gt;size;</span><br><span class="line">    <span class="keyword">if</span>(rk&lt;=o-&gt;l-&gt;size+!o-&gt;deleted)</span><br><span class="line">        erase(o-&gt;l,rk);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        erase(o-&gt;r,rk-o-&gt;l-&gt;size-!o-&gt;deleted);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> negativ = <span class="number">1</span>;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c == <span class="string">'-'</span>) negativ = <span class="number">-1</span>; c = getchar();&#125; </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;a = a*<span class="number">10</span>+c-<span class="string">'0'</span>;c = getchar();&#125;</span><br><span class="line">    a *= negativ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scapegoat *root;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    null = <span class="keyword">new</span> scapegoat;</span><br><span class="line">    root = null;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op,x;</span><br><span class="line">        read(op); read(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)insert(x,root);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>)erase(root,rank(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rank(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">5</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(root,rank(root,x)<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">6</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(root,rank(root,x+<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先祝贺岁纳京子Toshinou Kyouko生快!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/DZW-modW0AE-L0E.jpg&quot; alt=&quot;Toshinou Kyouko Senpai&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Atcoder Regular Contest arc 091-092 切(W)题(A)记</title>
    <link href="http://yoursite.com/2018/03/27/Atcoder-Regular-Contest-arc-091-092-%E5%88%87-W-%E9%A2%98-A-%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/27/Atcoder-Regular-Contest-arc-091-092-切-W-题-A-记/</id>
    <published>2018-03-27T03:26:45.000Z</published>
    <updated>2018-03-27T08:57:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>上午闲着没事就找了点Atcoder的（水）题切切, 顺便过一下博弈和SG函数。</p><h4 id="Atcoder-Regular-Contest-091-C-Flip-Flip-and-Flip"><a href="#Atcoder-Regular-Contest-091-C-Flip-Flip-and-Flip" class="headerlink" title="Atcoder Regular Contest 091 C Flip,Flip,and Flip"></a>Atcoder Regular Contest 091 C Flip,Flip,and Flip</h4><p><a href="https://arc091.contest.atcoder.jp/tasks/arc091_a#" target="_blank" rel="noopener">ARC 091C</a></p><p>問題文</p><p>縦横に無限に広がるマス目があり、そのうちの連続する <em>N</em> 行 <em>M</em> 列の領域のすべてのマスに表裏の区別できるカードが置かれています。 最初はすべてのカードが表を向いています。</p><p>以下の操作を、カードが置かれている全てのマスについて 1 度ずつ行います。</p><ul><li>そのマスと辺または点で接する 8 つのマスと、そのマスの合計 9 マスについて、カードが存在するなら裏返す。</li></ul><p>すべての操作を行った後の各カードの状態は操作を行う順番に依らないことが証明できます。 すべての操作を行った後、裏を向いているカードの枚数を求めてください。</p><p>大意</p><p>问题陈述有无限长度和宽度的正方形展开，并且可以区分正面和背面的牌被放置在连续的n行和m列中的所有单元中。最初所有牌都面朝桌子。对于放置卡的每个方块执行一次以下操作。如果有8个方格邻接那个正方形和边或者点，并且如果有一张卡，则总共9个方格。您可以证明执行所有操作后每张卡的状态不取决于操作顺序。完成所有操作后，请找到背面的卡片数量。</p><p>注意细节特判1,1的情况.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(), m = read();</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> &amp;&amp; m == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,m<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n*m-(n+m)*<span class="number">2</span>+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Atcoder-Regular-Contest-091-D-Remainder-Reminder"><a href="#Atcoder-Regular-Contest-091-D-Remainder-Reminder" class="headerlink" title="Atcoder Regular Contest 091 D Remainder Reminder"></a>Atcoder Regular Contest 091 D Remainder Reminder</h4><p><a href="https://arc091.contest.atcoder.jp/tasks/arc091_b" target="_blank" rel="noopener">ARC 091D</a></p><h3 id="問題文"><a href="#問題文" class="headerlink" title="問題文"></a>問題文</h3><p>高橋君は、<em>N</em> 以下の正の整数の 2 つ組 (<em>a</em>,<em>b</em>) を持っていましたが、忘れてしまいました。 高橋君は、<em>a</em> を <em>b</em> で割ったあまりが <em>K</em> 以上であったことを覚えています。 高橋君が持っていた組としてあるうるものの個数を求めてください。</p><h3 id="制約"><a href="#制約" class="headerlink" title="制約"></a>制約</h3><ul><li>1≤<em>N</em>≤105</li><li>0≤<em>K</em>≤<em>N</em>−1</li><li>入力は全て整数である</li></ul><p>大意</p><p>给出限制$N,K$,求满足</p><script type="math/tex; mode=display">a,b \leq N,令a\equiv x(mod \space b),K\leq x\leq b-1的方案数</script><p>考虑b的范围为$[K+1,N]$</p><p>直接枚举b,然后算出对应范围下的$x$个数，但是注意xmax后有一部分剩余.</p><p>注意细节。（我特么WA了两次啊真彩笔）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> N = read(),K = read();</span><br><span class="line"><span class="keyword">if</span> (K == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">N *= N;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; N;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = K+<span class="number">1</span>; b &lt;= N; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xmax = (N)/(b);</span><br><span class="line"><span class="comment">//cout &lt;&lt; xmax &lt;&lt; " # " &lt;&lt; "\n"; </span></span><br><span class="line">ans += xmax * (b-K);</span><br><span class="line">ans += max(<span class="number">0L</span>L,(N - b * xmax) - K + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Atcoder-Regular-Contest-091-F-Strange-Nim"><a href="#Atcoder-Regular-Contest-091-F-Strange-Nim" class="headerlink" title="Atcoder Regular Contest 091 F Strange Nim"></a>Atcoder Regular Contest 091 F Strange Nim</h4><p><a href="https://arc091.contest.atcoder.jp/tasks/arc091_d" target="_blank" rel="noopener">ARC 091F</a></p><h3 id="問題文-1"><a href="#問題文-1" class="headerlink" title="問題文"></a>問題文</h3><p>高橋君と青木君は、石取りゲームをしています。最初、山が <em>N</em> 個あり、<em>i</em> 個目の山には <em>A**i</em> 個の石があり、整数 <em>K**i</em> が定まっています。</p><p>高橋君と青木君は、高橋君から始めて、交互に以下の操作を繰り返します。</p><ul><li>山を 1 つ選ぶ。<em>i</em> 個目の山を選び、その山に <em>X</em> 個の石が残っている場合、1 個以上 <em>floor</em>(<em>X</em>⁄<em>K**i</em>) 個以下の任意の個数の石を <em>i</em> 個目の山から取り除く。</li></ul><p>先に操作ができなくなったプレイヤーが負けです。両者最善を尽くしたとき、どちらのプレイヤーが勝つか判定してください。 ただし、<em>floor</em>(<em>x</em>) で <em>x</em> 以下の最大の整数を表します。</p><p>大意:</p><p>给n堆石子，每堆有一开始有ai个和一个常数ki。两个人轮流操作，每个人每轮可以选一堆石子，然后在其中取走1到$\large\frac{a_i}{k_i}$,谁不能操作就算输，问先手必胜还是后手必胜。 </p><p>SG函数+暴力</p><p>不难发现SG函数递推式$SG(x) = SG(x-x/k-1)$</p><p>因为每一次k都是恒等的，考虑直接一步用取模跳到就行，不然T飞。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"Takahashi"</span>,s2 = <span class="string">"Aoki"</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = <span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = <span class="built_in">cin</span>.get();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = <span class="built_in">cin</span>.get();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> n = read();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = read() , k = read();</span><br><span class="line"><span class="keyword">while</span>((x%k)) x -= ((x%k<span class="number">-1</span>)/(x/k+<span class="number">1</span>)+<span class="number">1</span>) * (x/k+<span class="number">1</span>);</span><br><span class="line">ans ^= x/k; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans) <span class="built_in">cout</span> &lt;&lt; s1;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; s2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;上午闲着没事就找了点Atcoder的（水）题切切, 顺便过一下博弈和SG函数。&lt;/p&gt;
&lt;h4 id=&quot;Atcoder-Regular-Co
      
    
    </summary>
    
      <category term="Atcoder" scheme="http://yoursite.com/categories/Atcoder/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>生成函数学习笔记[干货]</title>
    <link href="http://yoursite.com/2018/03/09/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B2%E8%B4%A7/"/>
    <id>http://yoursite.com/2018/03/09/生成函数学习笔记-干货/</id>
    <published>2018-03-09T00:16:36.000Z</published>
    <updated>2018-03-09T08:06:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>生成函数算是一种<del>既简单又有用</del>的数学方法,一般用来解决组合技术问题,而且是一种最重要的一般性处理方法.</p><p><strong>填完坑再划</strong></p><a id="more"></a><p>主要参考资料:&lt;组合数学引论(中科大)&gt;</p><h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><p>对于一个有限数列或者无限数列</p><script type="math/tex; mode=display">\{ a_0,a_1,a_2,... \}</script><p>我们用幂级数</p><script type="math/tex; mode=display">A(x) = a_0+a_1x+a_2x^2+...\\\\=\sum_{i=0}^{\infty}a_ix^i</script><p>来使之为一个整体，我们相当于用这样的一个我们自己构造出来的函数去研究整个函数的性质。 而不必单个地研究.特别地,我们把$A(x)$称为该序列的生成函数,记为$G{a_n }$.</p><p>对于特殊情况比如组合数列</p><script type="math/tex; mode=display">\{  \binom{n}{0}\binom{n}{1},\cdot\cdot\cdot,\binom{n}{n}\}</script><p>根据上述的定义,令其生成函数为$f_n(x)$,则有</p><script type="math/tex; mode=display">f_n(x)=\binom{n}{0}+\binom{n}{1}x+\cdot\cdot\cdot+\binom{n}{n}x^n</script><p>由二项式定理不难得到</p><script type="math/tex; mode=display">f_n(x)=(1+x)^n</script><p>那么就可以对这个玩意进行单独研究了比如我们假设要求</p><p>​p><script type="math/tex; mode=display">\sum_{i=0}^n\binom{n}{i}</script><p>实际上就是$x=1$的情况.代入后就是$2^n$.</p><p>或者再比如求</p><script type="math/tex; mode=display">\sum_{i=1}^ni\binom{n}{i}\\\\</script><p>hjq瞬间用组合意义秒掉.%%%%%</p><p>这个式子,相当于在$n$个球中选出$i$个并且给之中的一个染色的数量</p><p>那么先染一个再选择显然是等价的.所以就是下面的式子了.</p><p>用二项式的话用容斥原理不难得到</p><script type="math/tex; mode=display">\sum_{i=1}^ni\binom{n}{i}\\\\=n \times 2^{n-1}</script><p>由恒等式</p><script type="math/tex; mode=display">(1+x)^{m+n}=(1+x)^m(1+x)^n\\\\\longrightarrow\space\binom{m+n}{r} = \sum_{k=0}^r\binom{m}{k}\binom{n}{r-k}</script><p><strong>好了上面都是玩泥巴~~</strong></p><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p>丢一个栗子</p><p>假设你有一个正常的骰子（六个面的那种），且掷出每个面的概率近似认为相等（$\frac{1}{6}$）.</p><p>连续丢出两次,问掷出和为10的概率为多少？</p><p><strong>答:你怕不是个zz吧,这么简单的问题你也敢问？</strong></p><p>好,连续丢出十次,问掷出和为30的概率为多少？</p><p><strong>没话说了吧</strong></p><p><strong>解：</strong></p><p>用生成函数的思想来，把每一个和看作关于点数(1,2,3,4,5,6)的多项式乘积.</p><p>也就是$x+x^2+x^3+x^4+x^5+x^6$.</p><p>那么,关于第二个问题,转换为</p><script type="math/tex; mode=display">(x+x^2+x^3+x^4+x^5+x^6)^{10}</script><p>上述这个式子中,问你$x^{30}$的系数。</p><p>还是很难做对不对,考虑化简</p><script type="math/tex; mode=display">(x+x^2+x^3+x^4+x^5+x^6)^{10}\\\\=(x(1+x+x^2+x^3+x^4+x^5))^{10}\\\\发现x=-1是原式因式.\\\\一顿大除法.\\\\\longrightarrow\space=[(x^2+x+1)(x^2-x+1)]^{10}\times x^{10} \times (x+1)^{10}</script><p>好的我们头皮发麻而且发现这个式子对我们最终计算$x^{30}$的系数没有任何的卵用.</p><p>为什么？因为我们不会三项式展开，但是如果不进行因式分解项数肯定会更大我们更不会算！</p><p>考虑反过来,如果把原式写成两个二项式的商也可以.</p><script type="math/tex; mode=display">(1+x+x^2+x^3+x^4+x^5)\\\\=\frac{(1-x^6)}{1-x}\\\\那么原来的式子(x+x^2+x^3+x^4+x^5+x^6)^{10}\\\\=x^{10}(1-x^6)^{10}(1-x)^{-10}\\\\扔上二项式定理\\\\又因为10次是偶数次,(1-x^6)写成(x^6-1)，后面的同理\\\\\rightarrow x^{10}\times\sum_{i=0}^{10}(-1)^i\binom{10}{i}x^{6i}\times\sum_{k=0}^{\infty}\binom{10+k-1}{k}x^k</script><p>好了把前面的$x^{10}$扔掉后面的构造出i,k满足x的次数为20就行辣.</p><p>一共i只可能取0,1,2,3枚举就行.</p><p>答案似乎长这个样子</p><script type="math/tex; mode=display">\binom{29}{20}-\binom{10}{1}\binom{23}{14}+\binom{17}{8}\binom{10}{2}-\binom{10}{3}\binom{11}{2}</script><p>反正我是懒得算答案了.</p><h3 id="生成函数的性质"><a href="#生成函数的性质" class="headerlink" title="生成函数的性质"></a>生成函数的性质</h3><h4 id="生成函数的形式导数"><a href="#生成函数的形式导数" class="headerlink" title="生成函数的形式导数"></a>生成函数的形式导数</h4><p><strong>定义</strong></p><script type="math/tex; mode=display">\forall A(x)=\sum_{k=0}^{\infty}a_kx^k \in R[[x]]\\\\定义DA\equiv\sum_{k=1}^{\infty}ka_kx^{k-1}\\\\称作A(x)在R[[x]]上的形式导数.</script><p>形式导数的运算法则和普通导数差不多.</p><p>加法则乘法则都满足的.但是似乎没有对链导法则的定义.</p><h4 id="生成函数主要常用性质"><a href="#生成函数主要常用性质" class="headerlink" title="生成函数主要常用性质"></a>生成函数主要常用性质</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h2&gt;&lt;p&gt;生成函数算是一种&lt;del&gt;既简单又有用&lt;/del&gt;的数学方法,一般用来解决组合技术问题,而且是一种最重要的一般性处理方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;填完坑再划&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[SCOI-2012] 喵星球上的点名 AC自动姬+map</title>
    <link href="http://yoursite.com/2018/03/08/SCOI-2012-%E5%96%B5%E6%98%9F%E7%90%83%E4%B8%8A%E7%9A%84%E7%82%B9%E5%90%8D-AC%E8%87%AA%E5%8A%A8%E5%A7%AC-map/"/>
    <id>http://yoursite.com/2018/03/08/SCOI-2012-喵星球上的点名-AC自动姬-map/</id>
    <published>2018-03-08T11:54:34.000Z</published>
    <updated>2018-03-08T12:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2754" target="_blank" rel="noopener">BZOJ-2754</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>直接暴力对每个串开个map建AC自动姬.</p><p>写起来其实不难的,思维难度也不是很高.主要的技巧在于常数的处理.</p><p>看上去空间爆炸但是居然过了!!</p><p>LUOGU好像加了一组恶心数据卡掉了这种<del>辣鸡</del>做法</p><p>好吧其实正解好像要用到主席树可惜我还不会.</p><p>菜啊 qwq</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RG register</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,ans1[maxn],ans2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a[maxn&lt;&lt;<span class="number">1</span>],status[maxn],V,M;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn],mk[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;to[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Aho_Corasick</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt,ans;</span><br><span class="line">    <span class="keyword">int</span> fail[maxn],q[maxn];</span><br><span class="line">    Aho_Corasick()</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">-1</span>; i &lt;= <span class="number">1e4</span>; i++)</span><br><span class="line">            to[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = read(),nn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = read();</span><br><span class="line">            <span class="keyword">if</span> (!to[nn][x]) to[nn][x]=++cnt;</span><br><span class="line">            nn = to[nn][x];</span><br><span class="line">        &#125;</span><br><span class="line">        status[nn].push_back(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build_fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        q.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (it = to[tmp].begin(); it != to[tmp].end(); it++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> t1 = it-&gt;first,t2 = it-&gt;second;</span><br><span class="line">                <span class="keyword">int</span> k = fail[tmp];</span><br><span class="line">                <span class="comment">//printf("%d %d %d\n",t1,t2,k);</span></span><br><span class="line">                <span class="keyword">while</span>(!to[k][t1]) k = fail[k];</span><br><span class="line">                fail[t2] = to[k][t1];</span><br><span class="line">                q.push(t2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = x; i != <span class="number">0</span>; i = fail[i])</span><br><span class="line">            <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[i]  = <span class="number">1</span>;</span><br><span class="line">                V.push_back(i);</span><br><span class="line">                <span class="keyword">for</span> (RG <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; status[i].size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mk[status[i][j]])</span><br><span class="line">                    &#123;</span><br><span class="line">                        mk[status[i][j]] = <span class="number">1</span>;</span><br><span class="line">                        M.push_back(status[i][j]);</span><br><span class="line">                        ans1[status[i][j]] ++;</span><br><span class="line">                        ans2[id]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sett</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V.size(); i++) vis[V[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.size(); i++) mk[M[i]] = <span class="number">0</span>;</span><br><span class="line">        V.clear(); M.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>  nn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[x].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t = a[x][i];</span><br><span class="line">            <span class="keyword">while</span>(!to[nn][t]) nn = fail[nn];</span><br><span class="line">            nn = to[nn][t];</span><br><span class="line">            get(x,nn);</span><br><span class="line">        &#125;</span><br><span class="line">        sett();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;AC;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read(); m = read();</span><br><span class="line">    <span class="keyword">int</span> L,x;</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L=read();</span><br><span class="line">        <span class="keyword">while</span>(L--)x=read(),a[i].push_back(x);</span><br><span class="line">        a[i].push_back(<span class="number">-1</span>);</span><br><span class="line">        L=read();</span><br><span class="line">        <span class="keyword">while</span>(L--)x=read(),a[i].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) AC.Insert(i);</span><br><span class="line">    AC.build_fail ();</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        AC.solve(i);</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans1[i]);</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans2[i]);</span><br><span class="line">        <span class="keyword">if</span> (i != n) <span class="built_in">putchar</span>(<span class="string">' '</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2754&quot; target=
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[HDU-3746] Cyclic Necklace KMP找循环</title>
    <link href="http://yoursite.com/2018/03/08/HDU-3746-Cyclic-Necklace-KMP%E6%89%BE%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2018/03/08/HDU-3746-Cyclic-Necklace-KMP找循环/</id>
    <published>2018-03-08T11:53:54.000Z</published>
    <updated>2018-03-08T12:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://vjudge.net/problem/hdu-3746" target="_blank" rel="noopener">HDU-3746</a></p><p>大意:求出添加尽可能少的字符数量使得原串成为循环串.</p><p>比如<code>abca-&gt;abcabc</code>要2个字符.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>KMP找循环节!<code>fail</code>数组的巧用</p><p>比如说题目中这样的串<code>abca</code>的<code>fail</code>数组为[0,0,0,1].也就是说最后一位为1其他均为0.</p><p>我们根据fail数组的定义就很容易推出答案</p><p>1.如果fail[len]为0,也就是说没有任何的匹配.就是原字符串长度.</p><p>2.如果fail[len]不为0,我们用len-fail[len]得到一个循环节.然后如果这个循环节是len的因子.也就是<strong>恰好</strong>出现了循环.那么不要添加任何的字符,return 0.否则返回该添加的量.也就是循环长度减去存在的残缺循环长度</p><p>具体代码说明一切.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *b,<span class="keyword">int</span> nb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="keyword">sizeof</span>(fail));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[j+<span class="number">1</span>] == b[i]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fail[nb] == <span class="number">0</span>) <span class="keyword">return</span> nb;</span><br><span class="line"><span class="keyword">int</span> t = nb - fail[nb];</span><br><span class="line"><span class="keyword">if</span> (nb % t == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (t-nb%t); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kmp(s,<span class="built_in">strlen</span>(s+<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/hdu-3746&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[NOI-2011|BZOJ-2434] Ahri&#39;s Printer 阿狸的打字机 Fenwick树+AC自动姬</title>
    <link href="http://yoursite.com/2018/03/08/NOI-2011-BZOJ-2434-Ahri-s-Printer-%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA-Fenwick%E6%A0%91-AC%E8%87%AA%E5%8A%A8%E5%A7%AC/"/>
    <id>http://yoursite.com/2018/03/08/NOI-2011-BZOJ-2434-Ahri-s-Printer-阿狸的打字机-Fenwick树-AC自动姬/</id>
    <published>2018-03-08T11:53:12.000Z</published>
    <updated>2018-03-08T12:38:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2434" target="_blank" rel="noopener">BZOJ-2434</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>毒瘤题.</strong></p><p>1.先考虑暴力的做法,对于每一个读进来的匹配串都建立一次AC自动d姬.</p><p><strong>100%爆炸不加辣.似乎只能拿40分.</strong></p><p>2.我们可以考虑出现重复计算的地方.有很大一部分的失配数组其实是没有变化的.但是我们无脑地把它破坏掉再重新建立起来,这部分的损耗很大.考虑优化中间的<code>fail</code>数组,我们在找适配节点的时候是不是只要往上面跳.插入这个节点的父节点就可以啦？做的时候记得大法师一遍.</p><p><strong>这样拿70~80分.</strong></p><p>3.在2的基础上加一个树状数组就行辣.</p><p><strong>100分标算</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,T,l[SIZE],r[SIZE],t[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> last[SIZE],lastq[SIZE],pos[SIZE],ans[SIZE];</span><br><span class="line"><span class="keyword">char</span> ch[SIZE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fail_tree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[SIZE],que[SIZE];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=T;i+=i&amp;-i)t[i]+=val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">int</span> sum=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;-i)sum+=t[i];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;e[++cnt].to=v;e[cnt].next=last[u];last[u]=cnt;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Aho_Corasick</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> fa[SIZE],fail[SIZE],next[SIZE][<span class="number">26</span>],q[SIZE];</span><br><span class="line">Aho_Corasick()&#123;</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">next[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>,id=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'P'</span>)pos[++id]=now;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'B'</span>)now=fa[now];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!next[now][ch[i]-<span class="string">'a'</span>])</span><br><span class="line">&#123;</span><br><span class="line">next[now][ch[i]-<span class="string">'a'</span>]=++cnt;</span><br><span class="line">fa[cnt]=now;</span><br><span class="line">&#125;</span><br><span class="line">now=next[now][ch[i]-<span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildfail</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> head=<span class="number">0</span>,tail=<span class="number">1</span>;</span><br><span class="line">fail[<span class="number">1</span>]=<span class="number">0</span>;q[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(head!=tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> now=q[head];head++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(next[now][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=next[now][i];</span><br><span class="line"><span class="keyword">int</span> k=fail[now];</span><br><span class="line"><span class="keyword">while</span>(!next[k][i])k=fail[k];</span><br><span class="line">fail[v]=next[k][i];</span><br><span class="line">q[tail++]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>,id=<span class="number">0</span>;</span><br><span class="line">add(l[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;ch[i];i++)</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'P'</span>)</span><br><span class="line">&#123;</span><br><span class="line">id++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=lastq[id];x;x=que[x].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t=pos[que[x].to];</span><br><span class="line">ans[x]=query(r[t])-query(l[t]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'B'</span>)add(l[now],<span class="number">-1</span>),now=fa[now];</span><br><span class="line"><span class="keyword">else</span> now=next[now][ch[i]-<span class="string">'a'</span>],add(l[now],<span class="number">1</span>);;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Aho_Corasick;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">l[x]=++T;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=last[x];i;i=e[i].next)</span><br><span class="line">dfs(e[i].to);</span><br><span class="line">r[x]=++T; <span class="comment">//wtf!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">que[z].next = lastq[y];</span><br><span class="line">lastq[y] = z;</span><br><span class="line">que[z].to = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch);</span><br><span class="line">n=<span class="built_in">strlen</span>(ch);</span><br><span class="line">Aho_Corasick.build();</span><br><span class="line">Aho_Corasick.buildfail();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Aho_Corasick.cnt;i++)</span><br><span class="line">insert(Aho_Corasick.fail[i],i);</span><br><span class="line">m=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">addedge(x,y,i);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">Aho_Corasick.solve();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2434&quot; target=
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[NOI-2014] Zoo KMP模拟</title>
    <link href="http://yoursite.com/2018/03/08/NOI-2014-Zoo-KMP%E6%A8%A1%E6%8B%9F/"/>
    <id>http://yoursite.com/2018/03/08/NOI-2014-Zoo-KMP模拟/</id>
    <published>2018-03-08T11:52:10.000Z</published>
    <updated>2018-03-08T12:31:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3670" target="_blank" rel="noopener">BZOJ-3670</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>不考虑题目的限制,只想一般的情况.</p><p>先通过对next数组的观察,不难得到$num(i)=num(fail(i))+1$.</p><p>考虑再维护一个<strong>前缀不与后缀重叠的,带有限制的$num’(i)$, </strong>找一波规律得到</p><script type="math/tex; mode=display">num'(i) = num(fail'(i))+1</script><p>相当于同时维护了两个失配数组了嘛.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> fail[maxn],num1[maxn],num2[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>),k = <span class="number">0</span>,t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &amp;&amp; s[k+<span class="number">1</span>] != s[i]) k = fail[k];</span><br><span class="line">        <span class="keyword">while</span>((t &amp;&amp; s[t+<span class="number">1</span>] != s[i]) || t &gt;= (i&gt;&gt;<span class="number">1</span>)) t = fail[t];</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(s[t+<span class="number">1</span>] == s[i]) num2[i] = num1[++t] + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> num2[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[k+<span class="number">1</span>] == s[i]) fail[i] = ++k,num1[i] = num1[k] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> num1[i] = fail[i] = <span class="number">0</span>; </span><br><span class="line">        ans = (ans * (num2[i]+<span class="number">1</span>)) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,kmp(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=3670&quot; target=
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[CF-578D(Div 1)] LCS AGAIN</title>
    <link href="http://yoursite.com/2018/03/08/CF-578D-Div-1-LCS-AGAIN/"/>
    <id>http://yoursite.com/2018/03/08/CF-578D-Div-1-LCS-AGAIN/</id>
    <published>2018-03-08T11:51:38.000Z</published>
    <updated>2018-03-08T12:51:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://codeforces.com/problemset/problem/578/D" target="_blank" rel="noopener">Codeforces-578D</a></p><p>You are given a string <em>S</em> of length <em>n</em> with each character being one of the first <em>m</em> lowercase English letters.</p><p>Calculate how many different strings <em>T</em> of length <em>n</em> composed from the first <em>m</em> lowercase English letters exist such that the length of LCS (longest common subsequence) between <em>S</em> and <em>T</em> is <em>n</em> - 1.</p><p>Recall that LCS of two strings <em>S</em> and <em>T</em> is the longest string <em>C</em> such that <em>C</em> both in <em>S</em> and <em>T</em> as a subsequence.</p><p>Input</p><p>The first line contains two numbers <em>n</em> and <em>m</em> denoting the length of string <em>S</em> and number of first English lowercase characters forming the character set for strings (1 ≤ <em>n</em> ≤ 100 000, 2 ≤ <em>m</em> ≤ 26).</p><p>The second line contains string <em>S</em>.</p><p>Output</p><p>Print the only line containing the answer.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> last,la_last;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>,tmp = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isalpha</span>(c)) c=getchar();</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">ans = <span class="number">1L</span>L * n * (m<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">char</span> ret = getchar(),last = next(),la_last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = next();</span><br><span class="line"><span class="keyword">if</span> (ch == la_last) tmp++; <span class="keyword">else</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ch != last) ans += n*(m<span class="number">-1</span>)-tmp<span class="number">-1</span>;</span><br><span class="line">la_last = last;</span><br><span class="line">last = ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/578/D&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>KMP/Trie树/Aho-Corasick Automaton 学习笔记</title>
    <link href="http://yoursite.com/2018/03/08/KMP-Trie%E6%A0%91-Aho-Corasick-Automaton-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/08/KMP-Trie树-Aho-Corasick-Automaton-学习笔记/</id>
    <published>2018-03-08T02:35:01.000Z</published>
    <updated>2018-03-08T08:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>继续填坑.<br>本来想把这三个玩意分开来写的,后来发现其实阿次自动姬就可以描述这几个的原理了.<br>那就写一起了.</p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>全称叫做 (Knuth-Morris-Pratt).是能够在线性时间内完成字符串匹配的算法.</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>KMP算法不同于一般的暴力匹配算法的地方在于,KMP算法充分利用了每次匹配后的失配信息,不会每一次都从第一个位置匹配,因此我们先介绍一个玩意叫做适配数组<code>fail[i]</code>.</p><p>对于<code>fail[i]</code>数组的定义:</p><p>模式串中前<code>i</code>个字符作为目标串的<strong>最大前后缀对称长度</strong>.</p><p><del>这什么定义啊看得我头大.</del></p><p>我们以实际栗子来说明.</p><p>假设现在又这样的一个模式串<code>shryshrkrin</code></p><p>根据定义我们推出的<code>fail</code>数组为<code>00001230000</code></p><p>为什么这么定义fail数组呢?在我们匹配字符串的时候，如果之前的匹配失败了，我们直接用fail数组得到下一个合法的前缀即可.而且又可以证明,fail数组和匹配的串没有任何的关系,换言之,得到了fail数组,就是得到了失配信息.与下一个<strong>可能</strong>合法的字符串的位置.</p><p>好我们是不是只要能求出<code>fail</code>数组就可以收工了？</p><p><code>fail</code>的递推方式如下.</p><ol><li>如果 <code>fail[i - 1]</code> 不为 0，且第 <code>i</code> 个字符与第 <code>fail[i - 1] +　１</code> 个字符相同，则 <code>fail[i]</code> 即为 <code>fail[i - 1] + 1</code>；</li><li>如果 <code>fail[i - 1]</code> 为 0，且第 <code>i</code> 个字符与首个字符相同，则 <code>fail[i] = 1</code>，否则 <code>fail[i] = 0</code>；</li><li>如果 <code>fail[i - 1]</code> 不为 0，且第 <code>i</code> 个字符与第 <code>fail[i - 1] +　１</code> 个字符<strong>不同</strong>，则继续对比第 <code>i</code> 个字符与 <code>fail[fail[i - 1]] + 1</code> 个字符，一直向前找直到匹配或者找到了 0。</li></ol><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span> <span class="comment">//find b in a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> na = <span class="built_in">strlen</span>(a+<span class="number">1</span>),nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[j+<span class="number">1</span>] == b[i]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>; i &lt;= na; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != a[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line"><span class="keyword">if</span> (j == nb)</span><br><span class="line">&#123;</span><br><span class="line">res ++;</span><br><span class="line">j = fail[j];</span><br><span class="line">           <span class="comment">// j = 0;</span></span><br><span class="line">           <span class="comment">//如果每个字符只能使用一次,这里的j应该为0</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是板子题.</p><p><a href="http://poj.org/problem?id=3461" target="_blank" rel="noopener">POJ-3461</a></p><p>板子题,求第一个串在第二个中的出现次数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s1[MAXN],s2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> na = <span class="built_in">strlen</span>(a+<span class="number">1</span>), nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[i] == b[j+<span class="number">1</span>]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>; i &lt;= na; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != a[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j ++;</span><br><span class="line"><span class="keyword">if</span> (j == nb)</span><br><span class="line">&#123;</span><br><span class="line">res ++ ;</span><br><span class="line">j = fail[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;          </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kmp(s2,s1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.org/problemnew/show/P3375" target="_blank" rel="noopener">LUOGU-3375</a></p><p>还是板子题,求询问串的所有出现位置与next数组.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s1[MAXN],s2[MAXN];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> na = <span class="built_in">strlen</span>(a+<span class="number">1</span>), nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[i] == b[j+<span class="number">1</span>]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>; i &lt;= na; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != a[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j ++;</span><br><span class="line"><span class="keyword">if</span> (j == nb)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i-j+<span class="number">1</span>);<span class="comment">//这个莫名其妙地自己蒙出来了.</span></span><br><span class="line">j = fail[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (it = v.begin(); it != v.end(); it++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nb; i++) <span class="built_in">cout</span> &lt;&lt; fail[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.clear();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">kmp(s1,s2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>那么再来一道.</del></p><p>算了看习题整理吧。</p><h2 id="Trie树-字典树"><a href="#Trie树-字典树" class="headerlink" title="Trie树(字典树)"></a>Trie树(字典树)</h2><p>其实是个很斯波的东西.</p><p>很好写也很好懂.</p><p><a href="https://vjudge.net/problem/HDU-1251" target="_blank" rel="noopener">HDU-1251</a></p><p>求询问串为模式串前缀的个数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optmize(<span class="meta-string">"0fuck"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">11</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> tot,trie[maxn][<span class="number">26</span>],sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settledown</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;tot=<span class="number">0</span>;<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (trie[rt][x] == <span class="number">0</span>)</span><br><span class="line">trie[rt][x] = ++tot;</span><br><span class="line"></span><br><span class="line">rt = trie[rt][x];</span><br><span class="line">sum[rt]++; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (!trie[rt][x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">rt = trie[rt][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(gets(s))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>]==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">Tr.insert(s,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(gets(s))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tr.find(s,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.org/problem/show?pid=2580" target="_blank" rel="noopener">LUOGU-2580</a></p><p>对字符串查询操作.求询问串作为前缀是否出现,是否第一次出现,是否没出现.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optmize(<span class="meta-string">"0fuck"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> ss[<span class="number">4</span>][<span class="number">10</span>] = &#123;<span class="string">"WRONG"</span>,<span class="string">"REPEAT"</span>,<span class="string">"OK"</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> tot,trie[maxn][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settledown</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">1</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (trie[rt][x] == <span class="number">0</span>)</span><br><span class="line">trie[rt][x] = ++tot;</span><br><span class="line">rt = trie[rt][x]; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (!trie[rt][x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">rt = trie[rt][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (vis[rt]) </span><br><span class="line">&#123;</span><br><span class="line">vis[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Tr.settledown();</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">Tr.insert(s,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,ss[Tr.find(s,<span class="number">1</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Aho-Corasick-Automaton"><a href="#Aho-Corasick-Automaton" class="headerlink" title="Aho-Corasick Automaton"></a>Aho-Corasick Automaton</h2><p><strong>这玩意才是重点</strong></p><p>首先我对于AC自动姬的理解就是</p><script type="math/tex; mode=display">\large AC Automaton=KMP+Trie</script><p>一样的对于模式串建立字典树，在树上算fail数组，我们把这两个玩意放到一起.</p><p>Trie只能做前缀不能匹配吧,加了KMP不就行了么!</p><p>我觉得有张图挺好的。</p><p><img src="/2018/03/08/KMP-Trie树-Aho-Corasick-Automaton-学习笔记/1.jpg" alt="AC"></p><p><strong>这是普通的建立Trie树的过程</strong></p><p><strong>然后我们在上面加上fail数组 / 指针就可以了</strong></p><p><img src="/2018/03/08/KMP-Trie树-Aho-Corasick-Automaton-学习笔记/2.jpg" alt="AC"></p><p>对于AC自动姬,有两种写法</p><p>带指针(我还是偏向于喜欢这么写,感觉挺好理解的)</p><p>可食用对象</p><p><a href="https://www.luogu.org/problemnew/show/P3808" target="_blank" rel="noopener">LUOGU-3808</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> cnt,N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    node *next[<span class="number">26</span>];</span><br><span class="line">    node *fail;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> key[maxn];</span><br><span class="line">node *newnode,*root;</span><br><span class="line"><span class="keyword">char</span> pattern[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next[x] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//newnode=(struct node *)malloc(sizeof(struct node)); </span></span><br><span class="line">            newnode = <span class="keyword">new</span>(node);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) newnode-&gt;next[j] = <span class="number">0</span>;</span><br><span class="line">            newnode-&gt;sum = <span class="number">0</span>;newnode-&gt;fail = <span class="number">0</span>;</span><br><span class="line">            p-&gt;next[x]=newnode;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_fail_pointer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt;q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    node *p;</span><br><span class="line">    node *temp;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">25</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;next[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(temp == root)</span><br><span class="line">                    temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p = temp-&gt;fail;</span><br><span class="line">                    <span class="keyword">while</span>(p)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(p-&gt;next[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            temp-&gt;next[i]-&gt;fail = p-&gt;next[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = p-&gt;fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(temp-&gt;next[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ac_automation</span><span class="params">(<span class="keyword">char</span> *ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p = root;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(ch);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = ch[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(!p-&gt;next[x] &amp;&amp; p != root) p = p-&gt;fail;</span><br><span class="line">        p = p-&gt;next[x];</span><br><span class="line">        <span class="keyword">if</span>(!p) p = root;</span><br><span class="line">        node *temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">if</span>(temp-&gt;sum &gt;= <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               cnt += temp-&gt;sum;</span><br><span class="line">               temp-&gt;sum = <span class="number">-1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">           temp = temp-&gt;fail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//root=(struct node *)malloc(sizeof(struct node));</span></span><br><span class="line">    root = <span class="keyword">new</span>(node); <span class="comment">//好像 new(node)更快!? </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) root-&gt;next[j] = <span class="number">0</span>;</span><br><span class="line">    root-&gt;fail=<span class="number">0</span>;</span><br><span class="line">    root-&gt;sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">    getchar();<span class="comment">//get char of newline </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,key);</span><br><span class="line">        Insert(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,pattern);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    build_fail_pointer();</span><br><span class="line">    ac_automation(pattern);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上拉来一个不用指针的.</p><p><a href="https://www.cnblogs.com/Hero-of-someone/p/7147494.html" target="_blank" rel="noopener">蓝甘冰露</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RG register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[N][<span class="number">55</span>],ss[N*<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n,times[N];<span class="comment">//times记录单词在文本串中出现的次数</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> son[N][<span class="number">26</span>],fail[N],root,L,num[N];</span><br><span class="line">   <span class="keyword">int</span> last[N];<span class="comment">//只是一个优化，有没有都没关系</span></span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">      L=<span class="number">1</span>; root=<span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(son,<span class="number">0</span>,<span class="keyword">sizeof</span>(son));</span><br><span class="line">      <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">      <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">      <span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="keyword">sizeof</span>(fail));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function">il <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="keyword">return</span> c-<span class="string">'a'</span>; &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( <span class="keyword">char</span> s[],<span class="keyword">int</span> v )</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s), cur=root;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> id=idx(s[i]);</span><br><span class="line">         <span class="keyword">if</span>(!son[cur][id])</span><br><span class="line">            son[cur][id]=L++;</span><br><span class="line">         cur=son[cur][id];</span><br><span class="line">      &#125;</span><br><span class="line">      num[cur]=v;   <span class="comment">//记录单词编号</span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> que[N],hd=<span class="number">0</span>,tl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(son[root][i])&#123;</span><br><span class="line">                que[tl++]=son[root][i];</span><br><span class="line">                fail[son[root][i]]=root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> son[root][i]=root;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">while</span>(hd&lt;tl)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur=que[hd++];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> Son=son[cur][i];</span><br><span class="line">                <span class="keyword">if</span>(Son)&#123;</span><br><span class="line">                    <span class="keyword">int</span> f=fail[cur];</span><br><span class="line">                    <span class="keyword">while</span>(f &amp;&amp; !son[f][i]) f=fail[f];</span><br><span class="line">                    fail[Son]=son[f][i];</span><br><span class="line">                                        num[Son]=num[fail[Son]];<span class="comment">//不用last优化时要加上这一句</span></span><br><span class="line">                                        que[tl++]=Son;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> son[cur][i]=son[fail[cur]][i];</span><br><span class="line">            &#125;</span><br><span class="line">                        <span class="comment">//if( num[fail[cur]] )last[cur]=fail[cur];</span></span><br><span class="line">                        <span class="comment">//else last[cur]=last[fail[cur]];</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">( <span class="keyword">char</span> s[] )</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),cur=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> id=idx(s[i]);</span><br><span class="line">            <span class="keyword">while</span>(cur &amp;&amp; !son[cur][id]) cur=fail[cur];</span><br><span class="line">            <span class="keyword">if</span>(son[cur][id])&#123;</span><br><span class="line">                cur=son[cur][id];</span><br><span class="line">                <span class="keyword">int</span> k=cur;</span><br><span class="line">                        <span class="keyword">while</span>(k) times[ num[k] ]++,k=fail[k];</span><br><span class="line">                <span class="comment">/*while(k)&#123;</span></span><br><span class="line"><span class="comment">                            if(num[k]) times[num[k]]++;</span></span><br><span class="line"><span class="comment">                            k=last[k];</span></span><br><span class="line"><span class="comment">                            &#125;*/</span></span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;AC;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n); AC.init();</span><br><span class="line">   <span class="keyword">for</span>(RG <span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">      AC.insert(s[i],i);</span><br><span class="line">   &#125;</span><br><span class="line">   AC.build();</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss); AC.query(ss);</span><br><span class="line">   <span class="keyword">for</span>( RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++ )    <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>,s[i],times[i]);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续填坑.&lt;br&gt;本来想把这三个玩意分开来写的,后来发现其实阿次自动姬就可以描述这几个的原理了.&lt;br&gt;那就写一起了.&lt;/p&gt;
&lt;h2 id=&quot;KMP&quot;&gt;&lt;a href=&quot;#KMP&quot; class=&quot;headerlink&quot; title=&quot;KMP&quot;&gt;&lt;/a&gt;KMP&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="AC自动姬" scheme="http://yoursite.com/categories/AC%E8%87%AA%E5%8A%A8%E5%A7%AC/"/>
    
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>[奇技淫巧]算法竞赛常数优化技巧/代码风格总结</title>
    <link href="http://yoursite.com/2018/03/01/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%B8%B8%E6%95%B0%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/01/奇技淫巧-算法竞赛常数优化技巧-代码风格总结/</id>
    <published>2018-03-01T02:59:35.000Z</published>
    <updated>2018-03-01T03:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>这几天被卡常恶心到的挺多的..所以不得不恶补了一波黑科技的卡常技巧，然后代码风格的问题很久就想写了..</p><p>所以就当做个总结吧。</p><a id="more"></a><h2 id="卡常技巧"><a href="#卡常技巧" class="headerlink" title="卡常技巧"></a>卡常技巧</h2><h4 id="修饰符的运用"><a href="#修饰符的运用" class="headerlink" title="修饰符的运用"></a>修饰符的运用</h4><p>1.多在非递归函数/过程加inline,好像是说这样编译后调用速度加快..</p><p>2.i++比++i慢</p><p>3.算是个玄学的东西叫做register,原理在于把变量存在CPU的寄存器中计算快.</p><p>一般有需要的话可以这么写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RG register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(RG int i=(a);i&lt;=(b);i++)</span></span><br></pre></td></tr></table></figure><p>但是奇怪的是hjq上次帮我调的时候加了RG反而变慢了1s..鬼畜啊..</p><p>4.常数少用#define 多用const/typedef</p><p>5.少用if else 多用三目运算符</p><h4 id="计算优化"><a href="#计算优化" class="headerlink" title="计算优化"></a>计算优化</h4><p>6.循环展开,可以在展开的时候每个写成函数会美观一点.</p><p>7.读入优化（我的标准写法差不多这样↓）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + ch - ‘0’;还是cgc想到的马叉虫写法.</p><p>8.abs自己写.</p><h4 id="函数调用优化"><a href="#函数调用优化" class="headerlink" title="函数调用优化"></a>函数调用优化</h4><p>9.某些不开O2时候的函数/STL慢的要死不如自己实现.</p><p>e.g.</p><p>isdigit(),isalpha(),</p><p>max(),min(),</p><p>queue&lt;&gt;,map&lt;&gt;,priority_queue&lt;&gt;,</p><p>binary_search(),upper/lower_bound().</p><p>etc.</p><h4 id="奇怪的等价"><a href="#奇怪的等价" class="headerlink" title="奇怪的等价"></a>奇怪的等价</h4><p>x<em>10 &lt;=&gt; (x&lt;<3)+(x<<1) x!="y" <=""> x^y<br>x!=-1 &lt;=&gt; ~x<br>x</3)+(x<<1)></em>2 &lt;=&gt; x&lt;<1 x*2+1="" <=""> x&lt;<1|1 2="" x="" <=""> x&gt;&gt;1<br>(x+1)%2 &lt;=&gt; x^1<br>x%2 &lt;=&gt; x&amp;1<br>x%2==0 &lt;=&gt; ~(x&amp;1)</1|1></1></p><h4 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h4><p>被卡到常数的时候碰到重复变量多开一个记录来减少寻址次数.</p><p>比如频繁调用sqrt(x)的时候就可以开个rt记录,频繁调用strlen()的时候如果每次都这么写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++)</span><br></pre></td></tr></table></figure><p>后果是这样的时间复杂度为$O(nL)$，死得不明不白.</p><p>多维数组请把大的放在前面,寻址的时候如果小的在前,在后面的寻址时间大大加长.</p><p>而且开了$O2$后更加的明显,几乎可以快1倍的速度。</p><p><del>上面的差不多已经够用了</del></p><h2 id="语法问题"><a href="#语法问题" class="headerlink" title="语法问题"></a>语法问题</h2><p>下列资料转自<a href="http://blog.csdn.net/qq_33583069/article/details/53086992" target="_blank" rel="noopener">http://blog.csdn.net/qq_33583069/article/details/53086992</a></p><ul><li><p>pow()函数请慎用，低版本有的时候会CE。</p></li><li><p>考场不允许使用<strong>“bits/stdc++.h”</strong>库，并且使用该库变量名可能不能使用<strong>next</strong> （C++库里面有个template是next会CE）</p></li><li><p>请尽力少用黑语法。</p></li><li><p>二分图匹配避免link做变量名（还有个什么变量名Linux也会CE我突然记不到了..<del>有时其实也可以用<strong>“中国式的变量名命名法”</strong>这样不会CE。拼音大法好啊</del> 不推荐这种诡异的风格），Linux环境可能会CE。</p></li><li><p>少用“math.h”|“cmath”库。因为_x,_y,y1,y2,x1,x2,x0,y0,这类命名有时会CE。</p></li><li><p>考场严禁使用带下划线的库函数。eg. __gcd()</p></li><li><p>编程时利用宏可以减少代码量，但是请务必在每个变量里加括号。 eg. <code>#define rep(i,s,t) for(int i=(s);i&lt;=(t);i++)</code></p></li><li><p>循环变量for(int i;…;…;)请不要放到全局上。这种常数不会卡。相反会带来很多隐式的错误</p></li><li><p>如果你不精通指针请少用它。指针的代码很难查错。竞赛里面请避免使用函数指针，多级指针，指针数组这样的语法。</p></li><li><p>如果可以静态实现，请先考虑静态版本的代码。而不是写动态。（<code>malloc()</code> <code>new</code>）</p></li><li><p>引用和指针不是一个东西。这个语法我已经不想解释了。去买本语法书细读。</p></li><li><p>考试少用C++的OOP特性，可以使用<code>STL</code> <code>template&lt;&gt;</code> <code>class</code> <code>namespace</code> 但不推荐使用。</p></li><li><p>请熟悉STL里面的 <code>string</code> <code>queue</code> <code>stack</code> <code>vector</code> <code>set</code> <code>map</code> 后面这些用的少,仅供参考并且在pascal选手消失前应该是不会考的前面这些只是方便才用，但请注意常数！推荐自己实现。 <code>deque</code> <code>multiset</code> <code>multimap</code> <code>bitset</code></p></li><li><p>宏指令少用,<code>#progma</code> 肯定是禁了的，别想手动扩栈。涉及操作编译器和系统的函数都要挂。</p></li><li><p>内嵌汇编也是算作弊处理，毕竟这是算法竞赛，不是信息安全竞赛，也不是编程能力竞赛。</p></li><li><p>别再用了<code>ios::sync_with_stdio(false)</code>作死再写<code>scanf(&quot;%d&quot;,&amp;n)；</code> </p><p>​</p></li></ul><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>个人习惯而已如果有不太好的毒瘤习惯还是指出来吧.</p><h4 id="压行-缩进"><a href="#压行-缩进" class="headerlink" title="压行/缩进"></a>压行/缩进</h4><p>如果函数较短而且已经用烂且炒鸡熟悉选择压行,比如</p><p><code>int gcd(int x,int y){return y==0?x:gcd(y%x,x);}</code></p><p>甚至有的时候还会直接define掉.</p><p>对于其他较长/重要的严格缩进.</p><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><p>适当增加空格.运算符前后必须加空格.<br><code>for (int i = a; i &lt;= b; i++)</code></p><h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><p><code>int main()</code>必须写成<code>int main(int argc, char *argv[])</code></p><p><code>void init()</code>必须写成 <code>void init(void)</code></p><p>多组输入输出的一般格式:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(....) == .. &amp;&amp; .. &amp;&amp; ..)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  solve();</span><br><span class="line">  output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差不多就这样了.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;这几天被卡常恶心到的挺多的..所以不得不恶补了一波黑科技的卡常技巧，然后代码风格的问题很久就想写了..&lt;/p&gt;
&lt;p&gt;所以就当做个总结吧。&lt;/p&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="http://yoursite.com/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="-&quot;奇技淫巧&quot;" scheme="http://yoursite.com/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>洲阁筛学习总结</title>
    <link href="http://yoursite.com/2018/02/28/%E6%B4%B2%E9%98%81%E7%AD%9B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/28/洲阁筛学习总结/</id>
    <published>2018-02-28T10:42:09.000Z</published>
    <updated>2018-02-28T13:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>(不知不觉又给自己挖了个坑.)</p><p>ckr : “我只是在无敌的路上越走越远”</p><h2 id="洲阁筛食用方法"><a href="#洲阁筛食用方法" class="headerlink" title="洲阁筛食用方法"></a>洲阁筛食用方法</h2><h3 id="食用范围"><a href="#食用范围" class="headerlink" title="食用范围"></a>食用范围</h3><p>大部分的情况差不多这样:</p><p>给出一个积性函数$f(x)$满足积性函数的基本性质,$f(1)=1$,如果$gcd(a,b)=1$有$f(ab)=f(a)f(b)$.</p><p>那么根据唯一分解定理,就是$x=\prod _{i=1}^np_i^{k_i}$就可以:</p><script type="math/tex; mode=display">\largef(x)=\prod f(p_i^{k_i})</script><p>$In \space particular,p \space\space is\space a\space prime\space number$，而且$f(p^c)$可以快速求出.</p><p>一般的题目差不多都这样:</p><p>$f(x)$是一个数论函数,要求$\sum_{i=1}^nf(i)$,而且你发现,杜教筛完全不能用卷积简化，你被题目的形式深深卡死！</p><p><del>啊♂</del></p><p>洲阁筛就出现了。</p><h3 id="食用思想"><a href="#食用思想" class="headerlink" title="食用思想"></a>食用思想</h3><p><strong>主要的核心思想在于:分类</strong></p><p><strong>引理：</strong>$n$以内的数,最多只有一个大于$\sqrt{n}$的质因数:</p><p>$Proof:$</p><p>​    假设原命题不成立,即存在有两个大于$\sqrt{n}$的质因数,</p><p>​    那么不妨设这两个质因数是$n_1,n_2$ 于是有$n_1n_2&gt;n$,但这是不可能的！</p><p>​    $\therefore$假设命题不成立，原命题正确.</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(不知不觉又给自己挖了个坑.)&lt;/p&gt;
&lt;p&gt;ckr : “我只是在无敌的路上越走越远”&lt;/p&gt;
&lt;h2 id=&quot;洲阁筛食用方法&quot;&gt;&lt;a href=&quot;#洲阁筛食用方法&quot; class=&quot;headerlink&quot; title=&quot;洲阁筛食用方法&quot;&gt;&lt;/a&gt;洲阁筛食用方法&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="洲阁筛" scheme="http://yoursite.com/categories/%E6%B4%B2%E9%98%81%E7%AD%9B/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mobius反演习题整理</title>
    <link href="http://yoursite.com/2018/02/27/Mobius%E5%8F%8D%E6%BC%94%E4%B9%A0%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/27/Mobius反演习题整理/</id>
    <published>2018-02-27T00:58:28.000Z</published>
    <updated>2018-02-27T12:25:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题单"><a href="#题单" class="headerlink" title="题单"></a>题单</h2><p>（这边的是做过的..）</p><p><strong>题单在这: <a href="https://www.cnblogs.com/darklove/p/7554314.html" target="_blank" rel="noopener">https://www.cnblogs.com/darklove/p/7554314.html</a></strong></p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2440" target="_blank" rel="noopener">BZOJ-2440</a></p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3994" target="_blank" rel="noopener">BZOJ-3994</a>/<a href="https://www.luogu.org/problemnew/show/P3327" target="_blank" rel="noopener">LUOGU-3327</a>双倍经验</p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2154" target="_blank" rel="noopener">BZOJ-2154</a></p><p><a href="http://www.spoj.com/problems/DIVCNT2/" target="_blank" rel="noopener">SPOJ-DIVCNT2</a>(谁来帮我卡个常啊最后的点T飞就差一点点啊啊啊啊啊)</p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2301" target="_blank" rel="noopener">BZOJ-2301</a>/<a href="https://www.luogu.org/problemnew/show/P2522" target="_blank" rel="noopener">LUOGU-2522</a>双倍经验</p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1244" target="_blank" rel="noopener">51Nod-1244</a></p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1239" target="_blank" rel="noopener">51Nod-1239</a></p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3944" target="_blank" rel="noopener">BZOJ-3944</a></p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1237" target="_blank" rel="noopener">51Nod-1237</a></p><p>—-（不定期添加全凭造化）</p><h2 id="奇技淫巧常用公式整理"><a href="#奇技淫巧常用公式整理" class="headerlink" title="奇技淫巧常用公式整理"></a><del>奇技淫巧</del>常用公式整理</h2><h3 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h3><p>狄利克雷卷积定义在<font color="#00ffff">数论函数</font>上</p><p></p><h1>狄利克雷卷积</h1><p></p><p></p><h2>定义</h2><p></p><p></p><p>狄利克雷卷积：<mathjax>$\displaystyle (f  \times g)(n) = \sum_{d|n}f(d)*g(\frac{n}{d})$</mathjax></p><p></p><p></p><p>一个例子：<mathjax>$f(x)=2x,g(x)=3x$</mathjax><br>则<mathjax>$(f \times g)(6)=f(1)g(6)+f(2)g(3)+f(3)g(2)+f(6)g(1)$</mathjax>。<br>往往省略掉<mathjax>$n$</mathjax>。  </p><p></p><p></p><p>狄利克雷卷积定义在<code>数论函数</code>上。  </p><p></p><p><div class="card"><div class="card-main"><div class="card-inner"></div></div></div></p><p></p><p>数论函数： 如果一个函数的定义域为正整数，值域为复数，则称此函数为数论函数。常见的数论函数有欧拉函数<mathjax>$\varphi$</mathjax>和莫比乌斯函数<mathjax>$\mu$</mathjax>。</p><p></p><p></p><p>运算律：</p><ol><li><code>结合律</code>  <mathjax>$(f \times g ) \times h= f \times (g \times h)$</mathjax>。<br></li><li><code>交换律</code>  <mathjax>$f \times g = g \times f$</mathjax>。<br></li><li><code>加法-狄利克雷卷积分配律</code> <mathjax>$f \times (g+h) = f\times g + f \times h$</mathjax>。<br></li><li><code>单位元</code> 单位函数<mathjax>$\epsilon$</mathjax>，使得<mathjax>$f= \epsilon \times f =f \times \epsilon$</mathjax>。<br><br>单位函数的取值：<mathjax>$n=1$</mathjax>时<mathjax>$\epsilon(n)=1$</mathjax>，<mathjax>$n$</mathjax>取其他值时<mathjax>$\epsilon(n)=0$</mathjax>。</li><li><code>逆元</code> 对于任意数论函数<mathjax>$f$</mathjax>，如果<mathjax>$f(1) \not = 0$</mathjax>，则存在<strong>唯一</strong>的逆函数<mathjax>$f^{-1}$</mathjax>，使得 <mathjax>$f \times f^{-1} = \epsilon$</mathjax>：<br><br>对于<mathjax>$n=1$</mathjax>，有：<mathjax>${f^{-1}(1)={\frac {1}{f(1)}}}$</mathjax><br><br>对于<mathjax>$n&gt;1$</mathjax>，有：<mathjax>$ {f^{-1}(n)={\frac {-1}{f(1)}}\displaystyle \sum _{d|n,n\neq d}f({\frac {n}{d}})f^{-1}(d)}$</mathjax>  </li></ol><a id="more"></a><h3 id="特殊函数的奆积"><a href="#特殊函数的奆积" class="headerlink" title="特殊函数的奆积"></a>特殊函数的<del>奆</del>积</h3><p>由:$\sum_{d|n}\varphi(d)=n$再结合狄利克雷卷积的定义:</p><p>$\varphi*1=n$</p><p>根据Mobius反演的式子:</p><p>$F(n)=\sum_{d|n}f(d)$</p><p>写成卷积的形式就是:</p><p>$F = f*1$</p><p>事实上我们甚至可以用狄利克雷卷积的运算法则来证明莫比乌斯反演的正确性</p><script type="math/tex; mode=display">\huge{\because \mu * 1=\epsilon\\\\\therefore f*1=F*\mu*1\\\\\therefore f=F *\mu}</script><p>更有意思的是我们几乎可以不费吹灰之力，利用狄利克雷卷积运算的交换律,由:</p><script type="math/tex; mode=display">\huge f=F*\mu=\mu*F</script><script type="math/tex; mode=display">\huge=>f(n)=\sum_{d|n}\mu(\frac{n}{d})F(d) = \sum_{d|n}\mu(d)F(\frac{n}{d})</script><p>这么快就证完了,,,珂怕.</p><h3 id="数论积性函数线性筛法"><a href="#数论积性函数线性筛法" class="headerlink" title="数论积性函数线性筛法"></a>数论积性函数线性筛法</h3><p>由积性函数的定义,大部分的数论函数如$\mu(x),\varphi(x)$都能在$Euler$线性筛中以$O(n)$的时间得到.</p><p><strong>交出板子</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//phi[i]为欧拉函数,u[i]为莫比乌斯函数,f[i]为约数个数函数,g[i]为最高质因数的次方数 </span></span><br><span class="line">phi[<span class="number">1</span>] = u[<span class="number">1</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">&#123;</span><br><span class="line">prime[++cnt] = i;</span><br><span class="line">u[i] = <span class="number">-1</span>;</span><br><span class="line">f[i] = <span class="number">2</span>;</span><br><span class="line">g[i] = <span class="number">1</span>;</span><br><span class="line">phi[i] = i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt&amp;&amp; i*prime[j] &lt;=maxn; j++)</span><br><span class="line">&#123;</span><br><span class="line">            vis[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]== <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">                u[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">                g[i*prime[j]]=g[i]+<span class="number">1</span>;</span><br><span class="line">                f[i*prime[j]]=f[i]/(g[i]+<span class="number">1</span>)*(g[i]+<span class="number">2</span>);</span><br><span class="line">                phi[i*prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            u[i*prime[j]]=-u[i];</span><br><span class="line">            g[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            f[i*prime[j]]=f[i]*<span class="number">2</span>;</span><br><span class="line">            phi[i*prime[j]] = phi[i] * (prime[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个板子应该够用了不然我就吃<del>ckr</del></p><h3 id="Mobius反演公式"><a href="#Mobius反演公式" class="headerlink" title="Mobius反演公式"></a>Mobius反演公式</h3><script type="math/tex; mode=display">\huge{\sum_{x|n}\mu(x)=[n=1]\\\\\sum_{x|i}f(\frac{i}{x})=\sum_{i=1}^{\lfloor\frac{n}{x}\rfloor}f(i)\\\\\varphi(n)=\sum_{d|n}\mu(d)f(\frac{n}{d})=\sum_{d|n}\frac{\mu(d)n}{d}\\\\\sum_{d|n}\varphi(d)=n\\\\}</script><p>复杂的单题写题解吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题单&quot;&gt;&lt;a href=&quot;#题单&quot; class=&quot;headerlink&quot; title=&quot;题单&quot;&gt;&lt;/a&gt;题单&lt;/h2&gt;&lt;p&gt;（这边的是做过的..）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题单在这: &lt;a href=&quot;https://www.cnblogs.com/darklove/p/7554314.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/darklove/p/7554314.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2440&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-2440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=3994&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-3994&lt;/a&gt;/&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3327&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LUOGU-3327&lt;/a&gt;双倍经验&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2154&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-2154&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.spoj.com/problems/DIVCNT2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SPOJ-DIVCNT2&lt;/a&gt;(谁来帮我卡个常啊最后的点T飞就差一点点啊啊啊啊啊)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-2301&lt;/a&gt;/&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2522&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LUOGU-2522&lt;/a&gt;双倍经验&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1244&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;51Nod-1244&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1239&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;51Nod-1239&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=3944&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-3944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1237&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;51Nod-1237&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;—-（不定期添加全凭造化）&lt;/p&gt;
&lt;h2 id=&quot;奇技淫巧常用公式整理&quot;&gt;&lt;a href=&quot;#奇技淫巧常用公式整理&quot; class=&quot;headerlink&quot; title=&quot;奇技淫巧常用公式整理&quot;&gt;&lt;/a&gt;&lt;del&gt;奇技淫巧&lt;/del&gt;常用公式整理&lt;/h2&gt;&lt;h3 id=&quot;狄利克雷卷积&quot;&gt;&lt;a href=&quot;#狄利克雷卷积&quot; class=&quot;headerlink&quot; title=&quot;狄利克雷卷积&quot;&gt;&lt;/a&gt;狄利克雷卷积&lt;/h3&gt;&lt;p&gt;狄利克雷卷积定义在&lt;font color=&quot;#00ffff&quot;&gt;数论函数&lt;/font&gt;上&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h1&gt;狄利克雷卷积&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;狄利克雷卷积：&lt;mathjax&gt;$\displaystyle (f  \times g)(n) = \sum_{d|n}f(d)*g(\frac{n}{d})$&lt;/mathjax&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个例子：&lt;mathjax&gt;$f(x)=2x,g(x)=3x$&lt;/mathjax&gt;&lt;br&gt;
则&lt;mathjax&gt;$(f \times g)(6)=f(1)g(6)+f(2)g(3)+f(3)g(2)+f(6)g(1)$&lt;/mathjax&gt;。&lt;br&gt;
往往省略掉&lt;mathjax&gt;$n$&lt;/mathjax&gt;。  &lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;狄利克雷卷积定义在&lt;code&gt;数论函数&lt;/code&gt;上。  &lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;card&quot;&gt;&lt;div class=&quot;card-main&quot;&gt;&lt;div class=&quot;card-inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;数论函数： 如果一个函数的定义域为正整数，值域为复数，则称此函数为数论函数。常见的数论函数有欧拉函数&lt;mathjax&gt;$\varphi$&lt;/mathjax&gt;和莫比乌斯函数&lt;mathjax&gt;$\mu$&lt;/mathjax&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;运算律：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;结合律&lt;/code&gt;  &lt;mathjax&gt;$(f \times g ) \times h= f \times (g \times h)$&lt;/mathjax&gt;。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;交换律&lt;/code&gt;  &lt;mathjax&gt;$f \times g = g \times f$&lt;/mathjax&gt;。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;加法-狄利克雷卷积分配律&lt;/code&gt; &lt;mathjax&gt;$f \times (g+h) = f\times g + f \times h$&lt;/mathjax&gt;。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;单位元&lt;/code&gt; 单位函数&lt;mathjax&gt;$\epsilon$&lt;/mathjax&gt;，使得&lt;mathjax&gt;$f= \epsilon \times f =f \times \epsilon$&lt;/mathjax&gt;。&lt;br&gt;&lt;br&gt;单位函数的取值：&lt;mathjax&gt;$n=1$&lt;/mathjax&gt;时&lt;mathjax&gt;$\epsilon(n)=1$&lt;/mathjax&gt;，&lt;mathjax&gt;$n$&lt;/mathjax&gt;取其他值时&lt;mathjax&gt;$\epsilon(n)=0$&lt;/mathjax&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;逆元&lt;/code&gt; 对于任意数论函数&lt;mathjax&gt;$f$&lt;/mathjax&gt;，如果&lt;mathjax&gt;$f(1) \not = 0$&lt;/mathjax&gt;，则存在&lt;strong&gt;唯一&lt;/strong&gt;的逆函数&lt;mathjax&gt;$f^{-1}$&lt;/mathjax&gt;，使得 &lt;mathjax&gt;$f \times f^{-1} = \epsilon$&lt;/mathjax&gt;：&lt;br&gt;&lt;br&gt;对于&lt;mathjax&gt;$n=1$&lt;/mathjax&gt;，有：&lt;mathjax&gt;${f^{-1}(1)={\frac {1}{f(1)}}}$&lt;/mathjax&gt;&lt;br&gt;&lt;br&gt;对于&lt;mathjax&gt;$n&amp;gt;1$&lt;/mathjax&gt;，有：&lt;mathjax&gt;$ {f^{-1}(n)={\frac {-1}{f(1)}}\displaystyle \sum _{d|n,n\neq d}f({\frac {n}{d}})f^{-1}(d)}$&lt;/mathjax&gt;  &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/categories/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
</feed>
