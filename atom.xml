<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>❤ karriganasta&#39;s blog ❤</title>
  
  <subtitle>infinite OI road.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-22T13:23:30.303Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>karriganasta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[UVa-11525] Permutation 树状数组求kth element+康托展开</title>
    <link href="http://yoursite.com/2018/02/22/UVa-11525-Permutation-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%B1%82kth-element-%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
    <id>http://yoursite.com/2018/02/22/UVa-11525-Permutation-树状数组求kth-element-康托展开/</id>
    <published>2018-02-22T11:57:53.000Z</published>
    <updated>2018-02-22T13:23:30.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门: <a href="https://vjudge.net/problem/UVA-11525" target="_blank" rel="noopener">UVa-11525</a><br>题目大意:<br>输出<script type="math/tex">1..n</script>的全部排列字典序大小的第<script type="math/tex">\sum_{i=1}^{k} S_i * (K-i)!</script>个</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>康托展开了解一下</p><script type="math/tex; mode=display">X = a[n]*(n-1)!+a[n-1]*(n-2)!+...+a[1]*0!</script><p>其中a[i]为第<script type="math/tex">i</script>位往右边的数里第几大<br>其实和数位dp一个道理。<br>具体的栗子（摘自cnblog）</p><script type="math/tex; mode=display">如我想知道321是{1,2,3}中第几个大的数可以这样考虑 ：\\\\\　　第一位是3，当第一位的数小于3时，\\\\　　那排列数小于321 如 123、 213 ，小于3的数有1、2 。\\\\　　所以有2*2!个。再看小于第二位2的：小于2的数只有一个就是1 ，\\\\所以有1*1!=1 所以小于321的{1,2,3}排列数有2*2!+1*1!=5个 。\\\\所以321是第6个大的数。 \\\\2*2!+1*1!是康托展开。</script><p>然后是树状数组（Fenwick树）求第k小</p><p>这其实是一个反向枚举构造+二分的过程</p><p>具体看代码实现吧。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">int</span> c[maxn], K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(pos&lt;=K)&#123;</span><br><span class="line">c[pos]++;</span><br><span class="line">pos+=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=c[pos];</span><br><span class="line">pos-=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BS</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=K+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(mid-query(mid)&gt;=num) r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">int</span> k=BS(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%c"</span>,k,(i==K<span class="number">-1</span>)?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">add(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门: &lt;a href=&quot;https://vjudge.net/problem/UVA-11525&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[UVa-12299] RMQ with Shifts 线段树单点修改区间查询</title>
    <link href="http://yoursite.com/2018/02/22/UVa-12299-RMQ-with-Shifts-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/02/22/UVa-12299-RMQ-with-Shifts-线段树单点修改区间查询/</id>
    <published>2018-02-22T11:56:56.000Z</published>
    <updated>2018-02-22T12:25:58.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门: <a href="https://vjudge.net/problem/UVA-12299" target="_blank" rel="noopener">UVa-12299</a></p><p>题目大意:在传统的RMQ问题上多附加一个<script type="math/tex">shift(x_1,x_2,...,x_n)</script>的操作,使得这些操作的数列轮换一位。</p><p>给出的规模是<script type="math/tex">n \leq 100000,q \leq 250000</script></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>看传送门吧.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>但是,,输入中操作行的字符串长度小于等于30.</p><p>也就是说shift操作里的元素不会很多。</p><p>那么就暴力地上吧.</p><p>于是第一次写出来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> req;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;r,w;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">if</span>(ch==<span class="string">'\n'</span>)&#123;x=<span class="number">-2333333</span>;<span class="keyword">return</span>;&#125;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span> (ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>],minv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;minv[rt] = min(minv[lc],minv[rc]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(lc,l,m);</span><br><span class="line">build(rc,m+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span> <span class="comment">// LR修改区间 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt;= m) update(p,v,L,m,lc);</span><br><span class="line"><span class="keyword">else</span> update(p,v,m+<span class="number">1</span>,R,rc);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = INT_MAX,m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> minv[rt];</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= m) ans = min(ans,query(ql,qr,l,m,lc));</span><br><span class="line"><span class="keyword">if</span> (qr &gt; m) ans = min(ans,query(ql,qr,m+<span class="number">1</span>,r,rc));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n); read(q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">req = <span class="string">'6'</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(b,a,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isalpha</span>(req)) req = getchar();</span><br><span class="line"><span class="keyword">if</span> (req == <span class="string">'q'</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tree.query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (req == <span class="string">'s'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">r.clear();</span><br><span class="line">read(x);</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">-2333333</span>)</span><br><span class="line">&#123;</span><br><span class="line">r.push_back(x);</span><br><span class="line">read(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("Elements: ");</span></span><br><span class="line"><span class="comment">//printf("%d ",r[i]);</span></span><br><span class="line"><span class="comment">//puts("");</span></span><br><span class="line"><span class="keyword">if</span> (i == r.size()<span class="number">-1</span>) a[r[i]] = b[r[<span class="number">0</span>]],Tree.update(r[i],b[r[<span class="number">0</span>]],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> a[r[i]] = b[r[i+<span class="number">1</span>]],Tree.update(r[i],b[r[i+<span class="number">1</span>]],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间字符串处理卡了好久哦.不得不在快读中加判断换行返回-2333333来皮一波.</p><p>但是T飞了..</p><p><img src="/2018/02/22/UVa-12299-RMQ-with-Shifts-线段树单点修改区间查询/1.jpg" alt="Markdown"></p><p>检查了半天没觉得哪里不对劲,然后尝试着把vector改成了定长数组,把memcpy去掉.</p><p>就过了..</p><p>实践证明,memcpy确实慢的可以.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> req;</span><br><span class="line"><span class="keyword">int</span> r[<span class="number">41</span>],w[<span class="number">41</span>],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">if</span>(ch==<span class="string">'\n'</span>)&#123;x=<span class="number">-2333333</span>;<span class="keyword">return</span>;&#125;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span> (ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>],minv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;minv[rt] = min(minv[lc],minv[rc]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(lc,l,m);</span><br><span class="line">build(rc,m+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span> <span class="comment">// LR修改区间 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt;= m) update(p,v,L,m,lc);</span><br><span class="line"><span class="keyword">else</span> update(p,v,m+<span class="number">1</span>,R,rc);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = INT_MAX,m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> minv[rt];</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= m) ans = min(ans,query(ql,qr,l,m,lc));</span><br><span class="line"><span class="keyword">if</span> (qr &gt; m) ans = min(ans,query(ql,qr,m+<span class="number">1</span>,r,rc));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n); read(q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">req = <span class="string">'6'</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isalpha</span>(req)) req = getchar();</span><br><span class="line"><span class="keyword">if</span> (req == <span class="string">'q'</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tree.query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (req == <span class="string">'s'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">read(x);</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">-2333333</span>)</span><br><span class="line">&#123;</span><br><span class="line">r[++cnt] = x;</span><br><span class="line">w[cnt] = a[x];</span><br><span class="line">read(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt<span class="number">-1</span>; i++)</span><br><span class="line">a[r[i]] = w[i+<span class="number">1</span>],Tree.update(r[i],w[i+<span class="number">1</span>],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">a[r[cnt]] = w[<span class="number">1</span>],Tree.update(r[cnt],w[<span class="number">1</span>],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门: &lt;a href=&quot;https://vjudge.net/problem/UVA-12299&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-5902] Movie Collection Fenwick树</title>
    <link href="http://yoursite.com/2018/02/22/LA-5902-Movie-Collection-Fenwick%E6%A0%91/"/>
    <id>http://yoursite.com/2018/02/22/LA-5902-Movie-Collection-Fenwick树/</id>
    <published>2018-02-22T11:54:26.000Z</published>
    <updated>2018-02-22T12:42:25.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-5902" target="_blank" rel="noopener">LA-5902</a></p><p>题目大意:有<script type="math/tex">n</script>个物品从上到下放置,并且标号<script type="math/tex">1..n</script>,有<script type="math/tex">n</script>次查询,每次查询标号为<script type="math/tex">x</script>的物品现在的位置（<script type="math/tex">0..n</script>,即该物品上面有多少个物品）,同时将该物品取出放到第<script type="math/tex">0</script>号位置。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>还是不难想到的,将1~n件物品重新编号,1~n标为n~1,每次拿出一件物品x,再将其重新编号,如果是第一次拿出就标为n+1…..依次递增,然后将之前的编号删掉,插入新的编号即可，用一个树状数组维护</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2</span>*<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"><span class="keyword">int</span> pos[maxn],c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;ret+=c[x];x-=lowbit(x);&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=maxn)</span><br><span class="line">&#123;</span><br><span class="line">c[x]+=d;</span><br><span class="line">x+=lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">pos[i] = n + <span class="number">1</span> - i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)</span><br><span class="line">c[i] = lowbit(i);</span><br><span class="line"><span class="keyword">int</span> t = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">read(id);</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,n-sum(pos[id]));</span><br><span class="line">add(pos[id],<span class="number">-1</span>);</span><br><span class="line">pos[id] = ++t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看Rank榜是第一.</p><p>窃喜</p><p><img src="/2018/02/22/LA-5902-Movie-Collection-Fenwick树/1.jpg" alt="Markdown"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVALive-5902&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-4108] Skyline 线段树/树状数组+二分</title>
    <link href="http://yoursite.com/2018/02/22/LA-4108-Skyline-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2018/02/22/LA-4108-Skyline-线段树-树状数组-二分/</id>
    <published>2018-02-22T11:53:14.000Z</published>
    <updated>2018-02-22T12:58:26.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门: <a href="https://vjudge.net/problem/UVALive-4108" target="_blank" rel="noopener">LA-4108</a></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>1<br>3<br>5 11 3<br>1 10 1<br>3 13 2<br>0<br>Sample Output<br>14</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>线段树区间更新维护最大值即可</p><p>裸题啊</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>],maxv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">maxv[rt] = max(maxv[lc],maxv[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lazy[lc] = max(lazy[lc],lazy[rt]);</span><br><span class="line">lazy[rc] = max(lazy[rc],lazy[rt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lazy[rt] &gt; v) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r &amp;&amp; v &gt;= maxv[rt])</span><br><span class="line">&#123;</span><br><span class="line">ans += (r-l+<span class="number">1</span>);</span><br><span class="line">maxv[rt] = v;</span><br><span class="line">lazy[rt] = v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> ;</span><br><span class="line">Pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= m) Update(lc,l,m,x,y,v);</span><br><span class="line"><span class="keyword">if</span> (y &gt; m) Update(rc,m+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,f,g,h;</span><br><span class="line">read(t);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(Tree.lazy,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.lazy));</span><br><span class="line"><span class="built_in">memset</span>(Tree.maxv,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.maxv));</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">read(f),read(g),read(h);</span><br><span class="line">Tree.Update(<span class="number">1</span>,<span class="number">1</span>,maxn,f,g<span class="number">-1</span>,h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门: &lt;a href=&quot;https://vjudge.net/problem/UVALive-4108&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-2191] Potentiometers 树状数组</title>
    <link href="http://yoursite.com/2018/02/22/LA-2191-Potentiometers-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/02/22/LA-2191-Potentiometers-树状数组/</id>
    <published>2018-02-22T11:52:18.000Z</published>
    <updated>2018-02-22T13:23:22.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-2191" target="_blank" rel="noopener">LA-2191</a></p><p>题目大意:基本树状数组的操作，把add(x,d)改成了S(x,d)，把第x位上的变成d.</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>3<br>100<br>100<br>100<br>M 1 1<br>M 1 3<br>S 2 200<br>M 1 2<br>S 3 0<br>M 2 3<br>END<br>10<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>M 1 10<br>END<br>0<br>Sample Output<br>Case 1:<br>100<br>300<br>300<br>200<br>Case 2:<br>55</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">200000</span>+<span class="number">10</span>;  </span><br><span class="line"><span class="keyword">int</span> a[MAXN],c[MAXN],n;  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)  </span><br><span class="line">    &#123;  </span><br><span class="line">        c[x]+=d;  </span><br><span class="line">        x+=lowbit(x);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> x=R;  </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        ans+=c[x];  </span><br><span class="line">        x-=lowbit(x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> ans;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(kase!=<span class="number">1</span>)  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,kase++);  </span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);  </span><br><span class="line">                add(i,a[i]);  </span><br><span class="line">        &#125;                 </span><br><span class="line">        <span class="keyword">char</span> action[<span class="number">10</span>];          </span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,action),<span class="built_in">strcmp</span>(action,<span class="string">"END"</span>))  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> x,y;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);  </span><br><span class="line">            <span class="keyword">if</span>(action[<span class="number">0</span>]==<span class="string">'S'</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                    add(x,y-a[x]);  </span><br><span class="line">                    a[x]=y;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">            &#123; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum(x,y)-sum(<span class="number">1</span>,x<span class="number">-1</span>));&#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVALive-2191&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-4730] Kingdom 并查集+线段树</title>
    <link href="http://yoursite.com/2018/02/22/LA-4730-Kingdom-%E5%B9%B6%E6%9F%A5%E9%9B%86-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://yoursite.com/2018/02/22/LA-4730-Kingdom-并查集-线段树/</id>
    <published>2018-02-22T11:51:44.000Z</published>
    <updated>2018-02-22T13:23:25.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-4730" target="_blank" rel="noopener">LA-4730</a></p><p>题目大意：</p><p>There were N cities in an ancient kingdom. In the beginning of the  kingdom, all cities were isolated. Kings ordered their subjects to  construct roads connecting cities. A lot of roads were built with time.  Every road was always constructed along the line segment between two  cities. All cities are partitioned into disjoint components of cities  by road-connectivity. A connected component of cities was called a  state. A state consists of cities and roads connecting them.</p><p>A historical record tells a time sequence of road constructions in  order. A road connecting two cities<em>A</em> and <em>B</em> doesn’t intersect with  other roads at a point except for<em>A</em> and <em>B</em>. Before construction,<em>A</em>  and <em>B</em> may have belonged to the same state or different states. After  construction,<em>A</em> and <em>B</em> would belong to a same state, i.e., two states  would merge into a state if needed.</p><p>Prof. Kim, a historian, is concerned about the following question: How  many states does a horizontal line (corresponding to the latitude of a  specific place) pass by at a moment of the past? The figure below shows  an example of a configuration of roads at some moment. A circle  represents a city and a line segment represents a road between two  cities. There are 3 states. A line with y = 4.5 passes by two states  with total 8 cities and a line with y = 6.5 passes by one state with 5  cities.</p><p>（逃</p><p>正经：</p><p>平面上有n个城市，初始时城市之间没有任何双向道路相连。你的任务是一次执行以下指令。</p><p>road A B：在城市A和B之间连一条双向道路，保证这条道路不和其他道路在非端点处相交。</p><p>line C：询问一条Y=C的水平线和多少个州相交，以及这些州一共包含多少座城市。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到包含多少城市想到并查集。这里如果单个枚举的话很费时间会T飞</p><p>我们就用线段树来维护区间内的城市数量和州的数量。</p><p>发现其实这题与x轴上的大小值没有任何关系。</p><p>只要考虑y轴坐标的上下最值即可</p><p>注意分类讨论。</p><p>以及并查集的时候别忘记 路径压缩</p><p>线段树update别写炸</p><p>就A了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>3617啊珂怕</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="keyword">int</span> miny[maxn],maxy[maxn],n,m,fa[maxn],d[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = getf(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> sum1[maxn&lt;&lt;<span class="number">2</span>],sum2[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> lazy1[maxn&lt;&lt;<span class="number">2</span>],lazy2[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum1[rt] = sum1[rc] + sum1[lc];</span><br><span class="line">sum2[rt] = sum2[rc] + sum2[lc];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lazy1[rt])</span><br><span class="line">&#123;</span><br><span class="line">sum1[lc] += lazy1[rt];</span><br><span class="line">sum2[rc] += lazy1[rt];</span><br><span class="line">lazy1[lc] += lazy1[rt];</span><br><span class="line">lazy1[rc] += lazy1[rt];</span><br><span class="line">lazy1[rt] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (lazy2[rt])</span><br><span class="line">&#123;</span><br><span class="line">sum1[lc] += lazy2[rt];</span><br><span class="line">sum2[rc] += lazy2[rt];</span><br><span class="line">lazy2[lc] += lazy2[rt];</span><br><span class="line">lazy2[rc] += lazy2[rt];</span><br><span class="line">lazy2[rt] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!f)</span><br><span class="line">&#123;</span><br><span class="line">lazy1[rt] += x;</span><br><span class="line">sum1[rt] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lazy2[rt] += x;</span><br><span class="line">sum2[rt] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line">Pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= m) update(lc,l,m,L,R,x,f);</span><br><span class="line"><span class="keyword">if</span> (r &gt; m) update(rc,m+<span class="number">1</span>,r,L,R,x,f);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> rt;</span><br><span class="line">Pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (c &lt;= m) <span class="keyword">return</span> query(lc,l,m,c);</span><br><span class="line"><span class="keyword">else</span> Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">set_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(miny,<span class="number">0</span>,<span class="keyword">sizeof</span>(miny));</span><br><span class="line"><span class="built_in">memset</span>(maxy,<span class="number">0</span>,<span class="keyword">sizeof</span>(maxy));</span><br><span class="line"><span class="built_in">memset</span>(Tree.lazy1,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.lazy1));</span><br><span class="line"><span class="built_in">memset</span>(Tree.sum1,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.sum1));</span><br><span class="line"><span class="built_in">memset</span>(Tree.lazy2,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.lazy2));</span><br><span class="line"><span class="built_in">memset</span>(Tree.sum2,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.sum2));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fa[i] = i;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,Lim;</span><br><span class="line"><span class="keyword">int</span> x,y;<span class="keyword">double</span> c;</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">13</span>];</span><br><span class="line">read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">Lim = <span class="number">-0x7fffffff</span>;</span><br><span class="line">read(n);</span><br><span class="line">set_init(); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t1,t2;</span><br><span class="line">read(t1),read(t2);</span><br><span class="line">miny[i] = maxy[i] = t2;</span><br><span class="line">Lim = max(Lim,t2);</span><br><span class="line">&#125;</span><br><span class="line">Lim++;</span><br><span class="line">read(m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>] == <span class="string">'r'</span>)</span><br><span class="line">&#123;</span><br><span class="line">read(x);read(y);</span><br><span class="line"><span class="keyword">int</span> px = getf(x),py = getf(y);</span><br><span class="line"><span class="keyword">if</span>(px == py) ;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maxy[px] &gt; maxy[py])</span><br><span class="line">swap(px,py);</span><br><span class="line"><span class="keyword">if</span> (miny[py] &gt; maxy[px]) &#123;</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, miny[py], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, miny[py], d[px] + d[py], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[px] + <span class="number">1</span>, maxy[px], d[py], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[py] + <span class="number">1</span>, maxy[py], d[px], <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (miny[px] &gt; miny[py]) &#123;</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[px] + <span class="number">1</span>, maxy[px], <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[py] + <span class="number">1</span>, miny[px], d[px], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, maxy[py], d[px], <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[py] + <span class="number">1</span>, maxy[px], <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[px] + <span class="number">1</span>, miny[py], d[py], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, maxy[py], d[px], <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    fa[px] = py;</span><br><span class="line">                    d[py] += d[px];</span><br><span class="line">                    miny[py] = min(miny[py], miny[px]);</span><br><span class="line">                    maxy[py] = max(maxy[py], maxy[px]);</span><br><span class="line">                &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;c);</span><br><span class="line"><span class="keyword">int</span> k = Tree.query(<span class="number">1</span>,<span class="number">1</span>,Lim,(<span class="keyword">int</span>)(c+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,Tree.sum1[k],Tree.sum2[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVALive-4730&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>区间信息的维护和查询学习笔记</title>
    <link href="http://yoursite.com/2018/02/18/%E5%8C%BA%E9%97%B4%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BB%B4%E6%8A%A4%E5%92%8C%E6%9F%A5%E8%AF%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/18/区间信息的维护和查询学习笔记/</id>
    <published>2018-02-18T10:53:09.000Z</published>
    <updated>2018-02-19T14:34:08.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉索引树Binary-Index-Tree（树状数组）"><a href="#二叉索引树Binary-Index-Tree（树状数组）" class="headerlink" title="二叉索引树Binary Index Tree（树状数组）"></a>二叉索引树Binary Index Tree（树状数组）</h2><p>动态的连续和查询问题,有n个元素的数组<br>设计一个数据结构,支持以下两种操作:<br>Add(x,d) 让A[x]增加d<br>Query(L,R) 计算A[L]+..+A[R].</p><p>首先介绍一个玩意叫做lowbit(x)</p><p>对于正整数x我们定义它的二进制最右边的1的值为lowbit(x)<br>在讲BIT之前，我们来先了解一个函数：对于任意正整数x，我们定义lowbit(x)为x的二进制中最右边的1所对应的值，比如，5的二进制是101，那么lowbit(5)= 1；4的二进制是100，那么lowbit(4) = 4；这里用到的是按位运算，请读者自己去查阅关于这点的资料。但为什么呢？计算机里面的整数采用补码表示，-x实际上是x在二进制中按位取反，末位+1后的结果，二者按位取“与”之后，前面全部变成0，之后的lowbit保持不变。</p><p>简单的两个操作如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],C[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">ret += C[x];</span><br><span class="line">x -= lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line">C[x] += d;</span><br><span class="line">x += lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> (sum(r)-sum(l<span class="number">-1</span>));&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">a[i] = x;</span><br><span class="line">add(i,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要是add和sum这两个操作<br>可以用蓝书上两张图记忆</p><p><img src="/2018/02/18/区间信息的维护和查询学习笔记/1.jpg" alt="Markdown"></p><h2 id="LA-4329-Ping-Pong"><a href="#LA-4329-Ping-Pong" class="headerlink" title="LA-4329 Ping Pong"></a>LA-4329 Ping Pong</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-4329" target="_blank" rel="noopener">LA-4329</a></p><p>题目大意:<br>给定一个n个元素的数组，每个元素都有位置和实力两个权值，求三元组(al,ar,ap)的个数,其中要求无论是位置还是实力值都要满足l&lt;p&lt;r.</p><p>思路:加法原理，我们只要求出在第i个人当裁判的时候在前后比a[i]小或是比a[i]大的个数，就可以用乘法原理和加法原理计算了。<br>所以问题转化为求这个比a[i]小的c[i]和比a[i]大的d[i]即可.要求动态，这样就可以套上树状数组了。<br>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,a[maxn],C[maxn],D[maxn],bit[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x&amp;-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">ret += bit[x];</span><br><span class="line">x -= lowbit(x);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x &lt;= <span class="number">1e5</span>+<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">bit[x] += d;</span><br><span class="line">x += lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(bit,<span class="number">0</span>,<span class="keyword">sizeof</span>(bit));</span><br><span class="line"><span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="built_in">memset</span>(D,<span class="number">0</span>,<span class="keyword">sizeof</span>(D));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">add(a[i],<span class="number">1</span>);</span><br><span class="line">C[i] = sum(a[i]<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(bit,<span class="number">0</span>,<span class="keyword">sizeof</span>(bit));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">add(a[i],<span class="number">1</span>);</span><br><span class="line">D[i] = sum(a[i]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">ans+= C[i] * (n-i-D[i]) + D[i] * (i<span class="number">-1</span>-C[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RMQ问题"><a href="#RMQ问题" class="headerlink" title="RMQ问题"></a>RMQ问题</h2><p>RMQ,即Range Minimum Query,要求给出一个n个元素的数值,能够查询出区间范围内的元素最小值</p><h3 id="ST-Sparse-Table-表"><a href="#ST-Sparse-Table-表" class="headerlink" title="ST(Sparse Table)表"></a>ST(Sparse Table)表</h3><p>O(nlogn) ~ O(1)<br>利用递推的思想,令d(i,j)表示从i开始,长度为2^j的一段元素中的最小值,那么有这样的递推式<br>d(i,j)= min(d(i,j-1),d(i+2^(j-1),j-1));<br>不难写出这样的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RMQ问题 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn][<span class="number">100</span>]; <span class="comment">// d[maxn][maxlog(n)];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">d[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span>&lt;&lt;j) - <span class="number">1</span> &lt;= n; i++) <span class="comment">//可以从第0位置开始</span></span><br><span class="line">d[i][j] = min(d[i][j<span class="number">-1</span>],d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ_query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>)) &lt;= r-l+<span class="number">1</span>) k++;</span><br><span class="line"><span class="keyword">return</span> min(d[l][k],d[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,t,q,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">RMQ_init(a,n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,RMQ_query(l,r)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="笛卡尔树-LCA-±RMQ"><a href="#笛卡尔树-LCA-±RMQ" class="headerlink" title="笛卡尔树 + LCA + ±RMQ"></a>笛卡尔树 + LCA + ±RMQ</h3><p>O(n) ~ O(1)<br>这是个巨复杂的方法<br>很难写对 挂个链接就跑<br><a href="http://blog.csdn.net/john159151/article/details/19411523" target="_blank" rel="noopener">http://blog.csdn.net/john159151/article/details/19411523</a></p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>假设有编号从1到n的n个点，每个点都存了一些信息，用[L,R]表示下标从L到R的这些点。<br>线段树的用处就是，对编号连续的一些点进行修改或者统计操作，修改和统计的复杂度都是O(log2(n)).</p><p>线段树的原理，就是，将[1,n]分解成若干特定的子区间(数量不超过4 * n),然后，将每个区间[L,R]都分解为少量特定的子区间，通过对这些少量子区间的修改或者统计，来实现快速对[L,R]的修改或者统计。</p><p>所以满足用线段树解决的题目必须要能够符合区间加法的原则,保证分成的子区间L,R能够得到正确的统计结果，换言之，要能够满足子区间答案之和为总区间答案的原则。</p><p>符合区间加法的例子：<br>数字之和——总数字之和 = 左区间数字之和 + 右区间数字之和<br>最大公因数(GCD)——总GCD = gcd( 左区间GCD , 右区间GCD );<br>最大值——总最大值=max(左区间最大值，右区间最大值)</p><p>不符合区间加法的例子：<br>众数——只知道左右区间的众数，没法求总区间的众数<br>01序列的最长连续零——只知道左右区间的最长连续零，没法知道总的最长连续零</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>线段树本质上是维护下标为1,2,..,n的n个按顺序排列的数的信息，所以，其实是“点树”，是维护n的点的信息.    线段树是将每个区间[L,R]分解成[L,M]和[M+1,R] (其中M=(L+R)/2 这里的除法是整数除法，即对结果下取整)直到 L==R 为止。 开始时是区间[1,n] ,通过递归来逐步分解，假设根的高度为1的话，树的最大高度为</p><script type="math/tex; mode=display">\log_2(n-1)+2</script><p>线段树对于每个n的分解是唯一的，所以n相同的线段树结构相同，这也是实现可持久化线段树的基础。<br>关于lazy标记思想:<br>线段树的区间修改也是将区间分成子区间，但是要加一个标记，称作懒惰标记。<br>标记的含义：<br>本节点的统计信息已经根据标记更新过了，但是本节点的子节点仍需要进行更新。即，如果要给一个区间的所有值都加上1，那么，实际上并没有给这个区间的所有值都加上1，而是打个标记，记下来，这个节点所包含的区间需要加1.打上标记后，要根据标记更新本节点的统计信息，比如，如果本节点维护的是区间和，而本节点包含5个数，那么，打上+1的标记之后，要给本节点维护的和+5。这是向下延迟修改，但是向上显示的信息是修改以后的信息，所以查询的时候可以得到正确的结果。有的标记之间会相互影响，所以比较简单的做法是，每递归到一个区间，首先下推标记（若本节点有标记，就下推标记），然后再打上新的标记，这样仍然每个区间操作的复杂度是O(log2(n))。<br>标记有相对标记和绝对标记之分：<br>相对标记是将区间的所有数+a之类的操作，标记之间可以共存，跟打标记的顺序无关（跟顺序无关才是重点）。<br>所以，可以在区间修改的时候不下推标记，留到查询的时候再下推。<br>注意：如果区间修改时不下推标记，那么PushUp函数中，必须考虑本节点的标记。而如果所有操作都下推标记，那么PushUp函数可以不考虑本节点的标记，因为本节点的标记一定已经被下推了（也就是对本节点无效了）<br>绝对标记是将区间的所有数变成a之类的操作，打标记的顺序直接影响结果，所以这种标记在区间修改的时候必须下推旧标记，不然会出错。<br>注意，有多个标记的时候，标记下推的顺序也很重要，错误的下推顺序可能会导致错误。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在线段树中 我们可以采用数组构造完全二叉树的方式，使得如果根节点为rt，左儿子就为2 <em> rt,右儿子就为2 </em> rt+1.</p><p>但是可以装个bi这么写<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br></pre></td></tr></table></figure></p><h4 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h4><p>下面以codevs1080的单点修改求区间和的例子演示具体写法<br>传送门:<a href="http://codevs.cn/problem/1080/" target="_blank" rel="noopener">Codevs-1080</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;sum[rt] = sum[lc]+sum[rc];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lazy[rt])</span><br><span class="line">&#123;</span><br><span class="line">lazy[lc]+=lazy[rt];</span><br><span class="line">lazy[rc]+=lazy[rt];</span><br><span class="line">sum[lc]+=lazy[rt]*ln;</span><br><span class="line">sum[rc]+=lazy[rt]*rn;</span><br><span class="line">lazy[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">sum[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(l,mid,lc);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rc);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> q,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span><span class="comment">//A[q] += v;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">sum[rt] += v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (q &lt;= mid) update(q,v,l,mid,lc);</span><br><span class="line"><span class="keyword">else</span> update(q,v,mid+<span class="number">1</span>,r,rc);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> sum[rt];</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= mid) ans += query(L,R,l,mid,lc);</span><br><span class="line"><span class="keyword">if</span> (R &gt; mid) ans += query(L,R,mid+<span class="number">1</span>,r,rc);</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">Tree.update(x,y,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tree.query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一遍就过了真是神奇</p><h4 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h4><p>大致格式差不多长这个样子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line">修改点p的状态至它应该成为的状态</span><br><span class="line">p上附加上一个能够影响它整个子树的tag</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p上面有tag)</span><br><span class="line">&#123;</span><br><span class="line">将p的两个儿子调整至它们应该成为的状态</span><br><span class="line">清除p上的tag</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">Change(p的左儿子, l, m, L, R);</span><br><span class="line"><span class="keyword">if</span> (R &gt; m)</span><br><span class="line">Change(p的右儿子, m + <span class="number">1</span>, r, L, R);</span><br><span class="line">p的状态 = 它左右两个儿子的合并</span><br><span class="line">&#125;</span><br><span class="line">node Query(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line"><span class="keyword">return</span> p的状态</span><br><span class="line"><span class="keyword">if</span> (p上面有tag)</span><br><span class="line">&#123;</span><br><span class="line">将p的两个儿子调整至它们应该成为的状态</span><br><span class="line">清除p上的tag</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (R &lt;= m)</span><br><span class="line"><span class="keyword">return</span> Query(p的左儿子, l, m, L, R);</span><br><span class="line"><span class="keyword">if</span> (L &gt; m)</span><br><span class="line"><span class="keyword">return</span> Query(p的右儿子, m + <span class="number">1</span>, r, L, R);</span><br><span class="line"><span class="keyword">return</span> Query(p的左儿子, l, m, L, R) 和 Query(p的右儿子, m + <span class="number">1</span>, r, L, R) 的结果的合并</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个玩意撸了好久啊。蓝书问题3.2.4(2)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn];</span><br><span class="line"><span class="keyword">int</span> _sum,_min = INT_MAX,_max = -INT_MAX;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> minv[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn&lt;&lt;<span class="number">2</span>],maxv[maxn&lt;&lt;<span class="number">2</span>],sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[rt] = sum[lc]+sum[rc];</span><br><span class="line">minv[rt] = min(minv[lc],minv[rc]);</span><br><span class="line">maxv[rt] = max(maxv[lc],maxv[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lazy[rt])</span><br><span class="line">&#123;</span><br><span class="line">lazy[lc] += lazy[rt];</span><br><span class="line">lazy[rc] += lazy[rt];</span><br><span class="line">lazy[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Maintain</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[rt] = maxv[rt] = minv[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (r &gt; l)</span><br><span class="line">&#123;</span><br><span class="line">sum[rt] = sum[lc] + sum[rc];</span><br><span class="line">minv[rt] = min(minv[lc],minv[rc]);</span><br><span class="line">maxv[rt] = max(maxv[lc],maxv[rc]);</span><br><span class="line">&#125;</span><br><span class="line">minv[rt] += lazy[rt]; maxv[rt] += lazy[rt]; sum[rt] += lazy[rt] * (r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = a[l];</span><br><span class="line">maxv[rt] = a[l];</span><br><span class="line">sum[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(l,mid,lc);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rc);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; r &gt;= R)</span><br><span class="line">lazy[rt] += v;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Pushdown(rt); <span class="comment">//??</span></span><br><span class="line"><span class="keyword">int</span> mid = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) update(l,r,v,L,mid,lc);</span><br><span class="line"><span class="keyword">else</span> Maintain(lc,L,mid);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) update(l,r,v,mid+<span class="number">1</span>,R,rc);</span><br><span class="line"><span class="keyword">else</span> Maintain(rc,mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line">Maintain(rt,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> ret)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_sum = <span class="number">0</span>; _min = INT_MAX; _max = -INT_MAX;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d %d %d %d\n"</span>,rt,l,r,L,R,ret);</span><br><span class="line"><span class="keyword">if</span>(l &lt;= L &amp;&amp; r &gt;= R)</span><br><span class="line">&#123;</span><br><span class="line">_sum += sum[rt] + ret * (R-L+<span class="number">1</span>);</span><br><span class="line">_min = min(_min,minv[rt]+ret);</span><br><span class="line">_max = max(_max,maxv[rt]+ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) query(lc,l,r,L,mid,ret + lazy[rt]);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) query(rc,l,r,mid+<span class="number">1</span>,R,ret + lazy[rt]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">Tree.update(a,b,c,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">Tree.query(<span class="number">1</span>,a,b,<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Minv: %d Maxv: %d Sumv: %d\n"</span>,_min,_max,_sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个写法稍微不一样的板子<br>但是和蓝书上面的两个问题是匹配的<br>挂上来咯<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>+ <span class="number">10</span>;</span><br><span class="line"><span class="comment">//update_add:把A[L]~A[R]的值全部加v_add</span></span><br><span class="line"><span class="comment">//update_set:把A[l]~A[R]的值设为v_set</span></span><br><span class="line"><span class="comment">//query:计算子序列的元素和，最小值，最大值</span></span><br><span class="line"><span class="keyword">int</span> sumv[<span class="number">2</span>*maxn],minv[<span class="number">2</span>*maxn],maxv[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> addv[<span class="number">2</span>*maxn], setv[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> y11, y2, v_add, v_set;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = <span class="number">2</span>*o + <span class="number">1</span>;</span><br><span class="line">    sumv[o] = minv[o] = maxv[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(setv[o] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        sumv[o] = setv[o] * (R-L+<span class="number">1</span>);</span><br><span class="line">        minv[o] = maxv[o] = setv[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(R &gt; L) &#123;</span><br><span class="line">        sumv[o] = sumv[lc] + sumv[rc];</span><br><span class="line">        minv[o] = min(minv[lc], minv[rc]);</span><br><span class="line">        maxv[o] = max(maxv[lc], maxv[rc]);</span><br><span class="line">    &#125;</span><br><span class="line">    minv[o] += addv[o]; maxv[o] += addv[o]; sumv[o] += addv[o] * (R-L+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = <span class="number">2</span>*o+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(setv[o] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        setv[lc] = setv[rc] = setv[o];</span><br><span class="line">        addv[lc] = addv[rc] = <span class="number">0</span>;</span><br><span class="line">        setv[o] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(addv[o] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        addv[lc] += addv[o];</span><br><span class="line">        addv[rc] += addv[o];</span><br><span class="line">        addv[o] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_add</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = o*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y11 &lt;= L &amp;&amp; y2 &gt;= R) &#123;</span><br><span class="line">        addv[o] += v_add;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(y11 &lt;= M) update_add(lc, L, M); <span class="keyword">else</span> maintain(lc, L, M);</span><br><span class="line">        <span class="keyword">if</span>(y2 &gt; M) update_add(rc, M+<span class="number">1</span>, R);<span class="keyword">else</span> maintain(rc, M+<span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line">    maintain(o, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_set</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = o*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y11 &lt;= L &amp;&amp; y2 &gt;= R) &#123;</span><br><span class="line">        setv[o] = v_set;</span><br><span class="line">        addv[o] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(y11 &lt;= M) update_set(lc, L, M); <span class="keyword">else</span> maintain(lc, L, M);</span><br><span class="line">        <span class="keyword">if</span>(y2 &gt; M) update_set(rc, M+<span class="number">1</span>, R); <span class="keyword">else</span> maintain(rc, M+<span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line">    maintain(o, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> _min, _max, _sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> add)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(setv[o] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        _sum += (add+setv[o]+addv[o]) * (min(R, y2)-max(L, y11)+<span class="number">1</span>);</span><br><span class="line">        _min = min(_min, setv[o]+addv[o]+add);</span><br><span class="line">        _max = max(_max, setv[o]+addv[o]+add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y11 &lt;= L &amp;&amp; y2 &gt;= R) &#123;</span><br><span class="line">        _sum += sumv[o] + add * (R-L+<span class="number">1</span>);</span><br><span class="line">        _min = min(_min, minv[o]+add);</span><br><span class="line">        _max = max(_max, maxv[o]+add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(y11 &lt;= M) query(o*<span class="number">2</span>, L, M, add+addv[o]);</span><br><span class="line">        <span class="keyword">if</span>(y2 &gt; M) query(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R, add + addv[o]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(setv, <span class="number">-1</span>, <span class="keyword">sizeof</span> setv);</span><br><span class="line">    <span class="built_in">memset</span>(addv, <span class="number">0</span>, <span class="keyword">sizeof</span> addv);</span><br><span class="line">    <span class="built_in">memset</span>(sumv, <span class="number">0</span>, <span class="keyword">sizeof</span> sumv);</span><br><span class="line">    <span class="built_in">memset</span>(minv, <span class="number">0</span>, <span class="keyword">sizeof</span> minv);</span><br><span class="line">    <span class="built_in">memset</span>(maxv, <span class="number">0</span>, <span class="keyword">sizeof</span> maxv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v_add);</span><br><span class="line">y11 = y2 = i;</span><br><span class="line">update_add(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;y11,&amp;y2,&amp;c);</span><br><span class="line">v_add = c;</span><br><span class="line">update_add(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">_sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y11);</span><br><span class="line">y2 = y11;</span><br><span class="line">query(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,_sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>划一下习题.</p><p>树状数组:</p><p><a href="https://vjudge.net/problem/UVALive-2191" target="_blank" rel="noopener">LA-2191</a><br><a href="https://vjudge.net/problem/UVALive-5902" target="_blank" rel="noopener">LA-5902</a></p><p>线段树+其他技巧<br><a href="https://vjudge.net/problem/UVA-12299" target="_blank" rel="noopener">UVA-12299</a><br><a href="https://vjudge.net/problem/UVA-11525" target="_blank" rel="noopener">UVA-11525</a><br><a href="https://vjudge.net/problem/UVALive-4730" target="_blank" rel="noopener">LA-4730</a><br><a href="https://vjudge.net/problem/UVALive-4108" target="_blank" rel="noopener">LA-4108</a><br><a href="https://vjudge.net/problem/UVALive-4013" target="_blank" rel="noopener">LA-4013</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉索引树Binary-Index-Tree（树状数组）&quot;&gt;&lt;a href=&quot;#二叉索引树Binary-Index-Tree（树状数组）&quot; class=&quot;headerlink&quot; title=&quot;二叉索引树Binary Index Tree（树状数组）&quot;&gt;&lt;/a&gt;二叉
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数学专题习题2</title>
    <link href="http://yoursite.com/2018/02/16/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98%E4%B9%A0%E9%A2%982/"/>
    <id>http://yoursite.com/2018/02/16/数学专题习题2/</id>
    <published>2018-02-16T14:07:04.000Z</published>
    <updated>2018-02-16T14:10:43.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目传送门"><a href="#题目传送门" class="headerlink" title="题目传送门"></a>题目传送门</h2><p><a href="https://vjudge.net/problem/UVA-11728" target="_blank" rel="noopener">UVa-11728</a><br><a href="https://vjudge.net/problem/UVA-10673" target="_blank" rel="noopener">UVa-10673</a><br><a href="https://vjudge.net/problem/UVA-11768" target="_blank" rel="noopener">UVa-11768</a><br><a href="https://vjudge.net/problem/UVA-10692" target="_blank" rel="noopener">UVa-10692</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-11728</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> kase = <span class="number">0</span>,S;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = <span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)  ret += i+n/i;</span><br><span class="line"><span class="keyword">if</span> (q*q == n) ret -= q;</span><br><span class="line"><span class="keyword">return</span> (ret == m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;S) == <span class="number">1</span> &amp;&amp; S)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (S == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: 1\n"</span>,++kase);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = S<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (check(i,S))</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++kase,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++kase,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UVA-10673</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getLL</span><span class="params">(LL &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ex_gcd</span><span class="params">(LL a,LL b,LL &amp;X,LL &amp;Y,LL &amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b)&#123;d=a;X=<span class="number">1</span>;Y=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ex_gcd(b,a%b,Y,X,d);</span><br><span class="line">Y-=(a/b)*X;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL T,x,k,a,b,X,Y,d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">getLL(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">getLL(x);getLL(k);</span><br><span class="line">a = <span class="built_in">floor</span>(<span class="keyword">double</span>(x)/<span class="keyword">double</span>(k));</span><br><span class="line">b = <span class="built_in">ceil</span>(<span class="keyword">double</span>(x)/<span class="keyword">double</span>(k));</span><br><span class="line">d = a == b ? a : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">X = <span class="number">0</span>,Y = k;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ex_gcd(a,b,X,Y,d);</span><br><span class="line">X *= x, Y *= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,X,Y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-11768</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll&amp; g,ll&amp; x,ll&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) g=a,x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> exgcd(b,a%b,g,y,x),y-=x*(a/b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> X1,Y1,X2,Y2;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x1=(X1+<span class="number">0.05</span>)*<span class="number">10</span>,y1=(Y1+<span class="number">0.05</span>)*<span class="number">10</span>,x2=(X2+<span class="number">0.05</span>)*<span class="number">10</span>,y2=(Y2+<span class="number">0.05</span>)*<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(x1==x2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x1%<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(Y2&lt;Y1) swap(Y1,Y2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">floor</span>(Y2)-<span class="built_in">ceil</span>(Y1)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y1==y2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(y1%<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(X2&lt;X1) swap(X1,X2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">floor</span>(X2)-<span class="built_in">ceil</span>(X1)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll a=(y2-y1)*<span class="number">10</span>,b=(x1-x2)*<span class="number">10</span>,c=y2*x1-y1*x2,g,x,y;</span><br><span class="line">    exgcd(a,b,g,x,y);</span><br><span class="line">    <span class="keyword">if</span>(c%g) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x*=c/g;b=<span class="built_in">abs</span>(b/g);</span><br><span class="line">    <span class="keyword">if</span>(X1&gt;X2) swap(X1,X2);</span><br><span class="line">    x1=<span class="built_in">ceil</span>(X1);x2=<span class="built_in">floor</span>(X2);x-=(x-x1)/b*b;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;x1) x+=b;</span><br><span class="line">    <span class="keyword">if</span>(x2&lt;x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (x2-x)/b+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) </span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;X1,&amp;Y1,&amp;X2,&amp;Y2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-10692</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxn], k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n, <span class="keyword">int</span> M)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>)</span><br><span class="line">            ans = ans * a % M;</span><br><span class="line">        a = a * a % M;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler_phi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans / i * (i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n%i==<span class="number">0</span>)</span><br><span class="line">                n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span> <span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> M)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d == k - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> A[d]%M;</span><br><span class="line">    <span class="keyword">int</span> phi = euler_phi(M);</span><br><span class="line">        <span class="keyword">int</span> c = solve (d+<span class="number">1</span>, phi) + phi;</span><br><span class="line">    <span class="keyword">return</span> pow_mod(A[d], c, M);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> str[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str) == <span class="number">1</span> &amp;&amp; <span class="built_in">strcmp</span>(str, <span class="string">"#"</span>)) </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> M;</span><br><span class="line">        <span class="built_in">sscanf</span>(str, <span class="string">"%d"</span>, &amp;M);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, cas++, solve(<span class="number">0</span>, M));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目传送门&quot;&gt;&lt;a href=&quot;#题目传送门&quot; class=&quot;headerlink&quot; title=&quot;题目传送门&quot;&gt;&lt;/a&gt;题目传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/UVA-11728&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>数学专题习题</title>
    <link href="http://yoursite.com/2018/02/15/%E6%95%B0%E5%AD%A6%E4%B8%93%E9%A2%98%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/02/15/数学专题习题/</id>
    <published>2018-02-15T14:16:14.000Z</published>
    <updated>2018-02-15T14:24:44.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目传送门"><a href="#题目传送门" class="headerlink" title="题目传送门"></a>题目传送门</h2><p><a href="https://vjudge.net/problem/UVA-10237" target="_blank" rel="noopener">UVa-10237</a><br><a href="https://vjudge.net/problem/UVA-10883" target="_blank" rel="noopener">UVa-10883</a><br><a href="https://vjudge.net/problem/UVA-10943" target="_blank" rel="noopener">UVa-10943</a><br><a href="https://vjudge.net/problem/UVA-11038" target="_blank" rel="noopener">UVa-11038</a><br><a href="https://vjudge.net/problem/UVA-11076" target="_blank" rel="noopener">UVa-11076</a><br><a href="https://vjudge.net/problem/UVA-11388" target="_blank" rel="noopener">UVa-11388</a><br><a href="https://vjudge.net/problem/UVA-11889" target="_blank" rel="noopener">UVa-11889</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-10237</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">ll b[N][N*N],w[N][N*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="keyword">sizeof</span>(w));</span><br><span class="line">    b[<span class="number">0</span>][<span class="number">0</span>] = w[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">        b[i][<span class="number">0</span>] = b[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = (i+<span class="number">1</span>)/<span class="number">2</span> * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= l &amp;&amp; j &lt;= k; j++)</span><br><span class="line">            b[i][j] = b[i<span class="number">-1</span>][j] + (ll)(l-j+<span class="number">1</span>) * b[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">        w[i][<span class="number">0</span>] = w[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = i/<span class="number">2</span> * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= l &amp;&amp; j &lt;= k; j++)</span><br><span class="line">            w[i][j] = w[i<span class="number">-1</span>][j] + (ll)(l-j+<span class="number">1</span>) * w[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) == <span class="number">2</span> &amp;&amp; n + k)</span><br><span class="line">&#123;</span><br><span class="line">        init();</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">            ans = ans + b[n][i] * w[n][k-i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-10883</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,kase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> ln[<span class="number">50010</span>],a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ln[<span class="number">0</span>] = ln[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">50009</span>; i++)</span><br><span class="line">ln[i] = ln[i<span class="number">-1</span>]+<span class="built_in">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">double</span> summ = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">summ += a * <span class="built_in">exp</span>(ln[n]-ln[n-i]-ln[i]-n*ln[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %.3lf\n"</span>,++kase,summ);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-10943</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"><span class="keyword">int</span> C[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="keyword">module</span> = <span class="number">1e6</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_table</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">208</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j)  C[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> C[i][j] = (C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%<span class="keyword">module</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">in_table();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;K) == <span class="number">2</span> &amp;&amp; N &amp;&amp; K)</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,C[N+K<span class="number">-1</span>][K<span class="number">-1</span>]);&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-11038</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">13</span>],g[<span class="number">13</span>]; <span class="comment">//10^i~10^(i+1)-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>,cnt=<span class="number">1</span>,tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c = x%<span class="number">10</span>;</span><br><span class="line">x/=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (c) ans+=x*cnt;</span><br><span class="line"><span class="keyword">else</span> ans+=(x<span class="number">-1</span>)*cnt+tmp+<span class="number">1</span>;</span><br><span class="line">tmp+=c*cnt;</span><br><span class="line">cnt*=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[<span class="number">0</span>] = g[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++)</span><br><span class="line">f[i] = (<span class="number">9</span>*(i<span class="number">-1</span>))*i+i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) g[i] = g[i<span class="number">-1</span>]+f[i];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m) == <span class="number">2</span> &amp;&amp; n &gt;= <span class="number">0</span> &amp;&amp; m &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,calc(m)-calc(n<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-11076</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">13</span>],c[<span class="number">11</span>],d[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ans,t = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y=x;</span><br><span class="line"><span class="keyword">while</span>(y) ret*=y,y--;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">op1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">x--;</span><br><span class="line">ret+=<span class="built_in">pow</span>(<span class="number">10</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) == <span class="number">1</span> &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),c[a[i]]++;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> f = op(n),mul = op1(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) f/=(op(c[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) d[i] = f*c[i]/n;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) ans += d[i]*i*mul;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-11388</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (y == <span class="number">0</span>) ? x : gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T,G,L;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G &gt;&gt; L;</span><br><span class="line"><span class="keyword">if</span> (L % G != <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G &lt;&lt; <span class="string">" "</span> &lt;&lt; L &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">long long x = G*L;</span></span><br><span class="line"><span class="comment">for (long long i = G; i &lt;= min((LL)sqrt(x),L); i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (x % i == 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (gcd(i,x/i) == G)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%lld %lld\n",i,x/i);</span></span><br><span class="line"><span class="comment">flag = 1;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (!flag) printf("-1\n");*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UVA-11889</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (y == <span class="number">0</span>) ? x : gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> A,C,T;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>); </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A &gt;&gt; C;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line"><span class="keyword">if</span> (i*C % A == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> B = i * C/A;</span><br><span class="line"><span class="keyword">if</span> (gcd(A,B) == i) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,B);</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">"NO SOLUTION"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目传送门&quot;&gt;&lt;a href=&quot;#题目传送门&quot; class=&quot;headerlink&quot; title=&quot;题目传送门&quot;&gt;&lt;/a&gt;题目传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/UVA-10237&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-3485] Bridge 基于定积分的二分</title>
    <link href="http://yoursite.com/2018/02/13/LA-3485-Bridge-%E5%9F%BA%E4%BA%8E%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2018/02/13/LA-3485-Bridge-基于定积分的二分/</id>
    <published>2018-02-13T13:56:36.000Z</published>
    <updated>2018-02-18T11:34:10.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-3485" target="_blank" rel="noopener">LA-3485</a><br>题目大意:给定一个抛物线的左右长度和曲线长，求抛物线的底到顶部的距离。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>2<br>20 101 400 4042<br>1 2 3 4<br>Sample Output<br>Case 1:<br>1.00</p><p>Case 2:<br>1.60</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由上一篇的学习笔记中，我们已经说明过对于一个曲线函数f(x)，如果它的导函数为f’(x),那么在a,b这一段上的曲线长度为</p><script type="math/tex; mode=display">\int_a^b\sqrt{1+[f'(x)]^2}dx</script><script type="math/tex; mode=display">为什么是这个样子呢？我们可以把f‘(x)展开写成\\\\\Delta y/\Delta x\\\\那么在对于\Delta x 趋近于0的时候,(\Delta x)^2+(\Delta y)^2就相当于一个直角三角形斜边的平方.\\\\开根号,就是\sqrt{\frac{(\Delta y)^2}{(\Delta x)^2}+1}\\\\也就是\sqrt{[f'(x)]^2+1}</script><p>这里不免要运用这个去计算区间内的曲线长度。</p><p>读题，我们可以发现间隔总数为ceil(B/D).每个间隔宽度为(B/n).每个间隔的绳索长度为(L/n)</p><p>我们可以构造一个二次函数,它过0,0且开口向上。</p><p>假设w为宽,h为高</p><p>那么有a(w/2)^2 = h.</p><p>所以a = 4h/(w^2).</p><p>下面就是万恶的积分运算了！</p><p>这里积分我算了两次，第一次是自己没用a来去替换w和h算的,算是硬头皮算的，第二次就参考蓝书了。</p><p>第一次的计算方法:</p><p><img src="/2018/02/13/LA-3485-Bridge-基于定积分的二分/6.jpg" alt="Markdown"></p><p>经过一番试验。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> w,h = <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">double</span> ans = w*w/<span class="number">8</span>/h*(<span class="built_in">log</span>(<span class="built_in">abs</span>(<span class="built_in">sqrt</span>(<span class="number">16</span>*h*h/w/w)+<span class="number">4</span>*h/w)) + <span class="number">4</span>*h/w*<span class="built_in">sqrt</span>(<span class="number">16</span>*h*h/w/w+<span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">h += <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现随着h的增加这个积分的值也在增加,这是个严格递增积分。<br>就可以用二分求解了！<br>写出这样的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> D,H,B,L;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">F</span><span class="params">(<span class="keyword">double</span> w,<span class="keyword">double</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ans = w*w/<span class="number">8</span>/h*(<span class="built_in">log</span>(<span class="built_in">fabs</span>(<span class="built_in">sqrt</span>(<span class="number">16</span>*h*h/w/w)+<span class="number">4</span>*h/w)) + <span class="number">4</span>*h/w*<span class="built_in">sqrt</span>(<span class="number">16</span>*h*h/w/w+<span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">ans *= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">double</span> L,<span class="keyword">double</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ll = <span class="number">0.0</span>,rr = H;</span><br><span class="line"><span class="comment">//while(rr-ll &gt; eps)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> mid = (ll+rr)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (F(w,mid) - L &gt; eps) rr = mid;</span><br><span class="line"><span class="keyword">else</span> ll = mid;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> (H-ll);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; kase++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,kase);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;D,&amp;H,&amp;B,&amp;L);</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">ceil</span>(B/D);</span><br><span class="line"><span class="keyword">double</span> singleL = L/<span class="keyword">double</span>(n);</span><br><span class="line"><span class="keyword">double</span> singlew = B/<span class="keyword">double</span>(n);</span><br><span class="line"><span class="comment">//printf("##debug n:%d L:%.5lf w %.5lf\n",n,singleL,singlew);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.5lf\n"</span>,calc(singleL,singlew));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>兴致勃勃地对样例，发现是正确的！！！</p><p>激动啊,自己造了几个凑好的数据发现都没有问题。</p><p>然后扔到OJ上就WA了,不管怎么调精度都是WA。</p><p>于是就考虑到这个方法可能存在误差。只不过很小很小但是在精度以内，会影响答案。</p><p>伤心，看到蓝书写的代换我真的头皮发麻</p><p><img src="/2018/02/13/LA-3485-Bridge-基于定积分的二分/gcc.jpg" alt="Markdown"></p><p>简化了a后发现其实积分中用t与dt代换x的步骤也省去了。</p><p>啊啊啊啊啊啊啊</p><p>难受</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> D,H,B,LLL;</span><br><span class="line"><span class="keyword">int</span> T; </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> aa = a*a,xx = x*x;</span><br><span class="line">    <span class="keyword">return</span> (x*<span class="built_in">sqrt</span>(aa+xx) + aa*<span class="built_in">log</span>(<span class="built_in">fabs</span>(x+<span class="built_in">sqrt</span>(aa+xx))))/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">double</span> w,<span class="keyword">double</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">4</span>*h/w/w;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">1</span>/(<span class="number">2</span>*a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>*a*(f(b,w/<span class="number">2</span>)-f(b,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; kase++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(kase &gt; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,kase);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;D,&amp;H,&amp;B,&amp;LLL);</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">ceil</span>(B/D);</span><br><span class="line"><span class="keyword">double</span> L = LLL/<span class="keyword">double</span>(n);</span><br><span class="line"><span class="keyword">double</span> w = B/<span class="keyword">double</span>(n);</span><br><span class="line"><span class="keyword">double</span> ll = <span class="number">0.0</span>,rr = H;</span><br><span class="line"><span class="keyword">while</span>(rr-ll &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> mid = (ll+rr)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (calc(w,mid) - L &gt; eps) rr = mid;</span><br><span class="line"><span class="keyword">else</span> ll = mid;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,H-ll);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVALive-3485&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>数值算法学习笔记</title>
    <link href="http://yoursite.com/2018/02/13/%E6%95%B0%E5%80%BC%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/13/数值算法学习笔记/</id>
    <published>2018-02-13T03:39:15.000Z</published>
    <updated>2018-02-18T11:31:38.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非线性方程求根"><a href="#非线性方程求根" class="headerlink" title="非线性方程求根"></a>非线性方程求根</h2><p>这一部分很大情况下以来与函数本身的单调性，<br>需要掌握一定的数学基础对函数概念要有清晰的认识。<br>可能也要有点求导和积分的知识。<br>还好我会<br>:)</p><h3 id="UVa-10341-Solve-It"><a href="#UVa-10341-Solve-It" class="headerlink" title="UVa-10341 Solve It!"></a>UVa-10341 Solve It!</h3><p>传送门:<a href="https://vjudge.net/problem/UVA-10341" target="_blank" rel="noopener">UVa-10341</a><br>题目大意:<br>试解一个方程，使得</p><script type="math/tex; mode=display">pe^{-x}+qsin(x)+rcos(x)+stan(x)+tx^2+u =0  \space \space ,  x \in [0,1].\\\\0\leq p,r \leq 20;\\\\-20\leq q,s,t \leq 0;</script><p>光凭这个方程我们毫无办法，因为对整个函数求导可以得到.</p><p>应用分部求导法则就可以了算是简单的求导</p><p>得到</p><script type="math/tex; mode=display">f'(x) = -pe^{-x}+qcos(x)-rsin(x)+2stan(x)sec^2(x)+2tx \\\\</script><p>眼花缭乱毫无办法,凭借导函数我们看不出任何增减性的变化。</p><p>注意到x的边界为0,1。</p><p>那么有以下函数在该区间是单减的（严格递减）</p><script type="math/tex; mode=display">e^{-x};cos(x);</script><p>有以下的函数在该区间单增（严格递增）</p><script type="math/tex; mode=display">sin(x);tan(x);tx^2;</script><p>再看一眼题目看到了sin(x),tan(x),tx^2前面的系数都是非正的！那么相当于整个函数为在[0,1]上的减函数。</p><p>于是根据介值定理，在某一区间上（这里是[0,1]） ，这个单调递减的函数若满足f(0) &gt;= 0 &gt;= f(1).</p><p>则在[0,1]上一定有且仅有一个解.</p><p>于是二分就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">double</span> p,q,r,s,t,u;</span><br><span class="line"><span class="keyword">double</span> e = <span class="built_in">pow</span>(<span class="keyword">double</span>(<span class="number">1.0</span>+<span class="number">1.0</span>/<span class="number">10000</span>),<span class="number">10000</span>);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> (p*<span class="built_in">exp</span>(-x)+q*<span class="built_in">sin</span>(x)+r*<span class="built_in">cos</span>(x)+s*<span class="built_in">tan</span>(x)+t*x*x+u);&#125;</span><br><span class="line">\\e^x 可以写成<span class="built_in">exp</span>(-x)!</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf%lf%lf"</span>,&amp;p,&amp;q,&amp;r,&amp;s,&amp;t,&amp;u) == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> lim0 = calc(<span class="number">0</span>),lim1 = calc(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (lim1 &gt; <span class="number">1e-9</span> || lim0 &lt; <span class="number">-1e-9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"No solution"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> l = <span class="number">0.0</span>,r = <span class="number">1.0</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(r-l &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line">mid = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (calc(mid) &gt; <span class="number">0.0</span>)</span><br><span class="line">l = mid;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">r = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LA-5009-Error-Curves"><a href="#LA-5009-Error-Curves" class="headerlink" title="LA-5009 Error Curves"></a>LA-5009 Error Curves</h3><p>传送门:<a href="https://vjudge.net/problem/UVALive-5009" target="_blank" rel="noopener">LA-5009</a></p><p>题目大意:给出n个抛物线（开口向上）或者直线，定义一个总函数f(x) = max{Si(x)}.</p><p>求这个总函数在[0,1000]上的最小值。</p><p>错误思路:<br>把每个函数在[0,1000]上的最小值求出来最后一遍取最小。<br>这样虽说看上去毫无问题，但是这个思路对于定义就是不正确的<br>f(x)的定义是max(si(x))而不是min,也就是说,我们在处理函数时不能以偏概全,必须在某一区间上硬性规定要取的是函数的最大值,换言之,我们的答案不能保证取到这个答案时f(x)能取到这个最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wrong answer.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line">&#125;f[maxn]; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(Node q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = q.a,y = q.b,z = q.c;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt;= <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">q.ans = (<span class="keyword">double</span>)(z);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">q.ans = (<span class="keyword">double</span>)(<span class="number">1000</span>*y+z);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> u = (-y)/(<span class="number">2</span>*x);</span><br><span class="line"><span class="keyword">if</span> (u &gt; eps  &amp;&amp;  <span class="number">1000</span> - u &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line">q.ans = u*u*<span class="keyword">double</span>(x)+u*<span class="keyword">double</span>(y)+u*<span class="keyword">double</span>(z);</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u &lt; -eps)</span><br><span class="line">&#123;</span><br><span class="line">q.ans = <span class="keyword">double</span>(z);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u - <span class="number">1000</span> &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line">q.ans = <span class="number">1000</span>*<span class="number">1000</span>*<span class="keyword">double</span>(x)+<span class="keyword">double</span>(y)*<span class="number">1000</span>+<span class="keyword">double</span>(z);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc ,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> ass = <span class="number">1e8</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;f[i].a,&amp;f[i].b,&amp;f[i].c),</span><br><span class="line">calc(f[i]),</span><br><span class="line">ass = min(ass,f[i].ans),</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,ass);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正解:<br>可以证明，对于两条抛物线或者直线，要么是单增单减，要么是开口向上的凹形图像。<br>再用一次数学归纳法,证明从n条线推导到n+1条曲线即可。<br>因为答案呈单峰，三分求解即可。<br>交了两次,第一次eps =1e-7莫名wa掉,第二次eps=1e-9就AC了<br>你敢信<br><img src="/2018/02/13/数值算法学习笔记/jzj.jpg" alt="Markdown"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c[maxn],T,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ans = a[<span class="number">1</span>]*x*x+b[<span class="number">1</span>]*x+c[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">ans = max(ans,a[i]*x*x+b[i]*x+c[i]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">read(a[i]),read(b[i]),read(c[i]);</span><br><span class="line"><span class="keyword">double</span> l = <span class="number">0.0</span>,r = <span class="number">1000.0</span>;</span><br><span class="line"><span class="keyword">while</span>(r - l &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> m1,m2;</span><br><span class="line">m1 = l+(r-l)/<span class="number">3</span>;</span><br><span class="line">m2 = r-(r-l)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (calc(m2)-calc(m1) &gt; eps)</span><br><span class="line">r = m2;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = m1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%.4lf %.4lf\n",l,r);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,calc(l));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="积分导数技巧"><a href="#积分导数技巧" class="headerlink" title="积分导数技巧"></a>积分导数技巧</h2><p>虽然积分和导数算是我高数里比较擅长的东西。<br>但是还是要理一下的吧。</p><h3 id="导数的定义"><a href="#导数的定义" class="headerlink" title="导数的定义"></a>导数的定义</h3><p>在可导函数上某一点的瞬时变化率.</p><script type="math/tex; mode=display">\lim_{\Delta x\rightarrow0} \frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}</script><h3 id="基本初等函数导数即求导法则"><a href="#基本初等函数导数即求导法则" class="headerlink" title="基本初等函数导数即求导法则."></a>基本初等函数导数即求导法则.</h3><script type="math/tex; mode=display">f(x)=t,f'(x)=0\\\\f(x)=x^n,f'(x)=nx^{n-1}\\\\f(x)=sin(x),f'(x)=cos(x)\\\\f(x)=cos(x),f'(x)=-sin(x)\\\\f(x)=e^x,f'(x)=e^x\\\\f(x)=lnx,f'(x)=\frac{1}{x}\\\\f(x) = tan(x),f'(x)=\frac{1}{cos^2(x)}</script><script type="math/tex; mode=display">乘法则:如果一个函数f(x)=g(x)h(x),那么\\\\f'(x) = g'(x)h(x)+g(x)h'(x)</script><script type="math/tex; mode=display">商法则：如果一个函数f(x)=\frac{g(x)}{h(x)},那么\\\\f'(x)=\frac{g'(x)h(x)-g(x)h'(x)}{h^2(x)}</script><script type="math/tex; mode=display">链导法则：如果一个函数f(x)=g(h(x)),那么\\\\f'(x)=g'(h(x))·h'(x)</script><p><del>Mathjax打得我好累</del></p><h3 id="积分的定义"><a href="#积分的定义" class="headerlink" title="积分的定义"></a>积分的定义</h3><p>难以解释.<br>积分求的是一个函数与x轴围成的面积大小。<br>只可意会不可言传。（逃</p><p><img src="/2018/02/13/数值算法学习笔记/1.jpg" alt="Markdown"></p><p><img src="/2018/02/13/数值算法学习笔记/2.jpg" alt="Markdown"></p><p><img src="/2018/02/13/数值算法学习笔记/3.jpg" alt="Markdown"></p><p>这几个算有用的吧。</p><p>之前做过的一点习题</p><p>贴上来算了</p><p><img src="/2018/02/13/数值算法学习笔记/4.jpg" alt="Markdown"></p><p><img src="/2018/02/13/数值算法学习笔记/5.jpg" alt="Markdown"></p><h3 id="积分和导数的综合运用"><a href="#积分和导数的综合运用" class="headerlink" title="积分和导数的综合运用"></a>积分和导数的综合运用</h3><p>求曲函数的长度(LA-3485有用)</p><script type="math/tex; mode=display">有一曲线方程\space f(x),且x\in[a,b],令f'(x)为f(x)的导函数,那么该曲线在a,b上的长度为\\\\\int_a^b\sqrt{1+[f'(x)]^2}dx</script><h4 id="LA-3485-Bridge"><a href="#LA-3485-Bridge" class="headerlink" title="LA-3485 Bridge"></a>LA-3485 Bridge</h4><p>传送门:<a href="https://vjudge.net/problem/UVALive-3485" target="_blank" rel="noopener">LA-3485</a></p><p>题目大意:给出一个开口向上的抛物线的曲线长和左右区间，求出抛物线顶点的值（最小值）。</p><p>不行这题一定要另外写一篇Mark一下,太震撼了.</p><p>qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;非线性方程求根&quot;&gt;&lt;a href=&quot;#非线性方程求根&quot; class=&quot;headerlink&quot; title=&quot;非线性方程求根&quot;&gt;&lt;/a&gt;非线性方程求根&lt;/h2&gt;&lt;p&gt;这一部分很大情况下以来与函数本身的单调性，&lt;br&gt;需要掌握一定的数学基础对函数概念要有清晰的认识。&lt;
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[UVa-11542] Square</title>
    <link href="http://yoursite.com/2018/02/12/UVa-11542-Square/"/>
    <id>http://yoursite.com/2018/02/12/UVa-11542-Square/</id>
    <published>2018-02-12T15:39:36.000Z</published>
    <updated>2018-02-14T11:03:42.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门<a href="https://vjudge.net/problem/UVA-11542" target="_blank" rel="noopener">UVa-11542</a><br>题目大意:给出一个整数集合从中挑出至少一个使得积为完全平方数。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>4<br>3<br>2 3 5<br>3<br>6 10 15<br>4<br>4 6 10 15<br>3<br>2 2 2<br>Sample Output<br>0<br>1<br>3<br>3</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>高斯消元+xor矩阵<br>先处理出前面500的质数<br>写成m个异或的方程 自上而下求解即可<br>异或的话可以用bitset优化但是，，我不会用啊</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxp = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Matrix[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line"><span class="keyword">int</span> prime[maxp],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler_Prime</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">is_prime[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//1 不是质数. </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= s; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_prime[i]) prime[cnt++] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * prime[j] &lt;= s; j++)</span><br><span class="line">&#123;</span><br><span class="line">is_prime[prime[j] * i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Matrix A;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Matrix A, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k, r, u;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n) </span><br><span class="line">  &#123; </span><br><span class="line">    r = i;</span><br><span class="line">    <span class="keyword">for</span>(k = i; k &lt; m; k++)</span><br><span class="line">      <span class="keyword">if</span>(A[k][j]) </span><br><span class="line">  &#123; r = k; <span class="keyword">break</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span>(A[r][j]) &#123;</span><br><span class="line">      <span class="keyword">if</span>(r != i) <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt;= n; k++) swap(A[r][k], A[i][k]);</span><br><span class="line">      <span class="keyword">for</span>(u = i+<span class="number">1</span>; u &lt; m; u++) <span class="keyword">if</span>(A[u][j])</span><br><span class="line">        <span class="keyword">for</span>(k = i; k &lt;= n; k++) A[u][k] ^= A[i][k];</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">  <span class="keyword">while</span>(T--) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> n, maxp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x; </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span>(A));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)</span><br><span class="line">        <span class="keyword">while</span>(x % prime[j] == <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">          maxp = max(maxp, j); x /= prime[j]; A[j][i] ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = rank(A, maxp+<span class="number">1</span>, n); <span class="comment">// 只用到了前maxp+1个素数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="number">1L</span>L &lt;&lt; (n-r))<span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门&lt;a href=&quot;https://vjudge.net/problem/UVA-11542&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-3704] Cellular Automaton 细胞自动机</title>
    <link href="http://yoursite.com/2018/02/12/LA-3704-Cellular-Automaton-%E7%BB%86%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>http://yoursite.com/2018/02/12/LA-3704-Cellular-Automaton-细胞自动机/</id>
    <published>2018-02-12T06:04:38.000Z</published>
    <updated>2018-02-14T11:05:28.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/LA-3704" target="_blank" rel="noopener">LA-3704</a></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>5 3 1 1<br>1 2 2 1 2<br>5 3 1 10<br>1 2 2 1 2<br>Sample Output<br>2 2 2 2 1<br>2 0 0 2 2</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>既然这里讲的是矩阵的运算 那么一定是要构造一个递推的关系<br>从题面上很难发现有什么规律可言<br>于是<br>我们动手画画<br>发现每次的变化都是上次的有序排列<br>比如样例中的第一组输入输出<br>[1 1 0 0 1]  [1] = [2]<br>[1 1 1 0 0]  [2] = [2]<br>[0 1 1 1 0]  [2] = [2]<br>[0 0 1 1 1]  [1] = [2]<br>[1 0 0 1 1]  [2] = [1]<br>发现了么，左边的矩阵的每下一行都是上一行的元素向右移动一格<br>这样的矩阵 只要保存一行信息即可我们称之为”循环矩阵”.<br>于是原来n^3logk的爆炸事件在这个循环矩阵的优化下<br>降到了n^2logk.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f  </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> N=<span class="number">505</span>;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>  </span><br><span class="line">    ll mat[N];  </span><br><span class="line">&#125;Mat;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> n,d,m,k;  </span><br><span class="line">  </span><br><span class="line"><span class="function">Mat <span class="title">multi</span><span class="params">(Mat a,Mat b)</span> </span>&#123;  </span><br><span class="line">    Mat c;  </span><br><span class="line">    <span class="built_in">memset</span>(c.mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(c.mat));  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;  </span><br><span class="line">            c.mat[i]+=a.mat[j]*b.mat[(i-j+n)%n+<span class="number">1</span>];  </span><br><span class="line">            c.mat[i]%=m;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> c;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function">Mat <span class="title">qui</span><span class="params">(Mat a,<span class="keyword">int</span> b)</span> </span>&#123;  </span><br><span class="line">    Mat c;  </span><br><span class="line">    <span class="built_in">memset</span>(c.mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(c.mat));     </span><br><span class="line">    c.mat[<span class="number">1</span>]=<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span> (b) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) &#123;  </span><br><span class="line">            c=multi(c, a);  </span><br><span class="line">        &#125;  </span><br><span class="line">        a=multi(a, a);  </span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> c;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> f[N];  </span><br><span class="line">    Mat A;  </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;d&gt;&gt;k) &#123;  </span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;f[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">memset</span>(A.mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(A.mat));  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">1</span>; i++) &#123;  </span><br><span class="line">            A.mat[i]=<span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=d; j++) &#123;  </span><br><span class="line">                A.mat[(i<span class="number">-1</span>+j)%n+<span class="number">1</span>]=<span class="number">1</span>;  </span><br><span class="line">                A.mat[(i<span class="number">-1</span>-j+n)%n+<span class="number">1</span>]=<span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        A=qui(A, k);  </span><br><span class="line">        ll res[N];  </span><br><span class="line">        <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span>(res));  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;  </span><br><span class="line">                res[i]+=A.mat[(i-j+n)%n+<span class="number">1</span>]*f[j];  </span><br><span class="line">                res[i]%=m;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>,res[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res[n]) ;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/LA-3704&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[UVa-10870] Recurrences(矩阵构造与快速幂)</title>
    <link href="http://yoursite.com/2018/02/12/UVa-10870-Recurrences-%E7%9F%A9%E9%98%B5%E6%9E%84%E9%80%A0%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>http://yoursite.com/2018/02/12/UVa-10870-Recurrences-矩阵构造与快速幂/</id>
    <published>2018-02-12T05:09:30.000Z</published>
    <updated>2018-02-14T11:05:28.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVA-10870" target="_blank" rel="noopener">UVa-10870</a><br>题目大意:给出F(n)的递推式,求出F(n)%m的值。</p><p>Consider recurrent functions of the following form:<br>f(n) = a1f(n − 1) + a2f(n − 2) + a3f(n − 3) + . . . + adf(n − d), for n &gt; d,<br>where a1, a2, . . . , ad are arbitrary constants.<br>A famous example is the Fibonacci sequence, defined as: f(1) = 1, f(2) = 1, f(n) = f(n − 1) +f(n − 2). Here d = 2, a1 = 1, a2 = 1.</p><p>Every such function is completely described by specifying d (which is called the order of recurrence),values of d coefficients: a1, a2, . . . , ad, and values of f(1), f(2), . . . , f(d). You’ll be given these numbers,and two integers n and m. Your program’s job is to compute f(n) modulo m.<br>Input<br>Input file contains several test cases. Each test case begins with three integers: d, n, m, followed bytwo sets of d non-negative integers. The first set contains coefficients: a1, a2, . . . , ad. The second set gives values of f(1), f(2), . . . , f(d).<br>You can assume that: 1 ≤ d ≤ 15, 1 ≤ n ≤ 2^31-1，1 ≤ m ≤ 46340. All numbers in the input will fit in signed 32-bit integer.<br>Input is terminated by line containing three zeroes instead of d, n, m. Two consecutive test cases<br>are separated by a blank line.<br>Output<br>For each test case, print the value of f(n)( mod m) on a separate line. It must be a non-negative integer,<br>less than m.</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>1 1 100<br>2<br>1<br>2 10 100<br>1 1<br>1 1<br>3 2147483647 12345<br>12345678 0 12345<br>1 2 3<br>0 0 0<br>Sample Output<br>1<br>55<br>423</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>很明显是一个构造类的问题，我们如果能够从f(n)递推到f(n+1)就可以使矩阵快速幂了<br>比如当d=5时,不难写出这样的矩阵乘法</p><script type="math/tex; mode=display">\begin{bmatrix}    a_1 &a_2&a_3&a_4&a_5\\\\    1 & 0 &0 &0 &0 \\\\    0& 1 &0&0&0\\\\    0& 0& 1 &0 &0\\\\    0&0 &0 & 1 &0\end{bmatrix} *\begin{bmatrix}     f(n)\\\\     f(n-1)\\\\     f(n-2)\\\\     f(n-3)\\\\     f(n-4)\\\\\end{bmatrix}=\begin{bmatrix}     f(n+1)\\\\     f(n)\\\\     f(n-1)\\\\     f(n-2)\\\\     f(n-3)\\\\\end{bmatrix}</script><p>同理d为任意值时都可以写出这样的矩阵乘法。</p><p>这样我们就可以定义一个常数矩阵A,在从f(n)递推到f(n+1)乘以A即可,我们已经知道了f(1)到f(d)的值</p><p>从f(d)到f(n)一共要乘以A （n-d）次</p><p>一个矩阵快速幂即可其中快速幂的复杂度为logn,矩阵的复杂度为d^3(没有优化的话)</p><p>因此时间复杂度为</p><script type="math/tex; mode=display">O(d^3log_2n)</script><p>这便是正解了。qwq</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL d,m,f[<span class="number">26</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>LL a[<span class="number">16</span>][<span class="number">16</span>];&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">multi</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node t;</span><br><span class="line">    <span class="built_in">memset</span>(t.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(t.a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= d; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= d; k++)</span><br><span class="line">                t.a[i][j] = (t.a[i][j]+x.a[i][k]*y.a[k][j])%m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(LL n,node sa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node t;</span><br><span class="line">    <span class="built_in">memset</span>(t.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(t.a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=d; i++)  t.a[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) t=multi(t,sa);</span><br><span class="line">        sa=multi(sa,sa);</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++)</span><br><span class="line">        ans=(ans+t.a[<span class="number">1</span>][i]*f[i])%m;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    node sa;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;d,&amp;n,&amp;m) == <span class="number">3</span> &amp;&amp;d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sa.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(sa.a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=d; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sa.a[<span class="number">1</span>][i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=d; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;f[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=d; i++)</span><br><span class="line">            sa.a[i][i<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=d) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[d-n+<span class="number">1</span>]%m);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,find(n-d,sa));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVA-10870&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>矩阵和线性方程组学习笔记</title>
    <link href="http://yoursite.com/2018/02/10/%E7%9F%A9%E9%98%B5%E5%92%8C%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/10/矩阵和线性方程组学习笔记/</id>
    <published>2018-02-10T14:14:30.000Z</published>
    <updated>2018-02-18T11:34:05.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="矩阵的基本运算"><a href="#矩阵的基本运算" class="headerlink" title="矩阵的基本运算"></a>矩阵的基本运算</h3><p>矩阵加法<br>最简单了，就是对应数的相加.<br>如果用i,j来表示行和列<br>那么就有</p><script type="math/tex; mode=display">C_{(i,j)} = A_{(i,j)} + B_{(i,j)}</script><p>减法同理，不作太多的阐述。唯一需要注意事项，当两个矩阵的行和列不相等的时候，求他们的矩阵和或者矩阵差是毫无意义的。只有r1=r2,s1=s2才有加减法的定义。</p><p><strong>矩阵乘法</strong>（划重点）</p><p>稍显复杂，矩阵乘法必须在n行m列和m行p列的两个矩阵中进行运算，否则一样没有意义。</p><p>得到一个n行p列的矩阵。</p><p>有以下的递推式:</p><script type="math/tex; mode=display">C_{i,k} = \sum_{j=1}^nA_{i,j} *B_{j,k}</script><p>具体细节</p><p><img src="/2018/02/10/矩阵和线性方程组学习笔记/1.jpg" alt="Markdown"></p><p>根据这个递推式，我们不难得到一个O(n^3)的算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> m[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> r, s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M,P;</span><br><span class="line">Matrix A,B,ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;N,&amp;P,&amp;M);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= P; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;A.m[i][j]);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= P; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;B.m[i][j]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= P; k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; j++)</span><br><span class="line">&#123;</span><br><span class="line">ans.m[i][j] = (ans.m[i][j] + mod) % mod;</span><br><span class="line">ans.m[i][j] += (A.m[i][k]%mod)* (B.m[k][j]%mod);</span><br><span class="line">ans.m[i][j] = (ans.m[i][j] + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,(ans.m[i][j]%mod+mod)%mod);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管联赛的要求就是O(n^3)</p><p>但是还可以更快</p><p>可以试想，当A(i,j)等于0时,那里一整块的结果都是0，不需要继续运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= P; k++)</span><br><span class="line"><span class="keyword">if</span> (A.m[i][k])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; j++)</span><br><span class="line">&#123;</span><br><span class="line">ans.m[i][j] = (ans.m[i][j] + mod) % mod;</span><br><span class="line">ans.m[i][j] += (A.m[i][k]%mod)* (B.m[k][j]%mod);</span><br><span class="line">ans.m[i][j] = (ans.m[i][j] + mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有神仙操作的可以优化到O(nm)的操作</p><p>贴下代码慢慢理解啦。</p><p>高斯费马 树上开花</p><p>我们</p><p>俯身欣赏.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> rb[<span class="number">8000000</span>],*rp=rb,ob[<span class="number">4000000</span>],*op=ob;</span><br><span class="line"><span class="keyword">int</span> _()&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(*rp&lt;<span class="number">48</span>)*rp++==<span class="string">'-'</span>?f=<span class="number">-1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(*rp&gt;<span class="number">47</span>)x=x*<span class="number">10</span>+*rp++<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">x+=(x&gt;&gt;<span class="number">31</span>&amp;P);</span><br><span class="line"><span class="keyword">int</span> ss[<span class="number">15</span>],sp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> ss[++sp]=x%<span class="number">10</span>,x/=<span class="number">10</span>;<span class="keyword">while</span>(x);</span><br><span class="line"><span class="keyword">while</span>(sp)*op++=ss[sp--]+<span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,p,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">507</span>][<span class="number">507</span>],b[<span class="number">507</span>][<span class="number">507</span>];</span><br><span class="line">i64 c[<span class="number">507</span>][<span class="number">507</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fread(rb,<span class="number">1</span>,<span class="keyword">sizeof</span>(rb),<span class="built_in">stdin</span>);</span><br><span class="line">n=_(),p=_(),m=_();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;++j)a[i][j]=_();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)b[i][j]=_();</span><br><span class="line"><span class="keyword">int</span> m1=m;</span><br><span class="line"><span class="keyword">while</span>(m1&amp;<span class="number">3</span>)++m1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">i64*z=c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=p;++k)&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[i][k],*y=b[k];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">4</span>;j&lt;=m1;j+=<span class="number">4</span>)&#123;</span><br><span class="line">z[j<span class="number">-3</span>]+=i64(x)*y[j<span class="number">-3</span>];</span><br><span class="line">z[j<span class="number">-2</span>]+=i64(x)*y[j<span class="number">-2</span>];</span><br><span class="line">z[j<span class="number">-1</span>]+=i64(x)*y[j<span class="number">-1</span>];</span><br><span class="line">z[j  ]+=i64(x)*y[j  ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(k&amp;<span class="number">7</span>))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)z[j]-=(z[j]&gt;&gt;<span class="number">30</span>)*P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">pr(c[i][j]%P);</span><br><span class="line">*op++=<span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">*op++=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">fwrite(ob,<span class="number">1</span>,op-ob,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><p>我们假设有这样一个n阶的可逆矩阵，例如</p><script type="math/tex; mode=display">2x+y-z =8(L_1)\\\\-3x-y+2z=-11(L_2)\\\\-2x+y+2z=-3(L_3)</script><p>这样的一个三元一次方程组写成矩阵的形式为</p><script type="math/tex; mode=display">\begin{bmatrix}2 & 1 & -1  &| &8 \\\\-3 & -1 & 2 & | & -11\\\\-2 & 1 & 2 & | & -3\end{bmatrix}</script><p>这个矩阵被称作增广矩阵（AUGMENTED MATRIX）,最后一列事实上不是系数矩阵而是常数。</p><p>这个矩阵可以经过这样的处理。</p><p>对于每一行要使得Aii≠0且Aji(j&gt;i)均为0,具体操作</p><p>1.来到当前行 以上方矩阵为例子，现在要处理第一行。我们先往下面找到绝对值最大的A(i,r),这里找到是-3,于是交换第1行和第2行.（矩阵变成这个样子，就是交换了一二两行）</p><script type="math/tex; mode=display">\begin{bmatrix}-3 & -1 & 2 & | & -11\\\\2 & 1 & -1  &| &8 \\\\-2 & 1 & 2 & | & -3\end{bmatrix}</script><p>对于L1，L2 将L1 <em> 3 +L2 </em> 2来加减消元，对于第三行，和第二行一样，直接与现在的L1操作。</p><p>将L2、L3的首项消成0后继续操作第二行。</p><script type="math/tex; mode=display">\begin{bmatrix}-3 & -1 & 2 & | & -11\\\\\space & \frac{1}{3} & \frac{1}{3}   & | &\frac{2}{3} \\\\\space & \frac{5}{3} & \frac{2}{3}   & | &\frac{13}{3} \\\\\end{bmatrix}</script><p>以此类推最终得到一个三角矩阵。</p><p>差不多就长这个样子。（滑稽</p><script type="math/tex; mode=display">\begin{bmatrix}-3 & -1 & 2 & | & -11\\\\\space & \frac{5}{3} & \frac{2}{3}   & | &\frac{13}{3} \\\\\space & \space & \frac{1}{5}   & | &-\frac{1}{5} \\\\\end{bmatrix}</script><p>这样其实最后一列已经告诉了我们z=-1。</p><p>自下向上迭代即可。</p><p>高斯消元代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss_Eli</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        num=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[j][i])&gt;<span class="built_in">fabs</span>(A[num][i]))</span><br><span class="line">            num=j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) swap(A[i][j],A[num][j]);</span><br><span class="line">        swap(b[num],b[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[j][i])&lt;=eps) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">double</span> t=A[j][i]/A[i][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">              A[j][k]-=A[i][k]*t;</span><br><span class="line">            b[j]-=b[i]*t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        ans[i]=b[i]/A[i][i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">          b[j]-=A[j][i]*ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于异或^方程组可以用bitset优化.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;250&gt;A[<span class="number">250</span>]; \\常数项b[i]贴在A[i][n+<span class="number">1</span>]中.</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss_Eli</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i][i]==<span class="number">0</span>)&#123;</span><br><span class="line">            num=i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">              <span class="keyword">if</span> (A[j][i]!=<span class="number">0</span>)&#123;num=j;<span class="keyword">break</span>;&#125;</span><br><span class="line">            swap(A[num],A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">          <span class="keyword">if</span> (A[j][i]!=<span class="number">0</span>) A[j]^=A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        ans[i]=A[i][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">          <span class="keyword">if</span> (A[j][i]!=<span class="number">0</span>)</span><br><span class="line">            A[j][n+<span class="number">1</span>]=A[j][n+<span class="number">1</span>]^ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>题目传送门:</p><p><a href="https://vjudge.net/problem/UVA-10870" target="_blank" rel="noopener">UVa-10870</a><br><a href="https://vjudge.net/problem/UVALive-3704" target="_blank" rel="noopener">LA-3704</a><br><a href="https://vjudge.net/problem/UVA-11542" target="_blank" rel="noopener">UVa-11542</a><br><a href="https://vjudge.net/problem/POJ-1222" target="_blank" rel="noopener">POJ-1222</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;矩阵&quot;&gt;&lt;a href=&quot;#矩阵&quot; class=&quot;headerlink&quot; title=&quot;矩阵&quot;&gt;&lt;/a&gt;矩阵&lt;/h2&gt;&lt;h3 id=&quot;矩阵的基本运算&quot;&gt;&lt;a href=&quot;#矩阵的基本运算&quot; class=&quot;headerlink&quot; title=&quot;矩阵的基本运算&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[UVa-10791 Minimum Sum LCM]</title>
    <link href="http://yoursite.com/2018/02/10/UVa-10791-Minimum-Sum-LCM/"/>
    <id>http://yoursite.com/2018/02/10/UVa-10791-Minimum-Sum-LCM/</id>
    <published>2018-02-10T05:50:21.000Z</published>
    <updated>2018-02-14T11:05:28.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVA-10791" target="_blank" rel="noopener">UVa-10791</a><br>题目大意:给出一个数N,要求出至少两个数以上的正整数,使得</p><script type="math/tex; mode=display">LCM(a_1,a_2, ...,a_k) = N</script><script type="math/tex; mode=display">并求出满足条件的最小的{\sum_{i=1}^{k}a_i}</script><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>12<br>10<br>5<br>0<br>Sample Output<br>Case 1: 7<br>Case 2: 7<br>Case 3: 6</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>还是应用唯一分解定理,不难发现。<br>对于任何一个质数或者对于一个只有单因子（除去1和它本身）的数，<br>其数列a只包含1和它本身<br>此时答案就为n+1.</p><p>对于一个合数n,总有</p><script type="math/tex; mode=display">N = \prod_{i=1}^{k}a_i^{p_i}</script><p>不难发现,当质因数分解时各个质因数的幂之间的gcd必定为1，这样的损耗代价是最小的。</p><p>所以求出各个ai和pi就可以gg了。</p><p>注意特判,数据范围内是int但是很可能会在计算过程中溢出。</p><p>开个long long比较保险。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL; </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> is_prime[<span class="number">56440</span>]; <span class="comment">//sqrt(2^31-1) 约等于 56340 </span></span><br><span class="line">LL prime[<span class="number">56440</span>],pf[<span class="number">56400</span>],cnt = <span class="number">0</span>,n;</span><br><span class="line">LL kase = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x+<span class="number">0.5</span>); i++)</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler_Prime</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">is_prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= x; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_prime[i]) prime[++cnt] = i;</span><br><span class="line"><span class="keyword">for</span> (LL j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= x; j++)</span><br><span class="line">&#123;</span><br><span class="line">is_prime[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Euler_Prime(<span class="number">56439</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n) == <span class="number">1</span> &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(pf,<span class="number">0</span>,<span class="keyword">sizeof</span>(pf));</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %lld: 2\n"</span>,++kase);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (check(n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %lld: %lld\n"</span>,++kase,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n % prime[i] == <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">LL ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n % prime[i] == <span class="number">0</span>) n/=prime[i],ret *= prime[i];</span><br><span class="line">ans += ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %lld: %lld\n"</span>,++kase,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVA-10791&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[UVa-10375] Choose and divide</title>
    <link href="http://yoursite.com/2018/02/10/UVa-10375-Choose-and-divide/"/>
    <id>http://yoursite.com/2018/02/10/UVa-10375-Choose-and-divide/</id>
    <published>2018-02-10T03:10:26.000Z</published>
    <updated>2018-02-14T11:05:28.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVA-10375" target="_blank" rel="noopener">UVa-10375</a><br>题目大意:给出p,q,r,s,求出C(p,q)/C(r,s)的值,其中p,q,r,s∈[1,10000]；且p &gt;= q,r &gt;= s;</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>10 5 14 9<br>93 45 84 59<br>145 95 143 92<br>995 487 996 488<br>2000 1000 1999 999<br>9998 4999 9996 4998<br>Sample Output<br>0.12587<br>505606.46055<br>1.28223<br>0.48996<br>2.00000<br>3.99960</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先预处理1W以内的质数集合prime[],<br>然后唯一分解定理,用pf[i]记录每个质数要乘或者除的个数,最后pow一遍即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[maxn],cnt = <span class="number">0</span>,pf[maxn];</span><br><span class="line"><span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler_Prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">is_prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_prime[i]) prime[++cnt] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i *prime[j] &lt;= x; j++)</span><br><span class="line">&#123;</span><br><span class="line">is_prime[i*prime[j]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(n % prime[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n /= prime[i];</span><br><span class="line">pf[i] += d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt;= n; q++)</span><br><span class="line">work(q,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Euler_Prime(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">int</span> p,q,r,s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;p,&amp;q,&amp;r,&amp;s) == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">memset</span>(pf,<span class="number">0</span>,<span class="keyword">sizeof</span>(pf));</span><br><span class="line">update(p,<span class="number">1</span>); update(q,<span class="number">-1</span>);update(p-q,<span class="number">-1</span>);</span><br><span class="line">update(r,<span class="number">-1</span>);update(s,<span class="number">1</span>); update(r-s,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">ans *= <span class="built_in">pow</span>(prime[i],pf[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.5lf\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVA-10375&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>UVa-11582-Fibonacci数列f(a^b)%n的值</title>
    <link href="http://yoursite.com/2018/02/09/UVa-11582-Fibonacci%E6%95%B0%E5%88%97f-a-b-n%E7%9A%84%E5%80%BC/"/>
    <id>http://yoursite.com/2018/02/09/UVa-11582-Fibonacci数列f-a-b-n的值/</id>
    <published>2018-02-09T11:50:20.000Z</published>
    <updated>2018-02-14T11:05:28.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVA-11582" target="_blank" rel="noopener">UVa-11582</a><br>题目大意:给出long long范围的a,b,n,求出f(a^b) % n的值,其中f(x)为Fibonacci数列的第x项.</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>3<br>1 1 2<br>2 3 1000<br>18446744073709551615 18446744073709551615 1000<br>Sample Output<br>1<br>21<br>250</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始的思路是利用Fibonacci的通项公式加上二项式定理来求出a^b%n的项<br>但是无奈推公式时推错而且发现a^b%n的值和f(a^b)%n毫无关系.<br>联想到fibonacci数列对一个数n取mod,可以由鸽巢原理证明,</p><script type="math/tex; mode=display">只要连续出现n^2个的mod值,必然会出现循环</script><p>于是就诞生了做法.<br>先找出最小循环节，在这个循环节中寻找f(a^b)的位置.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn*<span class="number">6</span>], period[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(ULL a, ULL b, <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = pow_mod(a, b/<span class="number">2</span>, n);</span><br><span class="line">k = k * k % n;</span><br><span class="line"><span class="keyword">if</span>(b % <span class="number">2</span>) k = k * a % n;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ULL a, ULL b, <span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> p = pow_mod(a % period[n], b, period[n]);</span><br><span class="line"><span class="keyword">return</span> f[n][p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);<span class="comment">//取消cin与scanf同步加快速度.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">2</span>; n &lt;= <span class="number">1000</span>; n++) </span><br><span class="line">&#123;</span><br><span class="line">f[n][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">f[n][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; ; i++) </span><br><span class="line">&#123;</span><br><span class="line">f[n][i] = (f[n][i<span class="number">-1</span>] + f[n][i<span class="number">-2</span>]) % n;</span><br><span class="line"><span class="keyword">if</span>(f[n][i<span class="number">-1</span>] == <span class="number">0</span> &amp;&amp; f[n][i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">period[n] = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ULL a, b;</span><br><span class="line"><span class="keyword">int</span> n, T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; solve(a, b, n) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVA-11582&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[UVa - 11426] Extreme GCD (II) 二维gcd求和问题</title>
    <link href="http://yoursite.com/2018/02/09/UVa-11426-Extreme-GCD-II-%E4%BA%8C%E7%BB%B4gcd%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/02/09/UVa-11426-Extreme-GCD-II-二维gcd求和问题/</id>
    <published>2018-02-09T08:47:26.000Z</published>
    <updated>2018-02-12T05:10:50.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVA-11426" target="_blank" rel="noopener">UVa-11426</a><br>大致意思:输入一个正整数n,要求在时限为10sec内求出</p><script type="math/tex; mode=display">\sum _ { i = 1 } ^ { N - 1 }  \sum _ { j = i + 1 } ^ { N }  GCD(i,j)</script><p>保证答案在long long范围内</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>10<br>100<br>200000<br>0</p><p>Sample Output<br>67<br>13015<br>143295493160</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>引理:<br>如果要满足gcd(x,n)=i,其充分必要条件为gcd(x/i,n/i) = 1.</p><p>可以肯定的是,如果一个一个地枚举i,j &lt;= n,时间复杂度为O(n^2)必然会T飞<br>我们可以设一个辅助函数 f(n) = gcd(1,n) + gcd(2,n) + …… + gcd(n-1,n);<br>那么答案S(n) = f(2) + f(3) + …… + f(n).<br>得出递推式<br>S(n) - S(n-1) = f(n).<br>∴问题转化为在线性时间内求出f(n)的大小.<br>可以发现,gcd(x,n) 因为 x &lt; n,所以gcd(x,n)一定是n的约数<br>如果能将这些约数分类,继续刚才的套路,再去设一个辅助函数g(n,i)表示<br>gcd(x,n) = i 的x的个数<br>可以发现,f(n)=sigma(i * g(n,i))其中保证i是n的因数<br>由引理,可知道满足条件的x/i有phi(n/i)个<br>∴g(n,i) = phi(n,i).</p><p>至此,我们已经可以在sqrt(n) * n的时间内计算出f(n).<br>上述算法的代码如下.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4000010</span>;</span><br><span class="line">LL phi[maxn],f[maxn],S[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phi_spawn</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(phi,<span class="number">0</span>,<span class="keyword">sizeof</span>(phi));</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; i++)</span><br><span class="line"><span class="keyword">if</span> (!phi[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= x; j+=i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!phi[j])</span><br><span class="line">phi[j] = j;</span><br><span class="line">phi[j] = phi[j] * (i<span class="number">-1</span>) / i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x+<span class="number">0.5</span>); i++)</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>) ret += i*phi[x/i];</span><br><span class="line"><span class="keyword">return</span> ret; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi_spawn(maxn);</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++)</span><br><span class="line">f[i] = calc(i);</span><br><span class="line">S[<span class="number">2</span>] = f[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= maxn; i++) S[i] = S[i<span class="number">-1</span>] + f[i];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) == <span class="number">1</span> &amp;&amp; n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,S[n]); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><del>但是在400W的数据下还是T飞了.</del>还是菜啊.</p><p>但尽管如此还是有很多的重复计算，为什么呢？我们在枚举因数的时候，有很多次重复，<br>但是如果枚举因数,计算它的倍数,这样就几乎是一个筛法式的求f[n],对于每个i枚举倍数去更新f(n)<br>这样的算法将会与素数筛法的算法时间复杂度同阶.</p><h2 id="正解代码"><a href="#正解代码" class="headerlink" title="正解代码"></a>正解代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4000010</span>;</span><br><span class="line">LL phi[maxn],f[maxn],S[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phi_spawn</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(phi,<span class="number">0</span>,<span class="keyword">sizeof</span>(phi));</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; i++)</span><br><span class="line"><span class="keyword">if</span> (!phi[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= x; j+=i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!phi[j])</span><br><span class="line">phi[j] = j;</span><br><span class="line">phi[j] = phi[j] * (i<span class="number">-1</span>) / i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi_spawn(maxn);</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>*i; j &lt;= maxn; j+=i)</span><br><span class="line">f[j] += i * phi[j/i];</span><br><span class="line"></span><br><span class="line">S[<span class="number">2</span>] = f[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= maxn; i++) S[i] = S[i<span class="number">-1</span>] + f[i];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) == <span class="number">1</span> &amp;&amp; n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,S[n]); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edited by karriganasta ❤ 20180209</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVA-11426&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>数论基础</title>
    <link href="http://yoursite.com/2018/02/08/%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/02/08/数论基础/</id>
    <published>2018-02-08T10:27:05.000Z</published>
    <updated>2018-02-11T15:52:03.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念及代码"><a href="#基本概念及代码" class="headerlink" title="基本概念及代码"></a>基本概念及代码</h2><h4 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h4><p>质数也称素数,即恰好包含两个不同因子的整数.（好智障啊）<br>1 不是质数.<br>判断单个数是否为质数.<br>如下.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x+<span class="number">0.5</span>); i++) <span class="comment">//用Sqrt(x+0.5)防止精度失真</span></span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次的时间复杂度为 O(sqrt(n)).</p><p>但是对于很N个数的质数表单个判断就很无力,因为同一个数的因数会被重复地判断</p><p>比如4被2筛去,但6还要再次被筛一遍.</p><p>所以就诞生了Euler大师的能保证每个数只被筛到一次的线性筛,能做到O(n).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">bool</span> is_prime[Maxn];</span><br><span class="line"><span class="keyword">int</span> prime[Maxn],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler_Prime</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">is_prime[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//1 不是质数. </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= s; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!is_prime[i]) prime[++cnt] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= s; j++)</span><br><span class="line">&#123;</span><br><span class="line">is_prime[prime[j] * i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//确保了每个合数只被他最小的质因数筛去.6啊</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Euler_Prime(Maxn);</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,is_prime[x]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Euclid算法"><a href="#Euclid算法" class="headerlink" title="Euclid算法."></a>Euclid算法.</h4><p>最简单的是欧氏的辗转相除求最大公约数(gcd)的方法.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (y == <span class="number">0</span>) ? x : gcd(y,x%y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>会不会爆栈呢?不会,可以证明,gcd的递归层数不超过4.785lgN + 1.6723(紫书P311)</p><p>对于任意的x,y,有lcm(x,y) <em> gcd(x,y) = x</em>y; 证明略请自行百度</p><h4 id="Extended-Euclid算法"><a href="#Extended-Euclid算法" class="headerlink" title="Extended Euclid算法"></a>Extended Euclid算法</h4><p>找出一对整数x,y要求能够使得ax+by = gcd(a,b) 且使得|x| +|y|尽可能的小.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ex_gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;d,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)&#123;d = a;x = <span class="number">1</span>;y = <span class="number">0</span>;&#125; </span><br><span class="line"><span class="comment">//如果b = 0，那么就是ax = d，令x = 1,y = 0即可</span></span><br><span class="line"><span class="keyword">else</span> &#123;ex_gcd(b,a%b,d,y,x) y-=x*(a/b);&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="欧拉phi-φ函数"><a href="#欧拉phi-φ函数" class="headerlink" title="欧拉phi  φ函数"></a>欧拉phi  φ函数</h4><p>公式如下</p><script type="math/tex; mode=display">\varphi (n) = n\prod_{i=1}^k(1-\frac{1}{p_i})</script><p>单个欧拉函数可以这样求:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler_phi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = ans * (i<span class="number">-1</span>)/i;</span><br><span class="line"><span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以Euler的质数筛 可以类比算出欧拉函数,时间复杂度也为O(n).<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phi_table</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) phi[i] = <span class="number">0</span>;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span> (!phi[i])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j+=i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!phi[j])</span><br><span class="line">phi[j] = j;</span><br><span class="line">phi[j] = phi[j] / i * (i<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="中国剩余定理（孙子定理）"><a href="#中国剩余定理（孙子定理）" class="headerlink" title="中国剩余定理（孙子定理）"></a>中国剩余定理（孙子定理）</h4><p>问题：今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？</p><p>说明白一点就是说，存在一个数x，除以3余2，除以5余三，除以7余二，然后求这个数。上面给出了解法。再明白这个解法的原理之前，需要先知道一下两个定理。</p><p>定理1：几个数相加，如果存在一个加数，不能被数a整除，那么它们的和，就不能被整数a整除。</p><p>定理2：两数不能整除，若除数扩大（或缩小）了几倍，而被除数不变，则其商和余数也同时扩大（或缩小）相同的倍数（余数必小于除数）。</p><p>现给出求解该问题的具体步骤：</p><p>1、求出最小公倍数</p><p> lcm=3<em>5</em>7=105</p><p>2、求各个数所对应的基础数</p><p>（1）105÷3=35</p><p> 35÷3=11……2 //基础数35</p><p>（2）105÷5=21</p><p> 21÷5=4……1</p><p> 定理2把1扩大3倍得到3，那么被除数也扩大3倍，得到21 * 3=63//基础数63</p><p>3、105÷7=15</p><p>15÷7=2……1</p><p>定理2把1扩大2倍得到2，那么被除数也扩大2倍，得到15 * 2=30//基础数30</p><p>把得到的基础数加和（注意：基础数不一定就是正数）</p><p>35+63+30=128</p><p>4、减去最小公倍数lcm（在比最小公倍数大的情况下）</p><p>x=128-105=23</p><p>那么满足题意得最小的数就是23了。一共有四个步骤。下面详细解释每一步的原因。</p><p>（1）最小公倍数就不用解释了，跳过（记住，这里讨论的都是两两互质的情况）</p><p>（2）观察求每个数对应的基础数时候的步骤，比如第一个。105÷3=35。显然这个35是除了当前这个数不能整除以外都能够被其他数整除，就是其他数的最小公倍数。相当于找到了最小的开始值，用它去除以3发现正好余2。那么这个基础数就是35。记住35的特征，可以整除其他数但是不能被3整除，并且余数是2。体现的还不够明显，再看下5对应的基础数。21是其他数的最小公倍数，但是不能被5整除，用21除以5得到的余数是1，而要求的数除以5应该是余1的。所以余数被扩大，就得到了相应的基础数63。记住这个数的特征，可以被其他数整除但是被5除应该余三。同理，我们得到了第三个基础数23，那么他的特征就是：可以被其他数整除，但是不能被7整除，并且余数为2。</p><p>（3）第三步基础数加和，为什么要这样做呢？利用就是上面提到的定理1。</p><p>35+63+30=128。对于3来说，可以把63+30的和看作一个整体，应该他们都可以被3整除。看着上面写出的三个数的特征，运用定理1来说，就是在35的基础上加上一个可以被3整除的倍数，那么得到的结果依然还是满足原先的性质的，就是128除以同样还是余2的。同理，对于5还说，这个数被除之后会剩余3；对于7来说，被除之后剩余2。所以说，我们当前得到的这个数是满足题目要求的一个数。但是这个数是不是最小的，那就不一定了。</p><p>（4）应该不能确定是不是最小的数，这个时候就要用到他们的最小公倍数了。最小公倍数顾名思义，一定是一个同时被几个数整除的最小的一个数，所以减去它剩余下来的余数还是符合题意要求的。当然也同样可以运用定理1来解释，只不过是加法变成了减法，道理还是一样的。当然具体要不要剪还是要看和lcm的大小关系的。</p><p>稍微的总结一下：就是已知m1,m2,m3是两两互质的正整数，求最小的正整数x，使它被m1,m2,m3除所得的余数分别是c1,c2,c3。孙子定理的思想便是线分别求出被其中数mi整除余1而被两外两个数整除的数Mi(i=1,2,3)，则所求数之一的便是c1M1+c2M2+c3M3。由此我们可以得到n个两两互质数的情况。证明上面已经一步一步给出。</p><p>那么，到此为止基本的中国剩余定理的内容我们以及了解了，包括解答方法。那么如何编码呢？按照上面这个思路去编码，其实并不难。一共分为四大步。但是，大多数人的困惑在于如何求取基础数。这里呢，提供两种方法：</p><p>（1）第一种就是一直递增，直到找到。例如：3的基础数，35是其他数的最小公倍数。那么就从35开始，一直自增，知道余数为2，便停止（利用while循环）。</p><p>（2）第二种方法呢就是辗转相除法上得来的。这里的例子体现的不够明显，应当看看去求取乘法逆元的过程，下面讲的内容和乘法逆元有很大的关系，所以还是看看的好。简单举个例子：</p><p>假设现在三个数分别是14，3，5，它们两两互质，且要求的数除以5余3。求5对应的基础数。有：</p><p>42÷5=8……2</p><p>5÷2=2……1</p><p>所以1=5 - 2 <em> 2=5 - 2 </em> （42- 8 <em> 5 ）=-2 </em> 42+17 * 5</p><p>那么-2 <em> 42=-84  17 </em> 5=85  -84+85=1</p><p>把1扩大3倍变成3，则有-84 * 3=-252也就是5对应的基础数。</p><p>第一点： 基础数可以是负数，这个之前点到过。//并且下面的解法就是有这样的。</p><p>第二点： 当得到余数为1的时候后面的算式相当于是一个回溯的过程，最后解到-2 * 42。 但是还只不过是余数是1的情况对应的数，再运用定理2我们就得到了-252这个基础数。实际上要是看过乘法逆元，这里实际就是乘法逆元的求解过程，而-2也就是42关于15取模的乘法逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//扩展欧几里得算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;d,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;d=a;x=<span class="number">1</span>,y=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        exgcd(b,a%b,d,y,x);</span><br><span class="line">        y-=(a/b)*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中国剩余定理 </span></span><br><span class="line"><span class="function">ll <span class="title">China</span><span class="params">(<span class="keyword">int</span> n,ll *m,ll *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll M=<span class="number">1</span>,d,y,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) M*=m[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        ll w=M/m[i];</span><br><span class="line">        gcd(m[i],w,d,d,y);</span><br><span class="line">        x=(x+y*w*a[i])%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (x+M)%M;</span><br><span class="line">&#125;</span><br><span class="line">ll m[<span class="number">15</span>],a[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;m[i],&amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,China(n,m,a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目传送门<br><a href="https://vjudge.net/problem/UVA-11426" target="_blank" rel="noopener">UVa-11426</a><br><a href="https://vjudge.net/problem/UVA-11582" target="_blank" rel="noopener">UVa-11582</a><br><a href="https://vjudge.net/problem/UVA-10375" target="_blank" rel="noopener">UVa-10375</a><br><a href="https://vjudge.net/problem/UVA-10791" target="_blank" rel="noopener">UVa-10791</a></p><p>Last edited - 2018-02-08 karriganasta ❤</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念及代码&quot;&gt;&lt;a href=&quot;#基本概念及代码&quot; class=&quot;headerlink&quot; title=&quot;基本概念及代码&quot;&gt;&lt;/a&gt;基本概念及代码&lt;/h2&gt;&lt;h4 id=&quot;质数&quot;&gt;&lt;a href=&quot;#质数&quot; class=&quot;headerlink&quot; title=&quot;质
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
