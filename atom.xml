<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  <subtitle>infinite OI road.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-28T12:44:36.288Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>karriganasta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Treap/Splay/Scapegoat 学习笔记&amp;板子</title>
    <link href="http://yoursite.com/2018/03/28/Treap-Splay-Scapegoat-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9D%BF%E5%AD%90/"/>
    <id>http://yoursite.com/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/</id>
    <published>2018-03-28T12:35:45.000Z</published>
    <updated>2018-03-28T12:44:36.288Z</updated>
    
    <content type="html"><![CDATA[<p>先祝贺岁纳京子Toshinou Kyouko生快!</p><p><img src="/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/DZW-modW0AE-L0E.jpg" alt="Toshinou Kyouko Senpai"></p><p><img src="/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/DZTl7-EU0AApZ7Z.jpg" alt="Toshinou Kyouko"></p><p>啊啊啊啊啊啊可爱死了~~</p><p>彩笔调了一个多小时的Treap…也是没谁了..我好菜啊</p><p>先丢两个板子..Splay明天写.</p><h3 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m     操作有m个</span></span><br><span class="line"><span class="comment">// 1 x   插入元素x</span></span><br><span class="line"><span class="comment">// 2 x   删除元素x。如果成功，输入1，否则输出0</span></span><br><span class="line"><span class="comment">// 3 k   输出值x的“名次”，即比x小的结点个数加1</span></span><br><span class="line"><span class="comment">// 4 x   第k小元素。k=1为最小元素</span></span><br><span class="line"><span class="comment">// 5 x   prefix of x</span></span><br><span class="line"><span class="comment">// 6 x   suffix of x</span></span><br><span class="line"><span class="comment">// ... to be continued ...</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">Node *ch[<span class="number">2</span>]; <span class="comment">// 左右子树</span></span><br><span class="line"><span class="keyword">int</span> r; <span class="comment">// 随机优先级</span></span><br><span class="line"><span class="keyword">int</span> v; <span class="comment">// 值</span></span><br><span class="line"><span class="keyword">int</span> s; <span class="comment">// 结点总数</span></span><br><span class="line">Node(<span class="keyword">int</span> v = <span class="number">0</span>):v(v) &#123;</span><br><span class="line">ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">r = rand();</span><br><span class="line">s = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == v) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> x &lt; v ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>] != <span class="literal">NULL</span>) s += ch[<span class="number">0</span>]-&gt;s;</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">1</span>] != <span class="literal">NULL</span>) s += ch[<span class="number">1</span>]-&gt;s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">Node* k = o-&gt;ch[d^<span class="number">1</span>];</span><br><span class="line">o-&gt;ch[d^<span class="number">1</span>] = k-&gt;ch[d];</span><br><span class="line">k-&gt;ch[d] = o;</span><br><span class="line">o-&gt;maintain();</span><br><span class="line">k-&gt;maintain();</span><br><span class="line">o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span>) o = <span class="keyword">new</span> Node(x);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> d = (x &lt; o-&gt;v ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">insert(o-&gt;ch[d], x);</span><br><span class="line"><span class="keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o, d^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">o-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node* <span class="title">find</span><span class="params">(Node* o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(x == o-&gt;v) <span class="keyword">return</span> o;</span><br><span class="line"><span class="keyword">return</span> x &lt; o-&gt;v ? find(o-&gt;ch[<span class="number">0</span>], x) : find(o-&gt;ch[<span class="number">1</span>], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node* &amp;o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = o-&gt;cmp(x);</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">-1</span>) &#123;</span><br><span class="line">Node* u = o;</span><br><span class="line"><span class="keyword">if</span>(o-&gt;ch[<span class="number">0</span>] != <span class="literal">NULL</span> &amp;&amp; o-&gt;ch[<span class="number">1</span>] != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> d2 = (o-&gt;ch[<span class="number">0</span>]-&gt;r &gt; o-&gt;ch[<span class="number">1</span>]-&gt;r ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">rotate(o, d2);</span><br><span class="line">remove(o-&gt;ch[d2], x);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span>) o = o-&gt;ch[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> o = o-&gt;ch[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">delete</span> u;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">remove(o-&gt;ch[d], x);</span><br><span class="line"><span class="keyword">if</span>(o != <span class="literal">NULL</span>) o-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(Node* o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span> || k &lt;= <span class="number">0</span> || k &gt; o-&gt;s) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s = (o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">0</span> : o-&gt;ch[<span class="number">0</span>]-&gt;s);</span><br><span class="line"><span class="keyword">if</span>(k == s+<span class="number">1</span>) <span class="keyword">return</span> o-&gt;v;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k &lt;= s) <span class="keyword">return</span> kth(o-&gt;ch[<span class="number">0</span>], k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> kth(o-&gt;ch[<span class="number">1</span>], k-s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node* o, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= o-&gt;v) <span class="keyword">return</span> rank(o-&gt;ch[<span class="number">0</span>], x);</span><br><span class="line"><span class="keyword">return</span> rank(o-&gt;ch[<span class="number">1</span>], x) + (o-&gt;ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">0</span> : o-&gt;ch[<span class="number">0</span>]-&gt;s) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prefix</span><span class="params">(Node *o, <span class="keyword">int</span> k,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (o == <span class="literal">NULL</span>) <span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">if</span> (k &gt; o-&gt;v) <span class="keyword">return</span> prefix(o-&gt;ch[<span class="number">1</span>],k,o-&gt;v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> prefix(o-&gt;ch[<span class="number">0</span>],k,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">suffix</span><span class="params">(Node *o, <span class="keyword">int</span> k,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (o == <span class="literal">NULL</span>) <span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">if</span> (k &lt; o-&gt;v) <span class="keyword">return</span> suffix(o-&gt;ch[<span class="number">0</span>],k,o-&gt;v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> suffix(o-&gt;ch[<span class="number">1</span>],k,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void dfs(Node *o)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (o == NULL) return ;</span></span><br><span class="line"><span class="comment">printf("%d\n",o-&gt;v);</span></span><br><span class="line"><span class="comment"> printf("LC of %d:\n",o-&gt;v);dfs(o-&gt;ch[0]);</span></span><br><span class="line"><span class="comment"> printf("RC of %d:\n",o-&gt;v); dfs(o-&gt;ch[1]);</span></span><br><span class="line"><span class="comment">printf("EO %d!\n\n",o-&gt;v); </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">srand(<span class="keyword">int</span>(time(<span class="literal">NULL</span>)));</span><br><span class="line"><span class="keyword">int</span> m, c, v;</span><br><span class="line">Node* root = <span class="keyword">new</span> Node(INF);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;v);</span><br><span class="line"><span class="keyword">if</span>(c == <span class="number">1</span>) insert(root, v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">2</span>) &#123;</span><br><span class="line">Node* o = find(root, v);</span><br><span class="line"><span class="keyword">if</span>(o != <span class="literal">NULL</span>) remove(root, v);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rank(root, v));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kth(root,v));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prefix(root,v,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,suffix(root,v,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scapegoat"><a href="#Scapegoat" class="headerlink" title="Scapegoat"></a>Scapegoat</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha=<span class="number">0.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scapegoat</span>&#123;</span></span><br><span class="line">    scapegoat *l,*r;</span><br><span class="line">    <span class="keyword">int</span> val,size,cnt;</span><br><span class="line">    <span class="keyword">bool</span> deleted;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_bad</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (l-&gt;cnt &gt; alpha*cnt+<span class="number">5</span> || r-&gt;cnt &gt; alpha*cnt+<span class="number">5</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>&#123;size=!deleted+l-&gt;size+r-&gt;size; cnt=<span class="number">1</span>+r-&gt;cnt+l-&gt;cnt;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">scapegoat *null;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(scapegoat *o,<span class="built_in">vector</span>&lt;scapegoat*&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o == null) <span class="keyword">return</span>;</span><br><span class="line">    dfs(o-&gt;l,v);</span><br><span class="line">    <span class="keyword">if</span>(!o-&gt;deleted) v.push_back(o);</span><br><span class="line">    dfs(o-&gt;r,v);</span><br><span class="line">    <span class="keyword">if</span>(o-&gt;deleted) <span class="keyword">delete</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">scapegoat *<span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;scapegoat*&gt; &amp;v,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> null;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    scapegoat *o = v[mid];</span><br><span class="line">    o-&gt;l = build(v,l,mid);</span><br><span class="line">    o-&gt;r = build(v,mid+<span class="number">1</span>,r);</span><br><span class="line">    o-&gt;maintain();</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(scapegoat* &amp;o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;scapegoat*&gt; v;</span><br><span class="line">    dfs(o,v);</span><br><span class="line">    o = build(v,<span class="number">0</span>,v.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,scapegoat* &amp;o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o==null)</span><br><span class="line">    &#123;</span><br><span class="line">        o=<span class="keyword">new</span> scapegoat;</span><br><span class="line">        o-&gt;l=o-&gt;r=null;</span><br><span class="line">        o-&gt;deleted=<span class="literal">false</span>;</span><br><span class="line">        o-&gt;size=o-&gt;cnt=<span class="number">1</span>;</span><br><span class="line">        o-&gt;val=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++o-&gt;size;</span><br><span class="line">        ++o-&gt;cnt;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=o-&gt;val)</span><br><span class="line">            insert(x,o-&gt;r);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            insert(x,o-&gt;l);</span><br><span class="line">        <span class="keyword">if</span>(o-&gt;is_bad())rebuild(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(scapegoat *now,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(now!=null)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(now-&gt;val&gt;=x)now=now-&gt;l;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans+=now-&gt;l-&gt;size+!now-&gt;deleted;</span><br><span class="line">                now=now-&gt;r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(scapegoat *now,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(now!=null)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!now-&gt;deleted &amp;&amp; now-&gt;l-&gt;size+<span class="number">1</span>==x)</span><br><span class="line">            <span class="keyword">return</span> now-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;l-&gt;size&gt;=x)now=now-&gt;l;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                x-=now-&gt;l-&gt;size+!now-&gt;deleted;</span><br><span class="line">                now=now-&gt;r;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(scapegoat *o,<span class="keyword">int</span> rk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!o-&gt;deleted &amp;&amp; rk==o-&gt;l-&gt;size+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        o-&gt;deleted=<span class="number">1</span>;</span><br><span class="line">        --o-&gt;size;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --o-&gt;size;</span><br><span class="line">    <span class="keyword">if</span>(rk&lt;=o-&gt;l-&gt;size+!o-&gt;deleted)</span><br><span class="line">        erase(o-&gt;l,rk);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        erase(o-&gt;r,rk-o-&gt;l-&gt;size-!o-&gt;deleted);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> negativ = <span class="number">1</span>;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c == <span class="string">'-'</span>) negativ = <span class="number">-1</span>; c = getchar();&#125; </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;a = a*<span class="number">10</span>+c-<span class="string">'0'</span>;c = getchar();&#125;</span><br><span class="line">    a *= negativ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scapegoat *root;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    null = <span class="keyword">new</span> scapegoat;</span><br><span class="line">    root = null;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op,x;</span><br><span class="line">        read(op); read(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)insert(x,root);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>)erase(root,rank(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rank(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(root,x));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">5</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(root,rank(root,x)<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">6</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(root,rank(root,x+<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先祝贺岁纳京子Toshinou Kyouko生快!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/28/Treap-Splay-Scapegoat-学习笔记-板子/DZW-modW0AE-L0E.jpg&quot; alt=&quot;Toshinou Kyouko Senpai&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Atcoder Regular Contest arc 091-092 切(W)题(A)记</title>
    <link href="http://yoursite.com/2018/03/27/Atcoder-Regular-Contest-arc-091-092-%E5%88%87-W-%E9%A2%98-A-%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/27/Atcoder-Regular-Contest-arc-091-092-切-W-题-A-记/</id>
    <published>2018-03-27T03:26:45.000Z</published>
    <updated>2018-03-27T08:57:13.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>上午闲着没事就找了点Atcoder的（水）题切切, 顺便过一下博弈和SG函数。</p><h4 id="Atcoder-Regular-Contest-091-C-Flip-Flip-and-Flip"><a href="#Atcoder-Regular-Contest-091-C-Flip-Flip-and-Flip" class="headerlink" title="Atcoder Regular Contest 091 C Flip,Flip,and Flip"></a>Atcoder Regular Contest 091 C Flip,Flip,and Flip</h4><p><a href="https://arc091.contest.atcoder.jp/tasks/arc091_a#" target="_blank" rel="noopener">ARC 091C</a></p><p>問題文</p><p>縦横に無限に広がるマス目があり、そのうちの連続する <em>N</em> 行 <em>M</em> 列の領域のすべてのマスに表裏の区別できるカードが置かれています。 最初はすべてのカードが表を向いています。</p><p>以下の操作を、カードが置かれている全てのマスについて 1 度ずつ行います。</p><ul><li>そのマスと辺または点で接する 8 つのマスと、そのマスの合計 9 マスについて、カードが存在するなら裏返す。</li></ul><p>すべての操作を行った後の各カードの状態は操作を行う順番に依らないことが証明できます。 すべての操作を行った後、裏を向いているカードの枚数を求めてください。</p><p>大意</p><p>问题陈述有无限长度和宽度的正方形展开，并且可以区分正面和背面的牌被放置在连续的n行和m列中的所有单元中。最初所有牌都面朝桌子。对于放置卡的每个方块执行一次以下操作。如果有8个方格邻接那个正方形和边或者点，并且如果有一张卡，则总共9个方格。您可以证明执行所有操作后每张卡的状态不取决于操作顺序。完成所有操作后，请找到背面的卡片数量。</p><p>注意细节特判1,1的情况.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(), m = read();</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> &amp;&amp; m == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,m<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n*m-(n+m)*<span class="number">2</span>+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Atcoder-Regular-Contest-091-D-Remainder-Reminder"><a href="#Atcoder-Regular-Contest-091-D-Remainder-Reminder" class="headerlink" title="Atcoder Regular Contest 091 D Remainder Reminder"></a>Atcoder Regular Contest 091 D Remainder Reminder</h4><p><a href="https://arc091.contest.atcoder.jp/tasks/arc091_b" target="_blank" rel="noopener">ARC 091D</a></p><h3 id="問題文"><a href="#問題文" class="headerlink" title="問題文"></a>問題文</h3><p>高橋君は、<em>N</em> 以下の正の整数の 2 つ組 (<em>a</em>,<em>b</em>) を持っていましたが、忘れてしまいました。 高橋君は、<em>a</em> を <em>b</em> で割ったあまりが <em>K</em> 以上であったことを覚えています。 高橋君が持っていた組としてあるうるものの個数を求めてください。</p><h3 id="制約"><a href="#制約" class="headerlink" title="制約"></a>制約</h3><ul><li>1≤<em>N</em>≤105</li><li>0≤<em>K</em>≤<em>N</em>−1</li><li>入力は全て整数である</li></ul><p>大意</p><p>给出限制$N,K$,求满足</p><script type="math/tex; mode=display">a,b \leq N,令a\equiv x(mod \space b),K\leq x\leq b-1的方案数</script><p>考虑b的范围为$[K+1,N]$</p><p>直接枚举b,然后算出对应范围下的$x$个数，但是注意xmax后有一部分剩余.</p><p>注意细节。（我特么WA了两次啊真彩笔）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> N = read(),K = read();</span><br><span class="line"><span class="keyword">if</span> (K == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">N *= N;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; N;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = K+<span class="number">1</span>; b &lt;= N; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xmax = (N)/(b);</span><br><span class="line"><span class="comment">//cout &lt;&lt; xmax &lt;&lt; " # " &lt;&lt; "\n"; </span></span><br><span class="line">ans += xmax * (b-K);</span><br><span class="line">ans += max(<span class="number">0L</span>L,(N - b * xmax) - K + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Atcoder-Regular-Contest-091-F-Strange-Nim"><a href="#Atcoder-Regular-Contest-091-F-Strange-Nim" class="headerlink" title="Atcoder Regular Contest 091 F Strange Nim"></a>Atcoder Regular Contest 091 F Strange Nim</h4><p><a href="https://arc091.contest.atcoder.jp/tasks/arc091_d" target="_blank" rel="noopener">ARC 091F</a></p><h3 id="問題文-1"><a href="#問題文-1" class="headerlink" title="問題文"></a>問題文</h3><p>高橋君と青木君は、石取りゲームをしています。最初、山が <em>N</em> 個あり、<em>i</em> 個目の山には <em>A**i</em> 個の石があり、整数 <em>K**i</em> が定まっています。</p><p>高橋君と青木君は、高橋君から始めて、交互に以下の操作を繰り返します。</p><ul><li>山を 1 つ選ぶ。<em>i</em> 個目の山を選び、その山に <em>X</em> 個の石が残っている場合、1 個以上 <em>floor</em>(<em>X</em>⁄<em>K**i</em>) 個以下の任意の個数の石を <em>i</em> 個目の山から取り除く。</li></ul><p>先に操作ができなくなったプレイヤーが負けです。両者最善を尽くしたとき、どちらのプレイヤーが勝つか判定してください。 ただし、<em>floor</em>(<em>x</em>) で <em>x</em> 以下の最大の整数を表します。</p><p>大意:</p><p>给n堆石子，每堆有一开始有ai个和一个常数ki。两个人轮流操作，每个人每轮可以选一堆石子，然后在其中取走1到$\large\frac{a_i}{k_i}$,谁不能操作就算输，问先手必胜还是后手必胜。 </p><p>SG函数+暴力</p><p>不难发现SG函数递推式$SG(x) = SG(x-x/k-1)$</p><p>因为每一次k都是恒等的，考虑直接一步用取模跳到就行，不然T飞。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"Takahashi"</span>,s2 = <span class="string">"Aoki"</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>; <span class="keyword">char</span> ch = <span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = <span class="built_in">cin</span>.get();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = <span class="built_in">cin</span>.get();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> n = read();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = read() , k = read();</span><br><span class="line"><span class="keyword">while</span>((x%k)) x -= ((x%k<span class="number">-1</span>)/(x/k+<span class="number">1</span>)+<span class="number">1</span>) * (x/k+<span class="number">1</span>);</span><br><span class="line">ans ^= x/k; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans) <span class="built_in">cout</span> &lt;&lt; s1;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; s2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;上午闲着没事就找了点Atcoder的（水）题切切, 顺便过一下博弈和SG函数。&lt;/p&gt;
&lt;h4 id=&quot;Atcoder-Regular-Co
      
    
    </summary>
    
      <category term="Atcoder" scheme="http://yoursite.com/categories/Atcoder/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>生成函数学习笔记[干货]</title>
    <link href="http://yoursite.com/2018/03/09/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B2%E8%B4%A7/"/>
    <id>http://yoursite.com/2018/03/09/生成函数学习笔记-干货/</id>
    <published>2018-03-09T00:16:36.000Z</published>
    <updated>2018-03-09T08:06:03.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>生成函数算是一种<del>既简单又有用</del>的数学方法,一般用来解决组合技术问题,而且是一种最重要的一般性处理方法.</p><p><strong>填完坑再划</strong></p><a id="more"></a><p>主要参考资料:&lt;组合数学引论(中科大)&gt;</p><h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><p>对于一个有限数列或者无限数列</p><script type="math/tex; mode=display">\{ a_0,a_1,a_2,... \}</script><p>我们用幂级数</p><script type="math/tex; mode=display">A(x) = a_0+a_1x+a_2x^2+...\\\\=\sum_{i=0}^{\infty}a_ix^i</script><p>来使之为一个整体，我们相当于用这样的一个我们自己构造出来的函数去研究整个函数的性质。 而不必单个地研究.特别地,我们把$A(x)$称为该序列的生成函数,记为$G{a_n }$.</p><p>对于特殊情况比如组合数列</p><script type="math/tex; mode=display">\{  \binom{n}{0}\binom{n}{1},\cdot\cdot\cdot,\binom{n}{n}\}</script><p>根据上述的定义,令其生成函数为$f_n(x)$,则有</p><script type="math/tex; mode=display">f_n(x)=\binom{n}{0}+\binom{n}{1}x+\cdot\cdot\cdot+\binom{n}{n}x^n</script><p>由二项式定理不难得到</p><script type="math/tex; mode=display">f_n(x)=(1+x)^n</script><p>那么就可以对这个玩意进行单独研究了比如我们假设要求</p><p>​p><script type="math/tex; mode=display">\sum_{i=0}^n\binom{n}{i}</script><p>实际上就是$x=1$的情况.代入后就是$2^n$.</p><p>或者再比如求</p><script type="math/tex; mode=display">\sum_{i=1}^ni\binom{n}{i}\\\\</script><p>hjq瞬间用组合意义秒掉.%%%%%</p><p>这个式子,相当于在$n$个球中选出$i$个并且给之中的一个染色的数量</p><p>那么先染一个再选择显然是等价的.所以就是下面的式子了.</p><p>用二项式的话用容斥原理不难得到</p><script type="math/tex; mode=display">\sum_{i=1}^ni\binom{n}{i}\\\\=n \times 2^{n-1}</script><p>由恒等式</p><script type="math/tex; mode=display">(1+x)^{m+n}=(1+x)^m(1+x)^n\\\\\longrightarrow\space\binom{m+n}{r} = \sum_{k=0}^r\binom{m}{k}\binom{n}{r-k}</script><p><strong>好了上面都是玩泥巴~~</strong></p><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p>丢一个栗子</p><p>假设你有一个正常的骰子（六个面的那种），且掷出每个面的概率近似认为相等（$\frac{1}{6}$）.</p><p>连续丢出两次,问掷出和为10的概率为多少？</p><p><strong>答:你怕不是个zz吧,这么简单的问题你也敢问？</strong></p><p>好,连续丢出十次,问掷出和为30的概率为多少？</p><p><strong>没话说了吧</strong></p><p><strong>解：</strong></p><p>用生成函数的思想来，把每一个和看作关于点数(1,2,3,4,5,6)的多项式乘积.</p><p>也就是$x+x^2+x^3+x^4+x^5+x^6$.</p><p>那么,关于第二个问题,转换为</p><script type="math/tex; mode=display">(x+x^2+x^3+x^4+x^5+x^6)^{10}</script><p>上述这个式子中,问你$x^{30}$的系数。</p><p>还是很难做对不对,考虑化简</p><script type="math/tex; mode=display">(x+x^2+x^3+x^4+x^5+x^6)^{10}\\\\=(x(1+x+x^2+x^3+x^4+x^5))^{10}\\\\发现x=-1是原式因式.\\\\一顿大除法.\\\\\longrightarrow\space=[(x^2+x+1)(x^2-x+1)]^{10}\times x^{10} \times (x+1)^{10}</script><p>好的我们头皮发麻而且发现这个式子对我们最终计算$x^{30}$的系数没有任何的卵用.</p><p>为什么？因为我们不会三项式展开，但是如果不进行因式分解项数肯定会更大我们更不会算！</p><p>考虑反过来,如果把原式写成两个二项式的商也可以.</p><script type="math/tex; mode=display">(1+x+x^2+x^3+x^4+x^5)\\\\=\frac{(1-x^6)}{1-x}\\\\那么原来的式子(x+x^2+x^3+x^4+x^5+x^6)^{10}\\\\=x^{10}(1-x^6)^{10}(1-x)^{-10}\\\\扔上二项式定理\\\\又因为10次是偶数次,(1-x^6)写成(x^6-1)，后面的同理\\\\\rightarrow x^{10}\times\sum_{i=0}^{10}(-1)^i\binom{10}{i}x^{6i}\times\sum_{k=0}^{\infty}\binom{10+k-1}{k}x^k</script><p>好了把前面的$x^{10}$扔掉后面的构造出i,k满足x的次数为20就行辣.</p><p>一共i只可能取0,1,2,3枚举就行.</p><p>答案似乎长这个样子</p><script type="math/tex; mode=display">\binom{29}{20}-\binom{10}{1}\binom{23}{14}+\binom{17}{8}\binom{10}{2}-\binom{10}{3}\binom{11}{2}</script><p>反正我是懒得算答案了.</p><h3 id="生成函数的性质"><a href="#生成函数的性质" class="headerlink" title="生成函数的性质"></a>生成函数的性质</h3><h4 id="生成函数的形式导数"><a href="#生成函数的形式导数" class="headerlink" title="生成函数的形式导数"></a>生成函数的形式导数</h4><p><strong>定义</strong></p><script type="math/tex; mode=display">\forall A(x)=\sum_{k=0}^{\infty}a_kx^k \in R[[x]]\\\\定义DA\equiv\sum_{k=1}^{\infty}ka_kx^{k-1}\\\\称作A(x)在R[[x]]上的形式导数.</script><p>形式导数的运算法则和普通导数差不多.</p><p>加法则乘法则都满足的.但是似乎没有对链导法则的定义.</p><h4 id="生成函数主要常用性质"><a href="#生成函数主要常用性质" class="headerlink" title="生成函数主要常用性质"></a>生成函数主要常用性质</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h2&gt;&lt;p&gt;生成函数算是一种&lt;del&gt;既简单又有用&lt;/del&gt;的数学方法,一般用来解决组合技术问题,而且是一种最重要的一般性处理方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;填完坑再划&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[SCOI-2012] 喵星球上的点名 AC自动姬+map</title>
    <link href="http://yoursite.com/2018/03/08/SCOI-2012-%E5%96%B5%E6%98%9F%E7%90%83%E4%B8%8A%E7%9A%84%E7%82%B9%E5%90%8D-AC%E8%87%AA%E5%8A%A8%E5%A7%AC-map/"/>
    <id>http://yoursite.com/2018/03/08/SCOI-2012-喵星球上的点名-AC自动姬-map/</id>
    <published>2018-03-08T11:54:34.000Z</published>
    <updated>2018-03-08T12:51:33.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2754" target="_blank" rel="noopener">BZOJ-2754</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>直接暴力对每个串开个map建AC自动姬.</p><p>写起来其实不难的,思维难度也不是很高.主要的技巧在于常数的处理.</p><p>看上去空间爆炸但是居然过了!!</p><p>LUOGU好像加了一组恶心数据卡掉了这种<del>辣鸡</del>做法</p><p>好吧其实正解好像要用到主席树可惜我还不会.</p><p>菜啊 qwq</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RG register</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,ans1[maxn],ans2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a[maxn&lt;&lt;<span class="number">1</span>],status[maxn],V,M;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn],mk[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;to[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Aho_Corasick</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt,ans;</span><br><span class="line">    <span class="keyword">int</span> fail[maxn],q[maxn];</span><br><span class="line">    Aho_Corasick()</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">-1</span>; i &lt;= <span class="number">1e4</span>; i++)</span><br><span class="line">            to[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = read(),nn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = read();</span><br><span class="line">            <span class="keyword">if</span> (!to[nn][x]) to[nn][x]=++cnt;</span><br><span class="line">            nn = to[nn][x];</span><br><span class="line">        &#125;</span><br><span class="line">        status[nn].push_back(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build_fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        q.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (it = to[tmp].begin(); it != to[tmp].end(); it++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> t1 = it-&gt;first,t2 = it-&gt;second;</span><br><span class="line">                <span class="keyword">int</span> k = fail[tmp];</span><br><span class="line">                <span class="comment">//printf("%d %d %d\n",t1,t2,k);</span></span><br><span class="line">                <span class="keyword">while</span>(!to[k][t1]) k = fail[k];</span><br><span class="line">                fail[t2] = to[k][t1];</span><br><span class="line">                q.push(t2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = x; i != <span class="number">0</span>; i = fail[i])</span><br><span class="line">            <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[i]  = <span class="number">1</span>;</span><br><span class="line">                V.push_back(i);</span><br><span class="line">                <span class="keyword">for</span> (RG <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; status[i].size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mk[status[i][j]])</span><br><span class="line">                    &#123;</span><br><span class="line">                        mk[status[i][j]] = <span class="number">1</span>;</span><br><span class="line">                        M.push_back(status[i][j]);</span><br><span class="line">                        ans1[status[i][j]] ++;</span><br><span class="line">                        ans2[id]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sett</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V.size(); i++) vis[V[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.size(); i++) mk[M[i]] = <span class="number">0</span>;</span><br><span class="line">        V.clear(); M.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>  nn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (RG <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[x].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t = a[x][i];</span><br><span class="line">            <span class="keyword">while</span>(!to[nn][t]) nn = fail[nn];</span><br><span class="line">            nn = to[nn][t];</span><br><span class="line">            get(x,nn);</span><br><span class="line">        &#125;</span><br><span class="line">        sett();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;AC;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read(); m = read();</span><br><span class="line">    <span class="keyword">int</span> L,x;</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L=read();</span><br><span class="line">        <span class="keyword">while</span>(L--)x=read(),a[i].push_back(x);</span><br><span class="line">        a[i].push_back(<span class="number">-1</span>);</span><br><span class="line">        L=read();</span><br><span class="line">        <span class="keyword">while</span>(L--)x=read(),a[i].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) AC.Insert(i);</span><br><span class="line">    AC.build_fail ();</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        AC.solve(i);</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans1[i]);</span><br><span class="line">    <span class="keyword">for</span>(RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans2[i]);</span><br><span class="line">        <span class="keyword">if</span> (i != n) <span class="built_in">putchar</span>(<span class="string">' '</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2754&quot; target=
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[HDU-3746] Cyclic Necklace KMP找循环</title>
    <link href="http://yoursite.com/2018/03/08/HDU-3746-Cyclic-Necklace-KMP%E6%89%BE%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2018/03/08/HDU-3746-Cyclic-Necklace-KMP找循环/</id>
    <published>2018-03-08T11:53:54.000Z</published>
    <updated>2018-03-08T12:47:48.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="https://vjudge.net/problem/hdu-3746" target="_blank" rel="noopener">HDU-3746</a></p><p>大意:求出添加尽可能少的字符数量使得原串成为循环串.</p><p>比如<code>abca-&gt;abcabc</code>要2个字符.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>KMP找循环节!<code>fail</code>数组的巧用</p><p>比如说题目中这样的串<code>abca</code>的<code>fail</code>数组为[0,0,0,1].也就是说最后一位为1其他均为0.</p><p>我们根据fail数组的定义就很容易推出答案</p><p>1.如果fail[len]为0,也就是说没有任何的匹配.就是原字符串长度.</p><p>2.如果fail[len]不为0,我们用len-fail[len]得到一个循环节.然后如果这个循环节是len的因子.也就是<strong>恰好</strong>出现了循环.那么不要添加任何的字符,return 0.否则返回该添加的量.也就是循环长度减去存在的残缺循环长度</p><p>具体代码说明一切.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *b,<span class="keyword">int</span> nb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="keyword">sizeof</span>(fail));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[j+<span class="number">1</span>] == b[i]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fail[nb] == <span class="number">0</span>) <span class="keyword">return</span> nb;</span><br><span class="line"><span class="keyword">int</span> t = nb - fail[nb];</span><br><span class="line"><span class="keyword">if</span> (nb % t == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (t-nb%t); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kmp(s,<span class="built_in">strlen</span>(s+<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/hdu-3746&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[NOI-2011|BZOJ-2434] Ahri&#39;s Printer 阿狸的打字机 Fenwick树+AC自动姬</title>
    <link href="http://yoursite.com/2018/03/08/NOI-2011-BZOJ-2434-Ahri-s-Printer-%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA-Fenwick%E6%A0%91-AC%E8%87%AA%E5%8A%A8%E5%A7%AC/"/>
    <id>http://yoursite.com/2018/03/08/NOI-2011-BZOJ-2434-Ahri-s-Printer-阿狸的打字机-Fenwick树-AC自动姬/</id>
    <published>2018-03-08T11:53:12.000Z</published>
    <updated>2018-03-08T12:38:20.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2434" target="_blank" rel="noopener">BZOJ-2434</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>毒瘤题.</strong></p><p>1.先考虑暴力的做法,对于每一个读进来的匹配串都建立一次AC自动d姬.</p><p><strong>100%爆炸不加辣.似乎只能拿40分.</strong></p><p>2.我们可以考虑出现重复计算的地方.有很大一部分的失配数组其实是没有变化的.但是我们无脑地把它破坏掉再重新建立起来,这部分的损耗很大.考虑优化中间的<code>fail</code>数组,我们在找适配节点的时候是不是只要往上面跳.插入这个节点的父节点就可以啦？做的时候记得大法师一遍.</p><p><strong>这样拿70~80分.</strong></p><p>3.在2的基础上加一个树状数组就行辣.</p><p><strong>100分标算</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,T,l[SIZE],r[SIZE],t[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> last[SIZE],lastq[SIZE],pos[SIZE],ans[SIZE];</span><br><span class="line"><span class="keyword">char</span> ch[SIZE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fail_tree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,next,v;</span><br><span class="line">&#125;e[SIZE],que[SIZE];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=T;i+=i&amp;-i)t[i]+=val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">int</span> sum=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;-i)sum+=t[i];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;e[++cnt].to=v;e[cnt].next=last[u];last[u]=cnt;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Aho_Corasick</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> fa[SIZE],fail[SIZE],next[SIZE][<span class="number">26</span>],q[SIZE];</span><br><span class="line">Aho_Corasick()&#123;</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">next[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>,id=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'P'</span>)pos[++id]=now;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'B'</span>)now=fa[now];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!next[now][ch[i]-<span class="string">'a'</span>])</span><br><span class="line">&#123;</span><br><span class="line">next[now][ch[i]-<span class="string">'a'</span>]=++cnt;</span><br><span class="line">fa[cnt]=now;</span><br><span class="line">&#125;</span><br><span class="line">now=next[now][ch[i]-<span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildfail</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> head=<span class="number">0</span>,tail=<span class="number">1</span>;</span><br><span class="line">fail[<span class="number">1</span>]=<span class="number">0</span>;q[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(head!=tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> now=q[head];head++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(next[now][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=next[now][i];</span><br><span class="line"><span class="keyword">int</span> k=fail[now];</span><br><span class="line"><span class="keyword">while</span>(!next[k][i])k=fail[k];</span><br><span class="line">fail[v]=next[k][i];</span><br><span class="line">q[tail++]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>,id=<span class="number">0</span>;</span><br><span class="line">add(l[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;ch[i];i++)</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'P'</span>)</span><br><span class="line">&#123;</span><br><span class="line">id++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=lastq[id];x;x=que[x].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t=pos[que[x].to];</span><br><span class="line">ans[x]=query(r[t])-query(l[t]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'B'</span>)add(l[now],<span class="number">-1</span>),now=fa[now];</span><br><span class="line"><span class="keyword">else</span> now=next[now][ch[i]-<span class="string">'a'</span>],add(l[now],<span class="number">1</span>);;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Aho_Corasick;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">l[x]=++T;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=last[x];i;i=e[i].next)</span><br><span class="line">dfs(e[i].to);</span><br><span class="line">r[x]=++T; <span class="comment">//wtf!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">que[z].next = lastq[y];</span><br><span class="line">lastq[y] = z;</span><br><span class="line">que[z].to = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch);</span><br><span class="line">n=<span class="built_in">strlen</span>(ch);</span><br><span class="line">Aho_Corasick.build();</span><br><span class="line">Aho_Corasick.buildfail();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Aho_Corasick.cnt;i++)</span><br><span class="line">insert(Aho_Corasick.fail[i],i);</span><br><span class="line">m=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">addedge(x,y,i);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">Aho_Corasick.solve();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2434&quot; target=
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[NOI-2014] Zoo KMP模拟</title>
    <link href="http://yoursite.com/2018/03/08/NOI-2014-Zoo-KMP%E6%A8%A1%E6%8B%9F/"/>
    <id>http://yoursite.com/2018/03/08/NOI-2014-Zoo-KMP模拟/</id>
    <published>2018-03-08T11:52:10.000Z</published>
    <updated>2018-03-08T12:31:58.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3670" target="_blank" rel="noopener">BZOJ-3670</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>不考虑题目的限制,只想一般的情况.</p><p>先通过对next数组的观察,不难得到$num(i)=num(fail(i))+1$.</p><p>考虑再维护一个<strong>前缀不与后缀重叠的,带有限制的$num’(i)$, </strong>找一波规律得到</p><script type="math/tex; mode=display">num'(i) = num(fail'(i))+1</script><p>相当于同时维护了两个失配数组了嘛.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> fail[maxn],num1[maxn],num2[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>),k = <span class="number">0</span>,t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &amp;&amp; s[k+<span class="number">1</span>] != s[i]) k = fail[k];</span><br><span class="line">        <span class="keyword">while</span>((t &amp;&amp; s[t+<span class="number">1</span>] != s[i]) || t &gt;= (i&gt;&gt;<span class="number">1</span>)) t = fail[t];</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(s[t+<span class="number">1</span>] == s[i]) num2[i] = num1[++t] + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> num2[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[k+<span class="number">1</span>] == s[i]) fail[i] = ++k,num1[i] = num1[k] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> num1[i] = fail[i] = <span class="number">0</span>; </span><br><span class="line">        ans = (ans * (num2[i]+<span class="number">1</span>)) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,kmp(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=3670&quot; target=
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[CF-578D(Div 1)] LCS AGAIN</title>
    <link href="http://yoursite.com/2018/03/08/CF-578D-Div-1-LCS-AGAIN/"/>
    <id>http://yoursite.com/2018/03/08/CF-578D-Div-1-LCS-AGAIN/</id>
    <published>2018-03-08T11:51:38.000Z</published>
    <updated>2018-03-08T12:51:37.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><a href="http://codeforces.com/problemset/problem/578/D" target="_blank" rel="noopener">Codeforces-578D</a></p><p>You are given a string <em>S</em> of length <em>n</em> with each character being one of the first <em>m</em> lowercase English letters.</p><p>Calculate how many different strings <em>T</em> of length <em>n</em> composed from the first <em>m</em> lowercase English letters exist such that the length of LCS (longest common subsequence) between <em>S</em> and <em>T</em> is <em>n</em> - 1.</p><p>Recall that LCS of two strings <em>S</em> and <em>T</em> is the longest string <em>C</em> such that <em>C</em> both in <em>S</em> and <em>T</em> as a subsequence.</p><p>Input</p><p>The first line contains two numbers <em>n</em> and <em>m</em> denoting the length of string <em>S</em> and number of first English lowercase characters forming the character set for strings (1 ≤ <em>n</em> ≤ 100 000, 2 ≤ <em>m</em> ≤ 26).</p><p>The second line contains string <em>S</em>.</p><p>Output</p><p>Print the only line containing the answer.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> last,la_last;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>,tmp = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isalpha</span>(c)) c=getchar();</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">ans = <span class="number">1L</span>L * n * (m<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">char</span> ret = getchar(),last = next(),la_last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = next();</span><br><span class="line"><span class="keyword">if</span> (ch == la_last) tmp++; <span class="keyword">else</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ch != last) ans += n*(m<span class="number">-1</span>)-tmp<span class="number">-1</span>;</span><br><span class="line">la_last = last;</span><br><span class="line">last = ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/578/D&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>KMP/Trie树/Aho-Corasick Automaton 学习笔记</title>
    <link href="http://yoursite.com/2018/03/08/KMP-Trie%E6%A0%91-Aho-Corasick-Automaton-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/08/KMP-Trie树-Aho-Corasick-Automaton-学习笔记/</id>
    <published>2018-03-08T02:35:01.000Z</published>
    <updated>2018-03-08T08:51:41.518Z</updated>
    
    <content type="html"><![CDATA[<p>继续填坑.<br>本来想把这三个玩意分开来写的,后来发现其实阿次自动姬就可以描述这几个的原理了.<br>那就写一起了.</p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>全称叫做 (Knuth-Morris-Pratt).是能够在线性时间内完成字符串匹配的算法.</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>KMP算法不同于一般的暴力匹配算法的地方在于,KMP算法充分利用了每次匹配后的失配信息,不会每一次都从第一个位置匹配,因此我们先介绍一个玩意叫做适配数组<code>fail[i]</code>.</p><p>对于<code>fail[i]</code>数组的定义:</p><p>模式串中前<code>i</code>个字符作为目标串的<strong>最大前后缀对称长度</strong>.</p><p><del>这什么定义啊看得我头大.</del></p><p>我们以实际栗子来说明.</p><p>假设现在又这样的一个模式串<code>shryshrkrin</code></p><p>根据定义我们推出的<code>fail</code>数组为<code>00001230000</code></p><p>为什么这么定义fail数组呢?在我们匹配字符串的时候，如果之前的匹配失败了，我们直接用fail数组得到下一个合法的前缀即可.而且又可以证明,fail数组和匹配的串没有任何的关系,换言之,得到了fail数组,就是得到了失配信息.与下一个<strong>可能</strong>合法的字符串的位置.</p><p>好我们是不是只要能求出<code>fail</code>数组就可以收工了？</p><p><code>fail</code>的递推方式如下.</p><ol><li>如果 <code>fail[i - 1]</code> 不为 0，且第 <code>i</code> 个字符与第 <code>fail[i - 1] +　１</code> 个字符相同，则 <code>fail[i]</code> 即为 <code>fail[i - 1] + 1</code>；</li><li>如果 <code>fail[i - 1]</code> 为 0，且第 <code>i</code> 个字符与首个字符相同，则 <code>fail[i] = 1</code>，否则 <code>fail[i] = 0</code>；</li><li>如果 <code>fail[i - 1]</code> 不为 0，且第 <code>i</code> 个字符与第 <code>fail[i - 1] +　１</code> 个字符<strong>不同</strong>，则继续对比第 <code>i</code> 个字符与 <code>fail[fail[i - 1]] + 1</code> 个字符，一直向前找直到匹配或者找到了 0。</li></ol><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span> <span class="comment">//find b in a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> na = <span class="built_in">strlen</span>(a+<span class="number">1</span>),nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[j+<span class="number">1</span>] == b[i]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>; i &lt;= na; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != a[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j++;</span><br><span class="line"><span class="keyword">if</span> (j == nb)</span><br><span class="line">&#123;</span><br><span class="line">res ++;</span><br><span class="line">j = fail[j];</span><br><span class="line">           <span class="comment">// j = 0;</span></span><br><span class="line">           <span class="comment">//如果每个字符只能使用一次,这里的j应该为0</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是板子题.</p><p><a href="http://poj.org/problem?id=3461" target="_blank" rel="noopener">POJ-3461</a></p><p>板子题,求第一个串在第二个中的出现次数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s1[MAXN],s2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> na = <span class="built_in">strlen</span>(a+<span class="number">1</span>), nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[i] == b[j+<span class="number">1</span>]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>; i &lt;= na; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != a[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j ++;</span><br><span class="line"><span class="keyword">if</span> (j == nb)</span><br><span class="line">&#123;</span><br><span class="line">res ++ ;</span><br><span class="line">j = fail[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;          </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kmp(s2,s1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.org/problemnew/show/P3375" target="_blank" rel="noopener">LUOGU-3375</a></p><p>还是板子题,求询问串的所有出现位置与next数组.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s1[MAXN],s2[MAXN];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> na = <span class="built_in">strlen</span>(a+<span class="number">1</span>), nb = <span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nb; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = fail[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != b[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (b[i] == b[j+<span class="number">1</span>]) fail[i] = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> fail[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>; i &lt;= na; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; b[j+<span class="number">1</span>] != a[i]) j = fail[j];</span><br><span class="line"><span class="keyword">if</span> (a[i] == b[j+<span class="number">1</span>]) j ++;</span><br><span class="line"><span class="keyword">if</span> (j == nb)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i-j+<span class="number">1</span>);<span class="comment">//这个莫名其妙地自己蒙出来了.</span></span><br><span class="line">j = fail[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (it = v.begin(); it != v.end(); it++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nb; i++) <span class="built_in">cout</span> &lt;&lt; fail[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.clear();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1+<span class="number">1</span>,s2+<span class="number">1</span>);</span><br><span class="line">kmp(s1,s2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>那么再来一道.</del></p><p>算了看习题整理吧。</p><h2 id="Trie树-字典树"><a href="#Trie树-字典树" class="headerlink" title="Trie树(字典树)"></a>Trie树(字典树)</h2><p>其实是个很斯波的东西.</p><p>很好写也很好懂.</p><p><a href="https://vjudge.net/problem/HDU-1251" target="_blank" rel="noopener">HDU-1251</a></p><p>求询问串为模式串前缀的个数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optmize(<span class="meta-string">"0fuck"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">11</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> tot,trie[maxn][<span class="number">26</span>],sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settledown</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;tot=<span class="number">0</span>;<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (trie[rt][x] == <span class="number">0</span>)</span><br><span class="line">trie[rt][x] = ++tot;</span><br><span class="line"></span><br><span class="line">rt = trie[rt][x];</span><br><span class="line">sum[rt]++; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (!trie[rt][x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">rt = trie[rt][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(gets(s))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>]==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">Tr.insert(s,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(gets(s))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tr.find(s,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.org/problem/show?pid=2580" target="_blank" rel="noopener">LUOGU-2580</a></p><p>对字符串查询操作.求询问串作为前缀是否出现,是否第一次出现,是否没出现.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optmize(<span class="meta-string">"0fuck"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> ss[<span class="number">4</span>][<span class="number">10</span>] = &#123;<span class="string">"WRONG"</span>,<span class="string">"REPEAT"</span>,<span class="string">"OK"</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> tot,trie[maxn][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settledown</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">1</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (trie[rt][x] == <span class="number">0</span>)</span><br><span class="line">trie[rt][x] = ++tot;</span><br><span class="line">rt = trie[rt][x]; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (!trie[rt][x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">rt = trie[rt][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (vis[rt]) </span><br><span class="line">&#123;</span><br><span class="line">vis[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Tr.settledown();</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">Tr.insert(s,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,ss[Tr.find(s,<span class="number">1</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Aho-Corasick-Automaton"><a href="#Aho-Corasick-Automaton" class="headerlink" title="Aho-Corasick Automaton"></a>Aho-Corasick Automaton</h2><p><strong>这玩意才是重点</strong></p><p>首先我对于AC自动姬的理解就是</p><script type="math/tex; mode=display">\large AC Automaton=KMP+Trie</script><p>一样的对于模式串建立字典树，在树上算fail数组，我们把这两个玩意放到一起.</p><p>Trie只能做前缀不能匹配吧,加了KMP不就行了么!</p><p>我觉得有张图挺好的。</p><p><img src="/2018/03/08/KMP-Trie树-Aho-Corasick-Automaton-学习笔记/1.jpg" alt="AC"></p><p><strong>这是普通的建立Trie树的过程</strong></p><p><strong>然后我们在上面加上fail数组 / 指针就可以了</strong></p><p><img src="/2018/03/08/KMP-Trie树-Aho-Corasick-Automaton-学习笔记/2.jpg" alt="AC"></p><p>对于AC自动姬,有两种写法</p><p>带指针(我还是偏向于喜欢这么写,感觉挺好理解的)</p><p>可食用对象</p><p><a href="https://www.luogu.org/problemnew/show/P3808" target="_blank" rel="noopener">LUOGU-3808</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> cnt,N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    node *next[<span class="number">26</span>];</span><br><span class="line">    node *fail;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> key[maxn];</span><br><span class="line">node *newnode,*root;</span><br><span class="line"><span class="keyword">char</span> pattern[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next[x] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//newnode=(struct node *)malloc(sizeof(struct node)); </span></span><br><span class="line">            newnode = <span class="keyword">new</span>(node);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) newnode-&gt;next[j] = <span class="number">0</span>;</span><br><span class="line">            newnode-&gt;sum = <span class="number">0</span>;newnode-&gt;fail = <span class="number">0</span>;</span><br><span class="line">            p-&gt;next[x]=newnode;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_fail_pointer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt;q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    node *p;</span><br><span class="line">    node *temp;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">25</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;next[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(temp == root)</span><br><span class="line">                    temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p = temp-&gt;fail;</span><br><span class="line">                    <span class="keyword">while</span>(p)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(p-&gt;next[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            temp-&gt;next[i]-&gt;fail = p-&gt;next[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = p-&gt;fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(temp-&gt;next[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ac_automation</span><span class="params">(<span class="keyword">char</span> *ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p = root;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(ch);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = ch[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(!p-&gt;next[x] &amp;&amp; p != root) p = p-&gt;fail;</span><br><span class="line">        p = p-&gt;next[x];</span><br><span class="line">        <span class="keyword">if</span>(!p) p = root;</span><br><span class="line">        node *temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">if</span>(temp-&gt;sum &gt;= <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               cnt += temp-&gt;sum;</span><br><span class="line">               temp-&gt;sum = <span class="number">-1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">           temp = temp-&gt;fail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//root=(struct node *)malloc(sizeof(struct node));</span></span><br><span class="line">    root = <span class="keyword">new</span>(node); <span class="comment">//好像 new(node)更快!? </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) root-&gt;next[j] = <span class="number">0</span>;</span><br><span class="line">    root-&gt;fail=<span class="number">0</span>;</span><br><span class="line">    root-&gt;sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">    getchar();<span class="comment">//get char of newline </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,key);</span><br><span class="line">        Insert(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,pattern);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    build_fail_pointer();</span><br><span class="line">    ac_automation(pattern);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上拉来一个不用指针的.</p><p><a href="https://www.cnblogs.com/Hero-of-someone/p/7147494.html" target="_blank" rel="noopener">蓝甘冰露</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RG register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[N][<span class="number">55</span>],ss[N*<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n,times[N];<span class="comment">//times记录单词在文本串中出现的次数</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> son[N][<span class="number">26</span>],fail[N],root,L,num[N];</span><br><span class="line">   <span class="keyword">int</span> last[N];<span class="comment">//只是一个优化，有没有都没关系</span></span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">      L=<span class="number">1</span>; root=<span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(son,<span class="number">0</span>,<span class="keyword">sizeof</span>(son));</span><br><span class="line">      <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">      <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">      <span class="built_in">memset</span>(fail,<span class="number">0</span>,<span class="keyword">sizeof</span>(fail));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function">il <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="keyword">return</span> c-<span class="string">'a'</span>; &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( <span class="keyword">char</span> s[],<span class="keyword">int</span> v )</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s), cur=root;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> id=idx(s[i]);</span><br><span class="line">         <span class="keyword">if</span>(!son[cur][id])</span><br><span class="line">            son[cur][id]=L++;</span><br><span class="line">         cur=son[cur][id];</span><br><span class="line">      &#125;</span><br><span class="line">      num[cur]=v;   <span class="comment">//记录单词编号</span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> que[N],hd=<span class="number">0</span>,tl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(son[root][i])&#123;</span><br><span class="line">                que[tl++]=son[root][i];</span><br><span class="line">                fail[son[root][i]]=root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> son[root][i]=root;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">while</span>(hd&lt;tl)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur=que[hd++];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> Son=son[cur][i];</span><br><span class="line">                <span class="keyword">if</span>(Son)&#123;</span><br><span class="line">                    <span class="keyword">int</span> f=fail[cur];</span><br><span class="line">                    <span class="keyword">while</span>(f &amp;&amp; !son[f][i]) f=fail[f];</span><br><span class="line">                    fail[Son]=son[f][i];</span><br><span class="line">                                        num[Son]=num[fail[Son]];<span class="comment">//不用last优化时要加上这一句</span></span><br><span class="line">                                        que[tl++]=Son;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> son[cur][i]=son[fail[cur]][i];</span><br><span class="line">            &#125;</span><br><span class="line">                        <span class="comment">//if( num[fail[cur]] )last[cur]=fail[cur];</span></span><br><span class="line">                        <span class="comment">//else last[cur]=last[fail[cur]];</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">( <span class="keyword">char</span> s[] )</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),cur=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> id=idx(s[i]);</span><br><span class="line">            <span class="keyword">while</span>(cur &amp;&amp; !son[cur][id]) cur=fail[cur];</span><br><span class="line">            <span class="keyword">if</span>(son[cur][id])&#123;</span><br><span class="line">                cur=son[cur][id];</span><br><span class="line">                <span class="keyword">int</span> k=cur;</span><br><span class="line">                        <span class="keyword">while</span>(k) times[ num[k] ]++,k=fail[k];</span><br><span class="line">                <span class="comment">/*while(k)&#123;</span></span><br><span class="line"><span class="comment">                            if(num[k]) times[num[k]]++;</span></span><br><span class="line"><span class="comment">                            k=last[k];</span></span><br><span class="line"><span class="comment">                            &#125;*/</span></span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;AC;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n); AC.init();</span><br><span class="line">   <span class="keyword">for</span>(RG <span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">      AC.insert(s[i],i);</span><br><span class="line">   &#125;</span><br><span class="line">   AC.build();</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss); AC.query(ss);</span><br><span class="line">   <span class="keyword">for</span>( RG <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++ )    <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>,s[i],times[i]);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续填坑.&lt;br&gt;本来想把这三个玩意分开来写的,后来发现其实阿次自动姬就可以描述这几个的原理了.&lt;br&gt;那就写一起了.&lt;/p&gt;
&lt;h2 id=&quot;KMP&quot;&gt;&lt;a href=&quot;#KMP&quot; class=&quot;headerlink&quot; title=&quot;KMP&quot;&gt;&lt;/a&gt;KMP&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="AC自动姬" scheme="http://yoursite.com/categories/AC%E8%87%AA%E5%8A%A8%E5%A7%AC/"/>
    
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>[奇技淫巧]算法竞赛常数优化技巧/代码风格总结</title>
    <link href="http://yoursite.com/2018/03/01/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%B8%B8%E6%95%B0%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/01/奇技淫巧-算法竞赛常数优化技巧-代码风格总结/</id>
    <published>2018-03-01T02:59:35.000Z</published>
    <updated>2018-03-01T03:34:38.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>这几天被卡常恶心到的挺多的..所以不得不恶补了一波黑科技的卡常技巧，然后代码风格的问题很久就想写了..</p><p>所以就当做个总结吧。</p><a id="more"></a><h2 id="卡常技巧"><a href="#卡常技巧" class="headerlink" title="卡常技巧"></a>卡常技巧</h2><h4 id="修饰符的运用"><a href="#修饰符的运用" class="headerlink" title="修饰符的运用"></a>修饰符的运用</h4><p>1.多在非递归函数/过程加inline,好像是说这样编译后调用速度加快..</p><p>2.i++比++i慢</p><p>3.算是个玄学的东西叫做register,原理在于把变量存在CPU的寄存器中计算快.</p><p>一般有需要的话可以这么写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RG register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(RG int i=(a);i&lt;=(b);i++)</span></span><br></pre></td></tr></table></figure><p>但是奇怪的是hjq上次帮我调的时候加了RG反而变慢了1s..鬼畜啊..</p><p>4.常数少用#define 多用const/typedef</p><p>5.少用if else 多用三目运算符</p><h4 id="计算优化"><a href="#计算优化" class="headerlink" title="计算优化"></a>计算优化</h4><p>6.循环展开,可以在展开的时候每个写成函数会美观一点.</p><p>7.读入优化（我的标准写法差不多这样↓）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + ch - ‘0’;还是cgc想到的马叉虫写法.</p><p>8.abs自己写.</p><h4 id="函数调用优化"><a href="#函数调用优化" class="headerlink" title="函数调用优化"></a>函数调用优化</h4><p>9.某些不开O2时候的函数/STL慢的要死不如自己实现.</p><p>e.g.</p><p>isdigit(),isalpha(),</p><p>max(),min(),</p><p>queue&lt;&gt;,map&lt;&gt;,priority_queue&lt;&gt;,</p><p>binary_search(),upper/lower_bound().</p><p>etc.</p><h4 id="奇怪的等价"><a href="#奇怪的等价" class="headerlink" title="奇怪的等价"></a>奇怪的等价</h4><p>x<em>10 &lt;=&gt; (x&lt;<3)+(x<<1) x!="y" <=""> x^y<br>x!=-1 &lt;=&gt; ~x<br>x</3)+(x<<1)></em>2 &lt;=&gt; x&lt;<1 x*2+1="" <=""> x&lt;<1|1 2="" x="" <=""> x&gt;&gt;1<br>(x+1)%2 &lt;=&gt; x^1<br>x%2 &lt;=&gt; x&amp;1<br>x%2==0 &lt;=&gt; ~(x&amp;1)</1|1></1></p><h4 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h4><p>被卡到常数的时候碰到重复变量多开一个记录来减少寻址次数.</p><p>比如频繁调用sqrt(x)的时候就可以开个rt记录,频繁调用strlen()的时候如果每次都这么写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++)</span><br></pre></td></tr></table></figure><p>后果是这样的时间复杂度为$O(nL)$，死得不明不白.</p><p>多维数组请把大的放在前面,寻址的时候如果小的在前,在后面的寻址时间大大加长.</p><p>而且开了$O2$后更加的明显,几乎可以快1倍的速度。</p><p><del>上面的差不多已经够用了</del></p><h2 id="语法问题"><a href="#语法问题" class="headerlink" title="语法问题"></a>语法问题</h2><p>下列资料转自<a href="http://blog.csdn.net/qq_33583069/article/details/53086992" target="_blank" rel="noopener">http://blog.csdn.net/qq_33583069/article/details/53086992</a></p><ul><li><p>pow()函数请慎用，低版本有的时候会CE。</p></li><li><p>考场不允许使用<strong>“bits/stdc++.h”</strong>库，并且使用该库变量名可能不能使用<strong>next</strong> （C++库里面有个template是next会CE）</p></li><li><p>请尽力少用黑语法。</p></li><li><p>二分图匹配避免link做变量名（还有个什么变量名Linux也会CE我突然记不到了..<del>有时其实也可以用<strong>“中国式的变量名命名法”</strong>这样不会CE。拼音大法好啊</del> 不推荐这种诡异的风格），Linux环境可能会CE。</p></li><li><p>少用“math.h”|“cmath”库。因为_x,_y,y1,y2,x1,x2,x0,y0,这类命名有时会CE。</p></li><li><p>考场严禁使用带下划线的库函数。eg. __gcd()</p></li><li><p>编程时利用宏可以减少代码量，但是请务必在每个变量里加括号。 eg. <code>#define rep(i,s,t) for(int i=(s);i&lt;=(t);i++)</code></p></li><li><p>循环变量for(int i;…;…;)请不要放到全局上。这种常数不会卡。相反会带来很多隐式的错误</p></li><li><p>如果你不精通指针请少用它。指针的代码很难查错。竞赛里面请避免使用函数指针，多级指针，指针数组这样的语法。</p></li><li><p>如果可以静态实现，请先考虑静态版本的代码。而不是写动态。（<code>malloc()</code> <code>new</code>）</p></li><li><p>引用和指针不是一个东西。这个语法我已经不想解释了。去买本语法书细读。</p></li><li><p>考试少用C++的OOP特性，可以使用<code>STL</code> <code>template&lt;&gt;</code> <code>class</code> <code>namespace</code> 但不推荐使用。</p></li><li><p>请熟悉STL里面的 <code>string</code> <code>queue</code> <code>stack</code> <code>vector</code> <code>set</code> <code>map</code> 后面这些用的少,仅供参考并且在pascal选手消失前应该是不会考的前面这些只是方便才用，但请注意常数！推荐自己实现。 <code>deque</code> <code>multiset</code> <code>multimap</code> <code>bitset</code></p></li><li><p>宏指令少用,<code>#progma</code> 肯定是禁了的，别想手动扩栈。涉及操作编译器和系统的函数都要挂。</p></li><li><p>内嵌汇编也是算作弊处理，毕竟这是算法竞赛，不是信息安全竞赛，也不是编程能力竞赛。</p></li><li><p>别再用了<code>ios::sync_with_stdio(false)</code>作死再写<code>scanf(&quot;%d&quot;,&amp;n)；</code> </p><p>​</p></li></ul><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>个人习惯而已如果有不太好的毒瘤习惯还是指出来吧.</p><h4 id="压行-缩进"><a href="#压行-缩进" class="headerlink" title="压行/缩进"></a>压行/缩进</h4><p>如果函数较短而且已经用烂且炒鸡熟悉选择压行,比如</p><p><code>int gcd(int x,int y){return y==0?x:gcd(y%x,x);}</code></p><p>甚至有的时候还会直接define掉.</p><p>对于其他较长/重要的严格缩进.</p><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><p>适当增加空格.运算符前后必须加空格.<br><code>for (int i = a; i &lt;= b; i++)</code></p><h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><p><code>int main()</code>必须写成<code>int main(int argc, char *argv[])</code></p><p><code>void init()</code>必须写成 <code>void init(void)</code></p><p>多组输入输出的一般格式:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(....) == .. &amp;&amp; .. &amp;&amp; ..)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  solve();</span><br><span class="line">  output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差不多就这样了.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;这几天被卡常恶心到的挺多的..所以不得不恶补了一波黑科技的卡常技巧，然后代码风格的问题很久就想写了..&lt;/p&gt;
&lt;p&gt;所以就当做个总结吧。&lt;/p&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="http://yoursite.com/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="-&quot;奇技淫巧&quot;" scheme="http://yoursite.com/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>洲阁筛学习总结</title>
    <link href="http://yoursite.com/2018/02/28/%E6%B4%B2%E9%98%81%E7%AD%9B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/28/洲阁筛学习总结/</id>
    <published>2018-02-28T10:42:09.000Z</published>
    <updated>2018-02-28T13:00:07.657Z</updated>
    
    <content type="html"><![CDATA[<p>(不知不觉又给自己挖了个坑.)</p><p>ckr : “我只是在无敌的路上越走越远”</p><h2 id="洲阁筛食用方法"><a href="#洲阁筛食用方法" class="headerlink" title="洲阁筛食用方法"></a>洲阁筛食用方法</h2><h3 id="食用范围"><a href="#食用范围" class="headerlink" title="食用范围"></a>食用范围</h3><p>大部分的情况差不多这样:</p><p>给出一个积性函数$f(x)$满足积性函数的基本性质,$f(1)=1$,如果$gcd(a,b)=1$有$f(ab)=f(a)f(b)$.</p><p>那么根据唯一分解定理,就是$x=\prod _{i=1}^np_i^{k_i}$就可以:</p><script type="math/tex; mode=display">\largef(x)=\prod f(p_i^{k_i})</script><p>$In \space particular,p \space\space is\space a\space prime\space number$，而且$f(p^c)$可以快速求出.</p><p>一般的题目差不多都这样:</p><p>$f(x)$是一个数论函数,要求$\sum_{i=1}^nf(i)$,而且你发现,杜教筛完全不能用卷积简化，你被题目的形式深深卡死！</p><p><del>啊♂</del></p><p>洲阁筛就出现了。</p><h3 id="食用思想"><a href="#食用思想" class="headerlink" title="食用思想"></a>食用思想</h3><p><strong>主要的核心思想在于:分类</strong></p><p><strong>引理：</strong>$n$以内的数,最多只有一个大于$\sqrt{n}$的质因数:</p><p>$Proof:$</p><p>​    假设原命题不成立,即存在有两个大于$\sqrt{n}$的质因数,</p><p>​    那么不妨设这两个质因数是$n_1,n_2$ 于是有$n_1n_2&gt;n$,但这是不可能的！</p><p>​    $\therefore$假设命题不成立，原命题正确.</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(不知不觉又给自己挖了个坑.)&lt;/p&gt;
&lt;p&gt;ckr : “我只是在无敌的路上越走越远”&lt;/p&gt;
&lt;h2 id=&quot;洲阁筛食用方法&quot;&gt;&lt;a href=&quot;#洲阁筛食用方法&quot; class=&quot;headerlink&quot; title=&quot;洲阁筛食用方法&quot;&gt;&lt;/a&gt;洲阁筛食用方法&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="洲阁筛" scheme="http://yoursite.com/categories/%E6%B4%B2%E9%98%81%E7%AD%9B/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mobius反演习题整理</title>
    <link href="http://yoursite.com/2018/02/27/Mobius%E5%8F%8D%E6%BC%94%E4%B9%A0%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/27/Mobius反演习题整理/</id>
    <published>2018-02-27T00:58:28.000Z</published>
    <updated>2018-02-27T12:25:47.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题单"><a href="#题单" class="headerlink" title="题单"></a>题单</h2><p>（这边的是做过的..）</p><p><strong>题单在这: <a href="https://www.cnblogs.com/darklove/p/7554314.html" target="_blank" rel="noopener">https://www.cnblogs.com/darklove/p/7554314.html</a></strong></p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2440" target="_blank" rel="noopener">BZOJ-2440</a></p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3994" target="_blank" rel="noopener">BZOJ-3994</a>/<a href="https://www.luogu.org/problemnew/show/P3327" target="_blank" rel="noopener">LUOGU-3327</a>双倍经验</p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2154" target="_blank" rel="noopener">BZOJ-2154</a></p><p><a href="http://www.spoj.com/problems/DIVCNT2/" target="_blank" rel="noopener">SPOJ-DIVCNT2</a>(谁来帮我卡个常啊最后的点T飞就差一点点啊啊啊啊啊)</p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2301" target="_blank" rel="noopener">BZOJ-2301</a>/<a href="https://www.luogu.org/problemnew/show/P2522" target="_blank" rel="noopener">LUOGU-2522</a>双倍经验</p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1244" target="_blank" rel="noopener">51Nod-1244</a></p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1239" target="_blank" rel="noopener">51Nod-1239</a></p><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3944" target="_blank" rel="noopener">BZOJ-3944</a></p><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1237" target="_blank" rel="noopener">51Nod-1237</a></p><p>—-（不定期添加全凭造化）</p><h2 id="奇技淫巧常用公式整理"><a href="#奇技淫巧常用公式整理" class="headerlink" title="奇技淫巧常用公式整理"></a><del>奇技淫巧</del>常用公式整理</h2><h3 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h3><p>狄利克雷卷积定义在<font color="#00ffff">数论函数</font>上</p><p></p><h1>狄利克雷卷积</h1><p></p><p></p><h2>定义</h2><p></p><p></p><p>狄利克雷卷积：<mathjax>$\displaystyle (f  \times g)(n) = \sum_{d|n}f(d)*g(\frac{n}{d})$</mathjax></p><p></p><p></p><p>一个例子：<mathjax>$f(x)=2x,g(x)=3x$</mathjax><br>则<mathjax>$(f \times g)(6)=f(1)g(6)+f(2)g(3)+f(3)g(2)+f(6)g(1)$</mathjax>。<br>往往省略掉<mathjax>$n$</mathjax>。  </p><p></p><p></p><p>狄利克雷卷积定义在<code>数论函数</code>上。  </p><p></p><p><div class="card"><div class="card-main"><div class="card-inner"></div></div></div></p><p></p><p>数论函数： 如果一个函数的定义域为正整数，值域为复数，则称此函数为数论函数。常见的数论函数有欧拉函数<mathjax>$\varphi$</mathjax>和莫比乌斯函数<mathjax>$\mu$</mathjax>。</p><p></p><p></p><p>运算律：</p><ol><li><code>结合律</code>  <mathjax>$(f \times g ) \times h= f \times (g \times h)$</mathjax>。<br></li><li><code>交换律</code>  <mathjax>$f \times g = g \times f$</mathjax>。<br></li><li><code>加法-狄利克雷卷积分配律</code> <mathjax>$f \times (g+h) = f\times g + f \times h$</mathjax>。<br></li><li><code>单位元</code> 单位函数<mathjax>$\epsilon$</mathjax>，使得<mathjax>$f= \epsilon \times f =f \times \epsilon$</mathjax>。<br><br>单位函数的取值：<mathjax>$n=1$</mathjax>时<mathjax>$\epsilon(n)=1$</mathjax>，<mathjax>$n$</mathjax>取其他值时<mathjax>$\epsilon(n)=0$</mathjax>。</li><li><code>逆元</code> 对于任意数论函数<mathjax>$f$</mathjax>，如果<mathjax>$f(1) \not = 0$</mathjax>，则存在<strong>唯一</strong>的逆函数<mathjax>$f^{-1}$</mathjax>，使得 <mathjax>$f \times f^{-1} = \epsilon$</mathjax>：<br><br>对于<mathjax>$n=1$</mathjax>，有：<mathjax>${f^{-1}(1)={\frac {1}{f(1)}}}$</mathjax><br><br>对于<mathjax>$n&gt;1$</mathjax>，有：<mathjax>$ {f^{-1}(n)={\frac {-1}{f(1)}}\displaystyle \sum _{d|n,n\neq d}f({\frac {n}{d}})f^{-1}(d)}$</mathjax>  </li></ol><a id="more"></a><h3 id="特殊函数的奆积"><a href="#特殊函数的奆积" class="headerlink" title="特殊函数的奆积"></a>特殊函数的<del>奆</del>积</h3><p>由:$\sum_{d|n}\varphi(d)=n$再结合狄利克雷卷积的定义:</p><p>$\varphi*1=n$</p><p>根据Mobius反演的式子:</p><p>$F(n)=\sum_{d|n}f(d)$</p><p>写成卷积的形式就是:</p><p>$F = f*1$</p><p>事实上我们甚至可以用狄利克雷卷积的运算法则来证明莫比乌斯反演的正确性</p><script type="math/tex; mode=display">\huge{\because \mu * 1=\epsilon\\\\\therefore f*1=F*\mu*1\\\\\therefore f=F *\mu}</script><p>更有意思的是我们几乎可以不费吹灰之力，利用狄利克雷卷积运算的交换律,由:</p><script type="math/tex; mode=display">\huge f=F*\mu=\mu*F</script><script type="math/tex; mode=display">\huge=>f(n)=\sum_{d|n}\mu(\frac{n}{d})F(d) = \sum_{d|n}\mu(d)F(\frac{n}{d})</script><p>这么快就证完了,,,珂怕.</p><h3 id="数论积性函数线性筛法"><a href="#数论积性函数线性筛法" class="headerlink" title="数论积性函数线性筛法"></a>数论积性函数线性筛法</h3><p>由积性函数的定义,大部分的数论函数如$\mu(x),\varphi(x)$都能在$Euler$线性筛中以$O(n)$的时间得到.</p><p><strong>交出板子</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//phi[i]为欧拉函数,u[i]为莫比乌斯函数,f[i]为约数个数函数,g[i]为最高质因数的次方数 </span></span><br><span class="line">phi[<span class="number">1</span>] = u[<span class="number">1</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">&#123;</span><br><span class="line">prime[++cnt] = i;</span><br><span class="line">u[i] = <span class="number">-1</span>;</span><br><span class="line">f[i] = <span class="number">2</span>;</span><br><span class="line">g[i] = <span class="number">1</span>;</span><br><span class="line">phi[i] = i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt&amp;&amp; i*prime[j] &lt;=maxn; j++)</span><br><span class="line">&#123;</span><br><span class="line">            vis[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]== <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">                u[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">                g[i*prime[j]]=g[i]+<span class="number">1</span>;</span><br><span class="line">                f[i*prime[j]]=f[i]/(g[i]+<span class="number">1</span>)*(g[i]+<span class="number">2</span>);</span><br><span class="line">                phi[i*prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            u[i*prime[j]]=-u[i];</span><br><span class="line">            g[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            f[i*prime[j]]=f[i]*<span class="number">2</span>;</span><br><span class="line">            phi[i*prime[j]] = phi[i] * (prime[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个板子应该够用了不然我就吃<del>ckr</del></p><h3 id="Mobius反演公式"><a href="#Mobius反演公式" class="headerlink" title="Mobius反演公式"></a>Mobius反演公式</h3><script type="math/tex; mode=display">\huge{\sum_{x|n}\mu(x)=[n=1]\\\\\sum_{x|i}f(\frac{i}{x})=\sum_{i=1}^{\lfloor\frac{n}{x}\rfloor}f(i)\\\\\varphi(n)=\sum_{d|n}\mu(d)f(\frac{n}{d})=\sum_{d|n}\frac{\mu(d)n}{d}\\\\\sum_{d|n}\varphi(d)=n\\\\}</script><p>复杂的单题写题解吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题单&quot;&gt;&lt;a href=&quot;#题单&quot; class=&quot;headerlink&quot; title=&quot;题单&quot;&gt;&lt;/a&gt;题单&lt;/h2&gt;&lt;p&gt;（这边的是做过的..）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题单在这: &lt;a href=&quot;https://www.cnblogs.com/darklove/p/7554314.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/darklove/p/7554314.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2440&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-2440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=3994&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-3994&lt;/a&gt;/&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3327&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LUOGU-3327&lt;/a&gt;双倍经验&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2154&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-2154&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.spoj.com/problems/DIVCNT2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SPOJ-DIVCNT2&lt;/a&gt;(谁来帮我卡个常啊最后的点T飞就差一点点啊啊啊啊啊)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=2301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-2301&lt;/a&gt;/&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2522&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LUOGU-2522&lt;/a&gt;双倍经验&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1244&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;51Nod-1244&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.html#%21problemId=1239&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;51Nod-1239&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lydsy.com/JudgeOnline/problem.php?id=3944&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-3944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1237&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;51Nod-1237&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;—-（不定期添加全凭造化）&lt;/p&gt;
&lt;h2 id=&quot;奇技淫巧常用公式整理&quot;&gt;&lt;a href=&quot;#奇技淫巧常用公式整理&quot; class=&quot;headerlink&quot; title=&quot;奇技淫巧常用公式整理&quot;&gt;&lt;/a&gt;&lt;del&gt;奇技淫巧&lt;/del&gt;常用公式整理&lt;/h2&gt;&lt;h3 id=&quot;狄利克雷卷积&quot;&gt;&lt;a href=&quot;#狄利克雷卷积&quot; class=&quot;headerlink&quot; title=&quot;狄利克雷卷积&quot;&gt;&lt;/a&gt;狄利克雷卷积&lt;/h3&gt;&lt;p&gt;狄利克雷卷积定义在&lt;font color=&quot;#00ffff&quot;&gt;数论函数&lt;/font&gt;上&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h1&gt;狄利克雷卷积&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;狄利克雷卷积：&lt;mathjax&gt;$\displaystyle (f  \times g)(n) = \sum_{d|n}f(d)*g(\frac{n}{d})$&lt;/mathjax&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个例子：&lt;mathjax&gt;$f(x)=2x,g(x)=3x$&lt;/mathjax&gt;&lt;br&gt;
则&lt;mathjax&gt;$(f \times g)(6)=f(1)g(6)+f(2)g(3)+f(3)g(2)+f(6)g(1)$&lt;/mathjax&gt;。&lt;br&gt;
往往省略掉&lt;mathjax&gt;$n$&lt;/mathjax&gt;。  &lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;狄利克雷卷积定义在&lt;code&gt;数论函数&lt;/code&gt;上。  &lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;card&quot;&gt;&lt;div class=&quot;card-main&quot;&gt;&lt;div class=&quot;card-inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;数论函数： 如果一个函数的定义域为正整数，值域为复数，则称此函数为数论函数。常见的数论函数有欧拉函数&lt;mathjax&gt;$\varphi$&lt;/mathjax&gt;和莫比乌斯函数&lt;mathjax&gt;$\mu$&lt;/mathjax&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;运算律：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;结合律&lt;/code&gt;  &lt;mathjax&gt;$(f \times g ) \times h= f \times (g \times h)$&lt;/mathjax&gt;。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;交换律&lt;/code&gt;  &lt;mathjax&gt;$f \times g = g \times f$&lt;/mathjax&gt;。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;加法-狄利克雷卷积分配律&lt;/code&gt; &lt;mathjax&gt;$f \times (g+h) = f\times g + f \times h$&lt;/mathjax&gt;。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;单位元&lt;/code&gt; 单位函数&lt;mathjax&gt;$\epsilon$&lt;/mathjax&gt;，使得&lt;mathjax&gt;$f= \epsilon \times f =f \times \epsilon$&lt;/mathjax&gt;。&lt;br&gt;&lt;br&gt;单位函数的取值：&lt;mathjax&gt;$n=1$&lt;/mathjax&gt;时&lt;mathjax&gt;$\epsilon(n)=1$&lt;/mathjax&gt;，&lt;mathjax&gt;$n$&lt;/mathjax&gt;取其他值时&lt;mathjax&gt;$\epsilon(n)=0$&lt;/mathjax&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;逆元&lt;/code&gt; 对于任意数论函数&lt;mathjax&gt;$f$&lt;/mathjax&gt;，如果&lt;mathjax&gt;$f(1) \not = 0$&lt;/mathjax&gt;，则存在&lt;strong&gt;唯一&lt;/strong&gt;的逆函数&lt;mathjax&gt;$f^{-1}$&lt;/mathjax&gt;，使得 &lt;mathjax&gt;$f \times f^{-1} = \epsilon$&lt;/mathjax&gt;：&lt;br&gt;&lt;br&gt;对于&lt;mathjax&gt;$n=1$&lt;/mathjax&gt;，有：&lt;mathjax&gt;${f^{-1}(1)={\frac {1}{f(1)}}}$&lt;/mathjax&gt;&lt;br&gt;&lt;br&gt;对于&lt;mathjax&gt;$n&amp;gt;1$&lt;/mathjax&gt;，有：&lt;mathjax&gt;$ {f^{-1}(n)={\frac {-1}{f(1)}}\displaystyle \sum _{d|n,n\neq d}f({\frac {n}{d}})f^{-1}(d)}$&lt;/mathjax&gt;  &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/categories/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>FFT/NTT学习笔记</title>
    <link href="http://yoursite.com/2018/02/25/FFT-NTT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/25/FFT-NTT学习笔记/</id>
    <published>2018-02-25T05:40:58.000Z</published>
    <updated>2018-02-27T12:25:44.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><del>史诗级巨坑填完再划</del></p><p>主要参考资料：</p><p><a href="download\多项式.pdf">lych_cys梁大的讲解</a></p><p><a href="download\国家集训队2016论文集.pdf">MYY的国家集训队论文</a></p><p><a href="https://oi.men.ci/fft-notes/" target="_blank" rel="noopener">Menci’s blog</a></p><p><a href="https://zhuanlan.zhihu.com/p/31584464" target="_blank" rel="noopener">邓祎明的知乎专栏</a></p><p><a href="http://www.cnblogs.com/Blog-of-Eden/p/7779717.html" target="_blank" rel="noopener">学长方尤乐的blog</a></p><p><a href="http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform#i-15" target="_blank" rel="noopener">Miskcoo’s blog</a></p><p>（和一些奇奇怪怪的东西</p><a id="more"></a><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h4 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>（参见初中人教版七年级上课本）</p><h5 id="系数表示法"><a href="#系数表示法" class="headerlink" title="系数表示法"></a>系数表示法</h5><p>将<script type="math/tex">P(X)=a_0+a_1X+a_2X^2+\cdots+a_nX^n</script>的每一个<script type="math/tex">X</script> 前的系数<script type="math/tex">a_i</script>提取出来看作一个<script type="math/tex">n+1</script>维向量</p><p>此向量$\vec{a}$就是$P(X)$的系数表示法的向量。</p><h5 id="点值表示法"><a href="#点值表示法" class="headerlink" title="点值表示法"></a>点值表示法</h5><p>对于这个多项式若我们不知道它的系数,我们可以用采样的方式将一组插值节点$(x_0,x_1,\cdot\cdot\cdot,x_n)$代入上式</p><p>得到$n+1$个不同的结果$(y_0,y_1,\cdot\cdot\cdot,y_n)$，就可以唯一确定这个多项式.</p><h5 id="点值表示法正确性的证明"><a href="#点值表示法正确性的证明" class="headerlink" title="点值表示法正确性的证明"></a>点值表示法正确性的证明</h5><ul><li><p><strong>证明</strong>:</p><p>假设原命题不成立即存在两个不同的多项式$A(x),B(x)$在$\forall i\in[0,n]$，都有$A(x_i)=B(x_i)$</p><p>那么假设用$A(x_i)-B(x_i) = H(x_i) = 0$,那么$H(x_i)$有$(n+1)$个根,这与$n$次多项式只有$n$个根的代数基本定理相矛盾，矛盾！故假设不成立！</p><p>$\therefore$原命题正确性显然.</p><p>而$FFT$就是利用了点值和系数表示之间的关系，在快速求点值来表示系数，搭起这两个变换的桥梁.</p></li></ul><h5 id="多项式的乘除法"><a href="#多项式的乘除法" class="headerlink" title="多项式的乘除法"></a>多项式的乘除法</h5><p>乘法:叫做卷积,<del>也作奆积</del>。形象地可以写成:</p><script type="math/tex; mode=display">c_i=\sum_{j=0}^{i}a_j*b_{i-j}</script><p>用这个公式不难得到一个$O(n^2)$的算法.</p><p>除法:就是大除法,小学/初中奥数部分不赘述了.</p><h4 id="单位根及其性质"><a href="#单位根及其性质" class="headerlink" title="单位根及其性质"></a>单位根及其性质</h4><p><img src="/2018/02/25/FFT-NTT学习笔记/4.jpg" alt="Markdown"></p><p><img src="/2018/02/25/FFT-NTT学习笔记/2.jpg" alt="MP"></p><p>证明一：</p><p>由几何意义，这两者表示的向量终点是相反的，左边较右边在单位圆上多转了半圈。</p><p>证明二：</p><p>由计算的公式：</p><p><img src="https://www.zhihu.com/equation?tex=%5Comega_%7Bn%7D%5E%7Bk%2B%5Cfrac%7Bn%7D%7B2%7D%7D%3Dcos%282%5Cpi%5Cfrac%7Bk%2B%5Cfrac%7Bn%7D%7B2%7D%7D%7Bn%7D%29%2Bi%5Ccdot+sin%282%5Cpi%5Cfrac%7Bk%2B%5Cfrac%7Bn%7D%7B2%7D%7D%7Bn%7D%29%3Dcos%282%5Cpi%5Cfrac%7Bk%7D%7Bn%7D%2B%5Cpi%29%2Bi%5Ccdot+sin%282%5Cpi%5Cfrac%7Bk%7D%7Bn%7D%2B%5Cpi%29%3D-cos%282%5Cpi%5Cfrac%7Bk%7D%7Bn%7D%29-i%5Ccdot+sin%282%5Cpi%5Cfrac%7Bk%7D%7Bn%7D%29%3D-%5Comega_%7Bn%7D%5E%7Bk%7D" alt="\omega_{n}^{k+\frac{n}{2}}=cos(2\pi\frac{k+\frac{n}{2}}{n})+i\cdot sin(2\pi\frac{k+\frac{n}{2}}{n})=cos(2\pi\frac{k}{n}+\pi)+i\cdot sin(2\pi\frac{k}{n}+\pi)=-cos(2\pi\frac{k}{n})-i\cdot sin(2\pi\frac{k}{n})=-\omega_{n}^{k}"></p><p>最后一步由三角恒等变换得到。</p><h2 id="FFT-法法塔"><a href="#FFT-法法塔" class="headerlink" title="FFT(法法塔)"></a>FFT(法法塔)</h2><p><img src="http://blog.miskcoo.com/wp-content/uploads/2015/04/polynomial-multiplication.png" alt="FFT"></p><p>但是这样的操作常数爆炸..FFT本身的常数就很奆..</p><p>观察分组情况</p><p><img src="https://pic1.zhimg.com/80/v2-953d1cd6c91a84197775d504defe302c_hd.jpg" alt="MD"></p><p><img src="/2018/02/25/FFT-NTT学习笔记/3.jpg" alt="MP"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归爆栈 LUOGU热掉77分 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> complex COMPLEX</span></span><br><span class="line"><span class="comment">//complex关键字也是服了 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2</span>*<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>)&#123;x=xx,y=yy;&#125;</span><br><span class="line">&#125;a[MAXN],b[MAXN];</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a,<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x , a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a,<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x , a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a,<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y , a.x*b.y+a.y*b.x);&#125;<span class="comment">//不懂的看复数的运算那部分 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">int</span> limit,<span class="keyword">complex</span> *a,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(limit==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">complex</span> a1[limit&gt;&gt;<span class="number">1</span>],a2[limit&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;i+=<span class="number">2</span>)</span><br><span class="line">        a1[i&gt;&gt;<span class="number">1</span>]=a[i],a2[i&gt;&gt;<span class="number">1</span>]=a[i+<span class="number">1</span>];</span><br><span class="line">    FFT(limit&gt;&gt;<span class="number">1</span>,a1,type);</span><br><span class="line">    FFT(limit&gt;&gt;<span class="number">1</span>,a2,type);</span><br><span class="line">    <span class="keyword">complex</span> Wn=<span class="keyword">complex</span>(<span class="built_in">cos</span>(<span class="number">2.0</span>*Pi/limit) , type*<span class="built_in">sin</span>(<span class="number">2.0</span>*Pi/limit)),w=<span class="keyword">complex</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(limit&gt;&gt;<span class="number">1</span>);i++,w=w*Wn)<span class="comment">//这里的w相当于公式中的k </span></span><br><span class="line">        a[i]=a1[i]+w*a2[i],</span><br><span class="line">        a[i+(limit&gt;&gt;<span class="number">1</span>)]=a1[i]-w*a2[i];<span class="comment">//利用单位根的性质，O(1)得到另一部分 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N=read(),M=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;i++) a[i].x=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) b[i].x=read();</span><br><span class="line">    <span class="keyword">int</span> limit=<span class="number">1</span>;<span class="keyword">while</span>(limit&lt;=N+M) limit&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    FFT(limit,a,<span class="number">1</span>);</span><br><span class="line">    FFT(limit,b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;i++)</span><br><span class="line">        a[i]=a[i]*b[i];</span><br><span class="line">    FFT(limit,a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N+M;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,(<span class="keyword">int</span>)(a[i].x/limit+<span class="number">0.5</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归爆栈..没话说了.</p><p>改迭代</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> complex COMPLEX</span></span><br><span class="line"><span class="comment">//complex关键字也是服了 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>)&#123;x=xx,y=yy;&#125;</span><br><span class="line">&#125;a[MAXN],b[MAXN];</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a,<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x , a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a,<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x , a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;a,<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y , a.x*b.y+a.y*b.x);&#125;<span class="comment">//不懂的看复数的运算那部分 </span></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> l,r[MAXN];</span><br><span class="line"><span class="keyword">int</span> limit=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *A,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++)</span><br><span class="line"><span class="keyword">if</span> (i &lt; r[i]) swap(A[i],A[r[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; limit; mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">complex Wn(cos(Pi/mid),type*sin(Pi/mid));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> R = mid&lt;&lt;<span class="number">1</span>,j = <span class="number">0</span>; j &lt;limit;j+=R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; k++,w=w*Wn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">complex</span> x=A[j+k],y=w*A[j+mid+k];</span><br><span class="line">A[j+k] = x+y;</span><br><span class="line">A[j+mid+k] = x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N=read(),M=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;i++) a[i].x=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) b[i].x=read();</span><br><span class="line">    <span class="keyword">while</span>(limit&lt;=N+M) limit&lt;&lt;=<span class="number">1</span>,l++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;i++)</span><br><span class="line">        r[i]= ( r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span> )| ( (i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>) ) ;</span><br><span class="line">    FFT(a,<span class="number">1</span>);</span><br><span class="line">    FFT(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;i++) a[i]=a[i]*b[i];</span><br><span class="line">    FFT(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N+M;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,(<span class="keyword">int</span>)(a[i].x/limit+<span class="number">0.5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说算是差不多<del>学会了</del>FFT</p><p><strong>上道题目 </strong></p><p><a href="https://www.luogu.org/problemnew/show/P1919" target="_blank" rel="noopener">LUOGU-1919</a></p><p>大整数乘法用FFT来跑</p><p>其实就是规定了$x=10$的FFT.</p><p>注意前导0的处理,具体实现看代码.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> complex COMPLEX </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;c=getchar();&#125;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line"><span class="keyword">return</span> c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>)&#123;x=xx,y=yy;&#125;</span><br><span class="line">&#125;a[MAXN],b[MAXN];</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x+b.x , a.y+b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x-b.x , a.y-b.y);&#125;</span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">complex</span> a,<span class="keyword">complex</span> b)&#123; <span class="keyword">return</span> <span class="keyword">complex</span>(a.x*b.x-a.y*b.y , a.x*b.y+a.y*b.x);&#125;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> l,r[MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> limit=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *A,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++)</span><br><span class="line"><span class="keyword">if</span> (i &lt; r[i]) swap(A[i],A[r[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; limit; mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">complex Wn(cos(Pi/mid),type*sin(Pi/mid));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> R = mid&lt;&lt;<span class="number">1</span>,j = <span class="number">0</span>; j &lt;limit;j+=R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; k++,w=w*Wn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">complex</span> x=A[j+k],y=w*A[j+mid+k];</span><br><span class="line">A[j+k] = x+y;</span><br><span class="line">A[j+mid+k] = x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N); </span><br><span class="line"><span class="keyword">int</span> M = N;</span><br><span class="line">    M--,N--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;i++) a[i].x=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=M;i++) b[i].x=read();</span><br><span class="line">    <span class="keyword">while</span>(limit&lt;=N+M) limit&lt;&lt;=<span class="number">1</span>,l++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;i++)</span><br><span class="line">        r[i]= ( r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span> )| ( (i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>) ) ;</span><br><span class="line">    FFT(a,<span class="number">1</span>);</span><br><span class="line">    FFT(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=limit;i++) a[i]=a[i]*b[i];</span><br><span class="line">    FFT(a,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=N+M;i++)</span><br><span class="line">    ans[i+<span class="number">100</span>] = (<span class="keyword">int</span>)(a[i].x/limit+<span class="number">0.5</span>);<span class="comment">//向右边平移100位来处理前导0 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=M+N+<span class="number">100</span>; j&gt;=<span class="number">100</span>; j--)  </span><br><span class="line">    <span class="keyword">while</span>(ans[j] &gt;= <span class="number">10</span>) ans[j<span class="number">-1</span>] += ans[j]/<span class="number">10</span>,ans[j]%=<span class="number">10</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!ans[i]) i++;</span><br><span class="line">    <span class="keyword">for</span> (;i&lt;=M+N+<span class="number">100</span>;i++) </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h2><p>$NTT$就是快速数论变换,是FFT的虚部变成非浮点而改为Mod一个值的应用.</p><p>实部是可以不管的.我们的重点是把虚部转化为其他便于计算的东西.</p><p>掌握了关于原根的知识后。就可以得到</p><script type="math/tex; mode=display">W_n^n \equiv g^{P-1}\mod{1}</script><p>所以这个形式只能满足一部分形如$2^n*p+1$的质数,这种质数因为满足费马小定理$a^p\equiv{1}\mod{p}$</p><p>叫做<strong>费马质数</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能Mod费马质数的NTT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL a[<span class="number">400010</span>],b[<span class="number">400010</span>],c[<span class="number">400010</span>];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1004535809</span>,g=<span class="number">3</span>,n,m,bin[<span class="number">400010</span>]; </span><br><span class="line"><span class="comment">//p = 2^21*479+1 (Fema Prime)</span></span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL a,<span class="keyword">int</span> b,<span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=ans*a%mod;</span><br><span class="line">        a=a*a%mod;b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(LL *a,<span class="keyword">int</span> n,<span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i&lt;bin[i]) swap(a[i],a[bin[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL wn=<span class="built_in">pow</span>((LL)g,op==<span class="number">1</span>?(p<span class="number">-1</span>)/(<span class="number">2</span>*i):p<span class="number">-1</span>-(p<span class="number">-1</span>)/(<span class="number">2</span>*i),p),t,w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                t=w*a[i+j+k]%p;w=w*wn%p;</span><br><span class="line">                a[i+j+k]=(a[j+k]-t+p)%p;a[j+k]=(a[j+k]+t)%p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL inv=<span class="built_in">pow</span>(n,p<span class="number">-2</span>,p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=a[i]*inv%p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">    m+=n;n=<span class="number">1</span>;<span class="keyword">while</span>(n&lt;=m) n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) bin[i]=(bin[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(n&gt;&gt;<span class="number">1</span>));</span><br><span class="line">    ntt(a,n,<span class="number">1</span>);ntt(b,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) c[i]=a[i]*b[i];ntt(c,n,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,c[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如果不是费马质数</p><p>取一个任意的数取模</p><p>岂不是要$gg$</p><p><img src="/2018/02/25/FFT-NTT学习笔记/1.jpg" alt="MD"></p><p>因为MYY在论文中提出三次求Mod再CRT(China Remainder Theorem)的做法</p><p>就被称为MTT了(雾</p><p>模板题</p><p><a href="https://www.luogu.org/problemnew/show/P4245" target="_blank" rel="noopener">MTT,LUOGU-4245</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于任意Mod的NTT</span></span><br><span class="line"><span class="comment">//用MYY的三模法.</span></span><br><span class="line"><span class="comment">//%%%%% </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> P=<span class="number">23333333</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M[]= &#123;<span class="number">998244353</span>,<span class="number">1004535809</span>,<span class="number">469762049</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> G[]= &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> ll _M=(ll)M[<span class="number">0</span>]*M[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">ll ret=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; b; b&gt;&gt;=<span class="number">1</span>,a=a*a%p)</span><br><span class="line"><span class="keyword">if</span> (b&amp;<span class="number">1</span>)</span><br><span class="line">ret=ret*a%p;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,ll p)</span> </span>&#123;</span><br><span class="line">a%=p;</span><br><span class="line">b%=p;</span><br><span class="line"><span class="keyword">return</span> ((a*b-(ll)((ll)((<span class="keyword">long</span> <span class="keyword">double</span>)a/p*b+<span class="number">1e-3</span>)*p))%p+p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m1=M[<span class="number">0</span>],m2=M[<span class="number">1</span>],m3=M[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv1=Pow(m1%m2,m2<span class="number">-2</span>,m2),inv2=Pow(m2%m1,m1<span class="number">-2</span>,m1),inv12=Pow(_M%m3,m3<span class="number">-2</span>,m3);</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">CRT</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> a2,<span class="keyword">int</span> a3)</span> </span>&#123;</span><br><span class="line">ll A=(mul((ll)a1*m2%_M,inv2,_M)+mul((ll)a2*m1%_M,inv1,_M))%_M;</span><br><span class="line">ll k=((ll)a3+m3-A%m3)*inv12%m3;</span><br><span class="line"><span class="keyword">return</span> (k*(_M%P)+A)%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">264000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NTT</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> P,G;</span><br><span class="line"><span class="keyword">int</span> num,w[<span class="number">2</span>][N];</span><br><span class="line"><span class="keyword">int</span> R[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> _P,<span class="keyword">int</span> _G,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">num=m;</span><br><span class="line">P=_P;G=_G;</span><br><span class="line"><span class="keyword">int</span> g=Pow(G,(P<span class="number">-1</span>)/num,P);</span><br><span class="line">w[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;num; i++) w[<span class="number">1</span>][i]=(ll)w[<span class="number">1</span>][i<span class="number">-1</span>]*g%P;</span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;num; i++) w[<span class="number">0</span>][i]=w[<span class="number">1</span>][num-i];</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">0</span>;<span class="keyword">while</span> (m&gt;&gt;=<span class="number">1</span>) L++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=num; i++) R[i]=(R[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(L<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span> (i&lt;R[i]) swap(a[i],a[R[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;i; k++) &#123;</span><br><span class="line"><span class="keyword">int</span> x=a[j+k],y=(ll)a[j+i+k]*w[r][num/(i&lt;&lt;<span class="number">1</span>)*k]%P;</span><br><span class="line">a[j+k]=(x+y)%P;</span><br><span class="line">a[j+i+k]=(x+P-y)%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!r) <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,inv=Pow(n,P<span class="number">-2</span>,P); i&lt;n; i++) a[i]=(ll)a[i]*inv%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ntt[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,n1,n2;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][N];</span><br><span class="line"><span class="keyword">int</span> A[N],B[N],C[N],D[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n1,&amp;n2,&amp;P);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n1; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;A[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n2; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;B[i]);</span><br><span class="line"><span class="keyword">for</span> (m=<span class="number">1</span>; m&lt;=(n1+n2); m&lt;&lt;=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) ntt[i].Pre(M[i],G[i],m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(C,A,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(m+<span class="number">5</span>));</span><br><span class="line"><span class="built_in">memcpy</span>(D,B,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(m+<span class="number">5</span>));</span><br><span class="line">ntt[i].FFT(C,m,<span class="number">1</span>);</span><br><span class="line">ntt[i].FFT(D,m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++) C[j]=(ll)C[j]*D[j]%ntt[i].P;</span><br><span class="line">ntt[i].FFT(C,m,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++) a[i][j]=C[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n1+n2; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,CRT(a[<span class="number">0</span>][i],a[<span class="number">1</span>][i],a[<span class="number">2</span>][i]));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;&lt;del&gt;史诗级巨坑填完再划&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;主要参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;download\多项式.pdf&quot;&gt;lych_cys梁大的讲解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;download\国家集训队2016论文集.pdf&quot;&gt;MYY的国家集训队论文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://oi.men.ci/fft-notes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Menci’s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/31584464&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;邓祎明的知乎专栏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/Blog-of-Eden/p/7779717.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;学长方尤乐的blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform#i-15&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Miskcoo’s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（和一些奇奇怪怪的东西&lt;/p&gt;
    
    </summary>
    
      <category term="FFT/NTT" scheme="http://yoursite.com/categories/FFT-NTT/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[UVa-11525] Permutation 树状数组求kth element+康托展开</title>
    <link href="http://yoursite.com/2018/02/22/UVa-11525-Permutation-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%B1%82kth-element-%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
    <id>http://yoursite.com/2018/02/22/UVa-11525-Permutation-树状数组求kth-element-康托展开/</id>
    <published>2018-02-22T11:57:53.000Z</published>
    <updated>2018-02-22T13:23:30.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门: <a href="https://vjudge.net/problem/UVA-11525" target="_blank" rel="noopener">UVa-11525</a><br>题目大意:<br>输出<script type="math/tex">1..n</script>的全部排列字典序大小的第<script type="math/tex">\sum_{i=1}^{k} S_i * (K-i)!</script>个</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>康托展开了解一下</p><script type="math/tex; mode=display">X = a[n]*(n-1)!+a[n-1]*(n-2)!+...+a[1]*0!</script><p>其中a[i]为第<script type="math/tex">i</script>位往右边的数里第几大<br>其实和数位dp一个道理。<br>具体的栗子（摘自cnblog）</p><script type="math/tex; mode=display">如我想知道321是{1,2,3}中第几个大的数可以这样考虑 ：\\\\\　　第一位是3，当第一位的数小于3时，\\\\　　那排列数小于321 如 123、 213 ，小于3的数有1、2 。\\\\　　所以有2*2!个。再看小于第二位2的：小于2的数只有一个就是1 ，\\\\所以有1*1!=1 所以小于321的{1,2,3}排列数有2*2!+1*1!=5个 。\\\\所以321是第6个大的数。 \\\\2*2!+1*1!是康托展开。</script><p>然后是树状数组（Fenwick树）求第k小</p><p>这其实是一个反向枚举构造+二分的过程</p><p>具体看代码实现吧。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">int</span> c[maxn], K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(pos&lt;=K)&#123;</span><br><span class="line">c[pos]++;</span><br><span class="line">pos+=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=c[pos];</span><br><span class="line">pos-=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BS</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=K+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(mid-query(mid)&gt;=num) r=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">int</span> k=BS(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%c"</span>,k,(i==K<span class="number">-1</span>)?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">add(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门: &lt;a href=&quot;https://vjudge.net/problem/UVA-11525&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[UVa-12299] RMQ with Shifts 线段树单点修改区间查询</title>
    <link href="http://yoursite.com/2018/02/22/UVa-12299-RMQ-with-Shifts-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/02/22/UVa-12299-RMQ-with-Shifts-线段树单点修改区间查询/</id>
    <published>2018-02-22T11:56:56.000Z</published>
    <updated>2018-02-22T12:25:58.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门: <a href="https://vjudge.net/problem/UVA-12299" target="_blank" rel="noopener">UVa-12299</a></p><p>题目大意:在传统的RMQ问题上多附加一个<script type="math/tex">shift(x_1,x_2,...,x_n)</script>的操作,使得这些操作的数列轮换一位。</p><p>给出的规模是<script type="math/tex">n \leq 100000,q \leq 250000</script></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>看传送门吧.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>但是,,输入中操作行的字符串长度小于等于30.</p><p>也就是说shift操作里的元素不会很多。</p><p>那么就暴力地上吧.</p><p>于是第一次写出来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> req;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;r,w;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">if</span>(ch==<span class="string">'\n'</span>)&#123;x=<span class="number">-2333333</span>;<span class="keyword">return</span>;&#125;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span> (ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>],minv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;minv[rt] = min(minv[lc],minv[rc]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(lc,l,m);</span><br><span class="line">build(rc,m+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span> <span class="comment">// LR修改区间 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt;= m) update(p,v,L,m,lc);</span><br><span class="line"><span class="keyword">else</span> update(p,v,m+<span class="number">1</span>,R,rc);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = INT_MAX,m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> minv[rt];</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= m) ans = min(ans,query(ql,qr,l,m,lc));</span><br><span class="line"><span class="keyword">if</span> (qr &gt; m) ans = min(ans,query(ql,qr,m+<span class="number">1</span>,r,rc));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n); read(q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">req = <span class="string">'6'</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(b,a,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isalpha</span>(req)) req = getchar();</span><br><span class="line"><span class="keyword">if</span> (req == <span class="string">'q'</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tree.query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (req == <span class="string">'s'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">r.clear();</span><br><span class="line">read(x);</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">-2333333</span>)</span><br><span class="line">&#123;</span><br><span class="line">r.push_back(x);</span><br><span class="line">read(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("Elements: ");</span></span><br><span class="line"><span class="comment">//printf("%d ",r[i]);</span></span><br><span class="line"><span class="comment">//puts("");</span></span><br><span class="line"><span class="keyword">if</span> (i == r.size()<span class="number">-1</span>) a[r[i]] = b[r[<span class="number">0</span>]],Tree.update(r[i],b[r[<span class="number">0</span>]],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> a[r[i]] = b[r[i+<span class="number">1</span>]],Tree.update(r[i],b[r[i+<span class="number">1</span>]],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间字符串处理卡了好久哦.不得不在快读中加判断换行返回-2333333来皮一波.</p><p>但是T飞了..</p><p><img src="/2018/02/22/UVa-12299-RMQ-with-Shifts-线段树单点修改区间查询/1.jpg" alt="Markdown"></p><p>检查了半天没觉得哪里不对劲,然后尝试着把vector改成了定长数组,把memcpy去掉.</p><p>就过了..</p><p>实践证明,memcpy确实慢的可以.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> req;</span><br><span class="line"><span class="keyword">int</span> r[<span class="number">41</span>],w[<span class="number">41</span>],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">if</span>(ch==<span class="string">'\n'</span>)&#123;x=<span class="number">-2333333</span>;<span class="keyword">return</span>;&#125;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span> (ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>],minv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;minv[rt] = min(minv[lc],minv[rc]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(lc,l,m);</span><br><span class="line">build(rc,m+<span class="number">1</span>,r);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span> <span class="comment">// LR修改区间 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt;= m) update(p,v,L,m,lc);</span><br><span class="line"><span class="keyword">else</span> update(p,v,m+<span class="number">1</span>,R,rc);</span><br><span class="line">pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = INT_MAX,m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> minv[rt];</span><br><span class="line"><span class="keyword">if</span> (ql &lt;= m) ans = min(ans,query(ql,qr,l,m,lc));</span><br><span class="line"><span class="keyword">if</span> (qr &gt; m) ans = min(ans,query(ql,qr,m+<span class="number">1</span>,r,rc));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n); read(q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">req = <span class="string">'6'</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isalpha</span>(req)) req = getchar();</span><br><span class="line"><span class="keyword">if</span> (req == <span class="string">'q'</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">read(x),read(y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tree.query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (req == <span class="string">'s'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">read(x);</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">-2333333</span>)</span><br><span class="line">&#123;</span><br><span class="line">r[++cnt] = x;</span><br><span class="line">w[cnt] = a[x];</span><br><span class="line">read(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt<span class="number">-1</span>; i++)</span><br><span class="line">a[r[i]] = w[i+<span class="number">1</span>],Tree.update(r[i],w[i+<span class="number">1</span>],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">a[r[cnt]] = w[<span class="number">1</span>],Tree.update(r[cnt],w[<span class="number">1</span>],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门: &lt;a href=&quot;https://vjudge.net/problem/UVA-12299&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-5902] Movie Collection Fenwick树</title>
    <link href="http://yoursite.com/2018/02/22/LA-5902-Movie-Collection-Fenwick%E6%A0%91/"/>
    <id>http://yoursite.com/2018/02/22/LA-5902-Movie-Collection-Fenwick树/</id>
    <published>2018-02-22T11:54:26.000Z</published>
    <updated>2018-02-22T12:42:25.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-5902" target="_blank" rel="noopener">LA-5902</a></p><p>题目大意:有<script type="math/tex">n</script>个物品从上到下放置,并且标号<script type="math/tex">1..n</script>,有<script type="math/tex">n</script>次查询,每次查询标号为<script type="math/tex">x</script>的物品现在的位置（<script type="math/tex">0..n</script>,即该物品上面有多少个物品）,同时将该物品取出放到第<script type="math/tex">0</script>号位置。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>还是不难想到的,将1~n件物品重新编号,1~n标为n~1,每次拿出一件物品x,再将其重新编号,如果是第一次拿出就标为n+1…..依次递增,然后将之前的编号删掉,插入新的编号即可，用一个树状数组维护</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2</span>*<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"><span class="keyword">int</span> pos[maxn],c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;ret+=c[x];x-=lowbit(x);&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=maxn)</span><br><span class="line">&#123;</span><br><span class="line">c[x]+=d;</span><br><span class="line">x+=lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">pos[i] = n + <span class="number">1</span> - i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)</span><br><span class="line">c[i] = lowbit(i);</span><br><span class="line"><span class="keyword">int</span> t = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">read(id);</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,n-sum(pos[id]));</span><br><span class="line">add(pos[id],<span class="number">-1</span>);</span><br><span class="line">pos[id] = ++t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看Rank榜是第一.</p><p>窃喜</p><p><img src="/2018/02/22/LA-5902-Movie-Collection-Fenwick树/1.jpg" alt="Markdown"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVALive-5902&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-4108] Skyline 线段树/树状数组+二分</title>
    <link href="http://yoursite.com/2018/02/22/LA-4108-Skyline-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2018/02/22/LA-4108-Skyline-线段树-树状数组-二分/</id>
    <published>2018-02-22T11:53:14.000Z</published>
    <updated>2018-02-22T12:58:26.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门: <a href="https://vjudge.net/problem/UVALive-4108" target="_blank" rel="noopener">LA-4108</a></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>Sample Input<br>1<br>3<br>5 11 3<br>1 10 1<br>3 13 2<br>0<br>Sample Output<br>14</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>线段树区间更新维护最大值即可</p><p>裸题啊</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>],maxv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">maxv[rt] = max(maxv[lc],maxv[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lazy[lc] = max(lazy[lc],lazy[rt]);</span><br><span class="line">lazy[rc] = max(lazy[rc],lazy[rt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lazy[rt] &gt; v) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r &amp;&amp; v &gt;= maxv[rt])</span><br><span class="line">&#123;</span><br><span class="line">ans += (r-l+<span class="number">1</span>);</span><br><span class="line">maxv[rt] = v;</span><br><span class="line">lazy[rt] = v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> ;</span><br><span class="line">Pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= m) Update(lc,l,m,x,y,v);</span><br><span class="line"><span class="keyword">if</span> (y &gt; m) Update(rc,m+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,f,g,h;</span><br><span class="line">read(t);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(Tree.lazy,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.lazy));</span><br><span class="line"><span class="built_in">memset</span>(Tree.maxv,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.maxv));</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">read(f),read(g),read(h);</span><br><span class="line">Tree.Update(<span class="number">1</span>,<span class="number">1</span>,maxn,f,g<span class="number">-1</span>,h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门: &lt;a href=&quot;https://vjudge.net/problem/UVALive-4108&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-2191] Potentiometers 树状数组</title>
    <link href="http://yoursite.com/2018/02/22/LA-2191-Potentiometers-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/02/22/LA-2191-Potentiometers-树状数组/</id>
    <published>2018-02-22T11:52:18.000Z</published>
    <updated>2018-02-22T13:23:22.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-2191" target="_blank" rel="noopener">LA-2191</a></p><p>题目大意:基本树状数组的操作，把add(x,d)改成了S(x,d)，把第x位上的变成d.</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>3<br>100<br>100<br>100<br>M 1 1<br>M 1 3<br>S 2 200<br>M 1 2<br>S 3 0<br>M 2 3<br>END<br>10<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>M 1 10<br>END<br>0<br>Sample Output<br>Case 1:<br>100<br>300<br>300<br>200<br>Case 2:<br>55</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">200000</span>+<span class="number">10</span>;  </span><br><span class="line"><span class="keyword">int</span> a[MAXN],c[MAXN],n;  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)  </span><br><span class="line">    &#123;  </span><br><span class="line">        c[x]+=d;  </span><br><span class="line">        x+=lowbit(x);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> x=R;  </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        ans+=c[x];  </span><br><span class="line">        x-=lowbit(x);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> ans;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(kase!=<span class="number">1</span>)  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,kase++);  </span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);  </span><br><span class="line">                add(i,a[i]);  </span><br><span class="line">        &#125;                 </span><br><span class="line">        <span class="keyword">char</span> action[<span class="number">10</span>];          </span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,action),<span class="built_in">strcmp</span>(action,<span class="string">"END"</span>))  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> x,y;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);  </span><br><span class="line">            <span class="keyword">if</span>(action[<span class="number">0</span>]==<span class="string">'S'</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                    add(x,y-a[x]);  </span><br><span class="line">                    a[x]=y;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">            &#123; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum(x,y)-sum(<span class="number">1</span>,x<span class="number">-1</span>));&#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVALive-2191&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>[LA-4730] Kingdom 并查集+线段树</title>
    <link href="http://yoursite.com/2018/02/22/LA-4730-Kingdom-%E5%B9%B6%E6%9F%A5%E9%9B%86-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://yoursite.com/2018/02/22/LA-4730-Kingdom-并查集-线段树/</id>
    <published>2018-02-22T11:51:44.000Z</published>
    <updated>2018-02-22T13:23:25.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-4730" target="_blank" rel="noopener">LA-4730</a></p><p>题目大意：</p><p>There were N cities in an ancient kingdom. In the beginning of the  kingdom, all cities were isolated. Kings ordered their subjects to  construct roads connecting cities. A lot of roads were built with time.  Every road was always constructed along the line segment between two  cities. All cities are partitioned into disjoint components of cities  by road-connectivity. A connected component of cities was called a  state. A state consists of cities and roads connecting them.</p><p>A historical record tells a time sequence of road constructions in  order. A road connecting two cities<em>A</em> and <em>B</em> doesn’t intersect with  other roads at a point except for<em>A</em> and <em>B</em>. Before construction,<em>A</em>  and <em>B</em> may have belonged to the same state or different states. After  construction,<em>A</em> and <em>B</em> would belong to a same state, i.e., two states  would merge into a state if needed.</p><p>Prof. Kim, a historian, is concerned about the following question: How  many states does a horizontal line (corresponding to the latitude of a  specific place) pass by at a moment of the past? The figure below shows  an example of a configuration of roads at some moment. A circle  represents a city and a line segment represents a road between two  cities. There are 3 states. A line with y = 4.5 passes by two states  with total 8 cities and a line with y = 6.5 passes by one state with 5  cities.</p><p>（逃</p><p>正经：</p><p>平面上有n个城市，初始时城市之间没有任何双向道路相连。你的任务是一次执行以下指令。</p><p>road A B：在城市A和B之间连一条双向道路，保证这条道路不和其他道路在非端点处相交。</p><p>line C：询问一条Y=C的水平线和多少个州相交，以及这些州一共包含多少座城市。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到包含多少城市想到并查集。这里如果单个枚举的话很费时间会T飞</p><p>我们就用线段树来维护区间内的城市数量和州的数量。</p><p>发现其实这题与x轴上的大小值没有任何关系。</p><p>只要考虑y轴坐标的上下最值即可</p><p>注意分类讨论。</p><p>以及并查集的时候别忘记 路径压缩</p><p>线段树update别写炸</p><p>就A了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>3617啊珂怕</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="keyword">int</span> miny[maxn],maxy[maxn],n,m,fa[maxn],d[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = getf(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> sum1[maxn&lt;&lt;<span class="number">2</span>],sum2[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> lazy1[maxn&lt;&lt;<span class="number">2</span>],lazy2[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum1[rt] = sum1[rc] + sum1[lc];</span><br><span class="line">sum2[rt] = sum2[rc] + sum2[lc];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lazy1[rt])</span><br><span class="line">&#123;</span><br><span class="line">sum1[lc] += lazy1[rt];</span><br><span class="line">sum2[rc] += lazy1[rt];</span><br><span class="line">lazy1[lc] += lazy1[rt];</span><br><span class="line">lazy1[rc] += lazy1[rt];</span><br><span class="line">lazy1[rt] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (lazy2[rt])</span><br><span class="line">&#123;</span><br><span class="line">sum1[lc] += lazy2[rt];</span><br><span class="line">sum2[rc] += lazy2[rt];</span><br><span class="line">lazy2[lc] += lazy2[rt];</span><br><span class="line">lazy2[rc] += lazy2[rt];</span><br><span class="line">lazy2[rt] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; R &gt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!f)</span><br><span class="line">&#123;</span><br><span class="line">lazy1[rt] += x;</span><br><span class="line">sum1[rt] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lazy2[rt] += x;</span><br><span class="line">sum2[rt] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line">Pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= m) update(lc,l,m,L,R,x,f);</span><br><span class="line"><span class="keyword">if</span> (r &gt; m) update(rc,m+<span class="number">1</span>,r,L,R,x,f);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> rt;</span><br><span class="line">Pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (c &lt;= m) <span class="keyword">return</span> query(lc,l,m,c);</span><br><span class="line"><span class="keyword">else</span> Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">set_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(miny,<span class="number">0</span>,<span class="keyword">sizeof</span>(miny));</span><br><span class="line"><span class="built_in">memset</span>(maxy,<span class="number">0</span>,<span class="keyword">sizeof</span>(maxy));</span><br><span class="line"><span class="built_in">memset</span>(Tree.lazy1,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.lazy1));</span><br><span class="line"><span class="built_in">memset</span>(Tree.sum1,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.sum1));</span><br><span class="line"><span class="built_in">memset</span>(Tree.lazy2,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.lazy2));</span><br><span class="line"><span class="built_in">memset</span>(Tree.sum2,<span class="number">0</span>,<span class="keyword">sizeof</span>(Tree.sum2));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fa[i] = i;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,Lim;</span><br><span class="line"><span class="keyword">int</span> x,y;<span class="keyword">double</span> c;</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">13</span>];</span><br><span class="line">read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">Lim = <span class="number">-0x7fffffff</span>;</span><br><span class="line">read(n);</span><br><span class="line">set_init(); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t1,t2;</span><br><span class="line">read(t1),read(t2);</span><br><span class="line">miny[i] = maxy[i] = t2;</span><br><span class="line">Lim = max(Lim,t2);</span><br><span class="line">&#125;</span><br><span class="line">Lim++;</span><br><span class="line">read(m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>] == <span class="string">'r'</span>)</span><br><span class="line">&#123;</span><br><span class="line">read(x);read(y);</span><br><span class="line"><span class="keyword">int</span> px = getf(x),py = getf(y);</span><br><span class="line"><span class="keyword">if</span>(px == py) ;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maxy[px] &gt; maxy[py])</span><br><span class="line">swap(px,py);</span><br><span class="line"><span class="keyword">if</span> (miny[py] &gt; maxy[px]) &#123;</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, miny[py], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, miny[py], d[px] + d[py], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[px] + <span class="number">1</span>, maxy[px], d[py], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[py] + <span class="number">1</span>, maxy[py], d[px], <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (miny[px] &gt; miny[py]) &#123;</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[px] + <span class="number">1</span>, maxy[px], <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[py] + <span class="number">1</span>, miny[px], d[px], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, maxy[py], d[px], <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[py] + <span class="number">1</span>, maxy[px], <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, miny[px] + <span class="number">1</span>, miny[py], d[py], <span class="number">1</span>);</span><br><span class="line">                        Tree.update(<span class="number">1</span>, <span class="number">1</span>, Lim, maxy[px] + <span class="number">1</span>, maxy[py], d[px], <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    fa[px] = py;</span><br><span class="line">                    d[py] += d[px];</span><br><span class="line">                    miny[py] = min(miny[py], miny[px]);</span><br><span class="line">                    maxy[py] = max(maxy[py], maxy[px]);</span><br><span class="line">                &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;c);</span><br><span class="line"><span class="keyword">int</span> k = Tree.query(<span class="number">1</span>,<span class="number">1</span>,Lim,(<span class="keyword">int</span>)(c+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,Tree.sum1[k],Tree.sum2[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;传送门:&lt;a href=&quot;https://vjudge.net/problem/UVALive-4730&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;解题报告&quot;" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>区间信息的维护和查询学习笔记</title>
    <link href="http://yoursite.com/2018/02/18/%E5%8C%BA%E9%97%B4%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BB%B4%E6%8A%A4%E5%92%8C%E6%9F%A5%E8%AF%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/18/区间信息的维护和查询学习笔记/</id>
    <published>2018-02-18T10:53:09.000Z</published>
    <updated>2018-02-19T14:34:08.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉索引树Binary-Index-Tree（树状数组）"><a href="#二叉索引树Binary-Index-Tree（树状数组）" class="headerlink" title="二叉索引树Binary Index Tree（树状数组）"></a>二叉索引树Binary Index Tree（树状数组）</h2><p>动态的连续和查询问题,有n个元素的数组<br>设计一个数据结构,支持以下两种操作:<br>Add(x,d) 让A[x]增加d<br>Query(L,R) 计算A[L]+..+A[R].</p><p>首先介绍一个玩意叫做lowbit(x)</p><p>对于正整数x我们定义它的二进制最右边的1的值为lowbit(x)<br>在讲BIT之前，我们来先了解一个函数：对于任意正整数x，我们定义lowbit(x)为x的二进制中最右边的1所对应的值，比如，5的二进制是101，那么lowbit(5)= 1；4的二进制是100，那么lowbit(4) = 4；这里用到的是按位运算，请读者自己去查阅关于这点的资料。但为什么呢？计算机里面的整数采用补码表示，-x实际上是x在二进制中按位取反，末位+1后的结果，二者按位取“与”之后，前面全部变成0，之后的lowbit保持不变。</p><p>简单的两个操作如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],C[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">ret += C[x];</span><br><span class="line">x -= lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line">C[x] += d;</span><br><span class="line">x += lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> (sum(r)-sum(l<span class="number">-1</span>));&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">a[i] = x;</span><br><span class="line">add(i,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要是add和sum这两个操作<br>可以用蓝书上两张图记忆</p><p><img src="/2018/02/18/区间信息的维护和查询学习笔记/1.jpg" alt="Markdown"></p><h2 id="LA-4329-Ping-Pong"><a href="#LA-4329-Ping-Pong" class="headerlink" title="LA-4329 Ping Pong"></a>LA-4329 Ping Pong</h2><p>传送门:<a href="https://vjudge.net/problem/UVALive-4329" target="_blank" rel="noopener">LA-4329</a></p><p>题目大意:<br>给定一个n个元素的数组，每个元素都有位置和实力两个权值，求三元组(al,ar,ap)的个数,其中要求无论是位置还是实力值都要满足l&lt;p&lt;r.</p><p>思路:加法原理，我们只要求出在第i个人当裁判的时候在前后比a[i]小或是比a[i]大的个数，就可以用乘法原理和加法原理计算了。<br>所以问题转化为求这个比a[i]小的c[i]和比a[i]大的d[i]即可.要求动态，这样就可以套上树状数组了。<br>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,a[maxn],C[maxn],D[maxn],bit[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x&amp;-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">ret += bit[x];</span><br><span class="line">x -= lowbit(x);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x &lt;= <span class="number">1e5</span>+<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">bit[x] += d;</span><br><span class="line">x += lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(bit,<span class="number">0</span>,<span class="keyword">sizeof</span>(bit));</span><br><span class="line"><span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="built_in">memset</span>(D,<span class="number">0</span>,<span class="keyword">sizeof</span>(D));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">add(a[i],<span class="number">1</span>);</span><br><span class="line">C[i] = sum(a[i]<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(bit,<span class="number">0</span>,<span class="keyword">sizeof</span>(bit));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">add(a[i],<span class="number">1</span>);</span><br><span class="line">D[i] = sum(a[i]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">ans+= C[i] * (n-i-D[i]) + D[i] * (i<span class="number">-1</span>-C[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RMQ问题"><a href="#RMQ问题" class="headerlink" title="RMQ问题"></a>RMQ问题</h2><p>RMQ,即Range Minimum Query,要求给出一个n个元素的数值,能够查询出区间范围内的元素最小值</p><h3 id="ST-Sparse-Table-表"><a href="#ST-Sparse-Table-表" class="headerlink" title="ST(Sparse Table)表"></a>ST(Sparse Table)表</h3><p>O(nlogn) ~ O(1)<br>利用递推的思想,令d(i,j)表示从i开始,长度为2^j的一段元素中的最小值,那么有这样的递推式<br>d(i,j)= min(d(i,j-1),d(i+2^(j-1),j-1));<br>不难写出这样的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RMQ问题 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn][<span class="number">100</span>]; <span class="comment">// d[maxn][maxlog(n)];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">d[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span>&lt;&lt;j) - <span class="number">1</span> &lt;= n; i++) <span class="comment">//可以从第0位置开始</span></span><br><span class="line">d[i][j] = min(d[i][j<span class="number">-1</span>],d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ_query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>)) &lt;= r-l+<span class="number">1</span>) k++;</span><br><span class="line"><span class="keyword">return</span> min(d[l][k],d[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,t,q,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">RMQ_init(a,n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,RMQ_query(l,r)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="笛卡尔树-LCA-±RMQ"><a href="#笛卡尔树-LCA-±RMQ" class="headerlink" title="笛卡尔树 + LCA + ±RMQ"></a>笛卡尔树 + LCA + ±RMQ</h3><p>O(n) ~ O(1)<br>这是个巨复杂的方法<br>很难写对 挂个链接就跑<br><a href="http://blog.csdn.net/john159151/article/details/19411523" target="_blank" rel="noopener">http://blog.csdn.net/john159151/article/details/19411523</a></p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>假设有编号从1到n的n个点，每个点都存了一些信息，用[L,R]表示下标从L到R的这些点。<br>线段树的用处就是，对编号连续的一些点进行修改或者统计操作，修改和统计的复杂度都是O(log2(n)).</p><p>线段树的原理，就是，将[1,n]分解成若干特定的子区间(数量不超过4 * n),然后，将每个区间[L,R]都分解为少量特定的子区间，通过对这些少量子区间的修改或者统计，来实现快速对[L,R]的修改或者统计。</p><p>所以满足用线段树解决的题目必须要能够符合区间加法的原则,保证分成的子区间L,R能够得到正确的统计结果，换言之，要能够满足子区间答案之和为总区间答案的原则。</p><p>符合区间加法的例子：<br>数字之和——总数字之和 = 左区间数字之和 + 右区间数字之和<br>最大公因数(GCD)——总GCD = gcd( 左区间GCD , 右区间GCD );<br>最大值——总最大值=max(左区间最大值，右区间最大值)</p><p>不符合区间加法的例子：<br>众数——只知道左右区间的众数，没法求总区间的众数<br>01序列的最长连续零——只知道左右区间的最长连续零，没法知道总的最长连续零</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>线段树本质上是维护下标为1,2,..,n的n个按顺序排列的数的信息，所以，其实是“点树”，是维护n的点的信息.    线段树是将每个区间[L,R]分解成[L,M]和[M+1,R] (其中M=(L+R)/2 这里的除法是整数除法，即对结果下取整)直到 L==R 为止。 开始时是区间[1,n] ,通过递归来逐步分解，假设根的高度为1的话，树的最大高度为</p><script type="math/tex; mode=display">\log_2(n-1)+2</script><p>线段树对于每个n的分解是唯一的，所以n相同的线段树结构相同，这也是实现可持久化线段树的基础。<br>关于lazy标记思想:<br>线段树的区间修改也是将区间分成子区间，但是要加一个标记，称作懒惰标记。<br>标记的含义：<br>本节点的统计信息已经根据标记更新过了，但是本节点的子节点仍需要进行更新。即，如果要给一个区间的所有值都加上1，那么，实际上并没有给这个区间的所有值都加上1，而是打个标记，记下来，这个节点所包含的区间需要加1.打上标记后，要根据标记更新本节点的统计信息，比如，如果本节点维护的是区间和，而本节点包含5个数，那么，打上+1的标记之后，要给本节点维护的和+5。这是向下延迟修改，但是向上显示的信息是修改以后的信息，所以查询的时候可以得到正确的结果。有的标记之间会相互影响，所以比较简单的做法是，每递归到一个区间，首先下推标记（若本节点有标记，就下推标记），然后再打上新的标记，这样仍然每个区间操作的复杂度是O(log2(n))。<br>标记有相对标记和绝对标记之分：<br>相对标记是将区间的所有数+a之类的操作，标记之间可以共存，跟打标记的顺序无关（跟顺序无关才是重点）。<br>所以，可以在区间修改的时候不下推标记，留到查询的时候再下推。<br>注意：如果区间修改时不下推标记，那么PushUp函数中，必须考虑本节点的标记。而如果所有操作都下推标记，那么PushUp函数可以不考虑本节点的标记，因为本节点的标记一定已经被下推了（也就是对本节点无效了）<br>绝对标记是将区间的所有数变成a之类的操作，打标记的顺序直接影响结果，所以这种标记在区间修改的时候必须下推旧标记，不然会出错。<br>注意，有多个标记的时候，标记下推的顺序也很重要，错误的下推顺序可能会导致错误。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在线段树中 我们可以采用数组构造完全二叉树的方式，使得如果根节点为rt，左儿子就为2 <em> rt,右儿子就为2 </em> rt+1.</p><p>但是可以装个bi这么写<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br></pre></td></tr></table></figure></p><h4 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h4><p>下面以codevs1080的单点修改求区间和的例子演示具体写法<br>传送门:<a href="http://codevs.cn/problem/1080/" target="_blank" rel="noopener">Codevs-1080</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;sum[rt] = sum[lc]+sum[rc];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lazy[rt])</span><br><span class="line">&#123;</span><br><span class="line">lazy[lc]+=lazy[rt];</span><br><span class="line">lazy[rc]+=lazy[rt];</span><br><span class="line">sum[lc]+=lazy[rt]*ln;</span><br><span class="line">sum[rc]+=lazy[rt]*rn;</span><br><span class="line">lazy[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">sum[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(l,mid,lc);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rc);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> q,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span><span class="comment">//A[q] += v;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">sum[rt] += v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (q &lt;= mid) update(q,v,l,mid,lc);</span><br><span class="line"><span class="keyword">else</span> update(q,v,mid+<span class="number">1</span>,r,rc);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> sum[rt];</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Pushdown(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= mid) ans += query(L,R,l,mid,lc);</span><br><span class="line"><span class="keyword">if</span> (R &gt; mid) ans += query(L,R,mid+<span class="number">1</span>,r,rc);</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">Tree.update(x,y,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Tree.query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一遍就过了真是神奇</p><h4 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h4><p>大致格式差不多长这个样子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line">修改点p的状态至它应该成为的状态</span><br><span class="line">p上附加上一个能够影响它整个子树的tag</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p上面有tag)</span><br><span class="line">&#123;</span><br><span class="line">将p的两个儿子调整至它们应该成为的状态</span><br><span class="line">清除p上的tag</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">Change(p的左儿子, l, m, L, R);</span><br><span class="line"><span class="keyword">if</span> (R &gt; m)</span><br><span class="line">Change(p的右儿子, m + <span class="number">1</span>, r, L, R);</span><br><span class="line">p的状态 = 它左右两个儿子的合并</span><br><span class="line">&#125;</span><br><span class="line">node Query(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line"><span class="keyword">return</span> p的状态</span><br><span class="line"><span class="keyword">if</span> (p上面有tag)</span><br><span class="line">&#123;</span><br><span class="line">将p的两个儿子调整至它们应该成为的状态</span><br><span class="line">清除p上的tag</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (R &lt;= m)</span><br><span class="line"><span class="keyword">return</span> Query(p的左儿子, l, m, L, R);</span><br><span class="line"><span class="keyword">if</span> (L &gt; m)</span><br><span class="line"><span class="keyword">return</span> Query(p的右儿子, m + <span class="number">1</span>, r, L, R);</span><br><span class="line"><span class="keyword">return</span> Query(p的左儿子, l, m, L, R) 和 Query(p的右儿子, m + <span class="number">1</span>, r, L, R) 的结果的合并</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个玩意撸了好久啊。蓝书问题3.2.4(2)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn];</span><br><span class="line"><span class="keyword">int</span> _sum,_min = INT_MAX,_max = -INT_MAX;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> minv[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn&lt;&lt;<span class="number">2</span>],maxv[maxn&lt;&lt;<span class="number">2</span>],sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[rt] = sum[lc]+sum[rc];</span><br><span class="line">minv[rt] = min(minv[lc],minv[rc]);</span><br><span class="line">maxv[rt] = max(maxv[lc],maxv[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lazy[rt])</span><br><span class="line">&#123;</span><br><span class="line">lazy[lc] += lazy[rt];</span><br><span class="line">lazy[rc] += lazy[rt];</span><br><span class="line">lazy[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Maintain</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[rt] = maxv[rt] = minv[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (r &gt; l)</span><br><span class="line">&#123;</span><br><span class="line">sum[rt] = sum[lc] + sum[rc];</span><br><span class="line">minv[rt] = min(minv[lc],minv[rc]);</span><br><span class="line">maxv[rt] = max(maxv[lc],maxv[rc]);</span><br><span class="line">&#125;</span><br><span class="line">minv[rt] += lazy[rt]; maxv[rt] += lazy[rt]; sum[rt] += lazy[rt] * (r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">minv[rt] = a[l];</span><br><span class="line">maxv[rt] = a[l];</span><br><span class="line">sum[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(l,mid,lc);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rc);</span><br><span class="line">Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; r &gt;= R)</span><br><span class="line">lazy[rt] += v;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Pushdown(rt); <span class="comment">//??</span></span><br><span class="line"><span class="keyword">int</span> mid = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) update(l,r,v,L,mid,lc);</span><br><span class="line"><span class="keyword">else</span> Maintain(lc,L,mid);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) update(l,r,v,mid+<span class="number">1</span>,R,rc);</span><br><span class="line"><span class="keyword">else</span> Maintain(rc,mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line">Maintain(rt,L,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> ret)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_sum = <span class="number">0</span>; _min = INT_MAX; _max = -INT_MAX;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d %d %d %d\n"</span>,rt,l,r,L,R,ret);</span><br><span class="line"><span class="keyword">if</span>(l &lt;= L &amp;&amp; r &gt;= R)</span><br><span class="line">&#123;</span><br><span class="line">_sum += sum[rt] + ret * (R-L+<span class="number">1</span>);</span><br><span class="line">_min = min(_min,minv[rt]+ret);</span><br><span class="line">_max = max(_max,maxv[rt]+ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) query(lc,l,r,L,mid,ret + lazy[rt]);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) query(rc,l,r,mid+<span class="number">1</span>,R,ret + lazy[rt]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">Tree.build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">Tree.update(a,b,c,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">Tree.query(<span class="number">1</span>,a,b,<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Minv: %d Maxv: %d Sumv: %d\n"</span>,_min,_max,_sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个写法稍微不一样的板子<br>但是和蓝书上面的两个问题是匹配的<br>挂上来咯<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>+ <span class="number">10</span>;</span><br><span class="line"><span class="comment">//update_add:把A[L]~A[R]的值全部加v_add</span></span><br><span class="line"><span class="comment">//update_set:把A[l]~A[R]的值设为v_set</span></span><br><span class="line"><span class="comment">//query:计算子序列的元素和，最小值，最大值</span></span><br><span class="line"><span class="keyword">int</span> sumv[<span class="number">2</span>*maxn],minv[<span class="number">2</span>*maxn],maxv[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> addv[<span class="number">2</span>*maxn], setv[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> y11, y2, v_add, v_set;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = <span class="number">2</span>*o + <span class="number">1</span>;</span><br><span class="line">    sumv[o] = minv[o] = maxv[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(setv[o] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        sumv[o] = setv[o] * (R-L+<span class="number">1</span>);</span><br><span class="line">        minv[o] = maxv[o] = setv[o];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(R &gt; L) &#123;</span><br><span class="line">        sumv[o] = sumv[lc] + sumv[rc];</span><br><span class="line">        minv[o] = min(minv[lc], minv[rc]);</span><br><span class="line">        maxv[o] = max(maxv[lc], maxv[rc]);</span><br><span class="line">    &#125;</span><br><span class="line">    minv[o] += addv[o]; maxv[o] += addv[o]; sumv[o] += addv[o] * (R-L+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = <span class="number">2</span>*o+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(setv[o] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        setv[lc] = setv[rc] = setv[o];</span><br><span class="line">        addv[lc] = addv[rc] = <span class="number">0</span>;</span><br><span class="line">        setv[o] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(addv[o] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        addv[lc] += addv[o];</span><br><span class="line">        addv[rc] += addv[o];</span><br><span class="line">        addv[o] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_add</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = o*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y11 &lt;= L &amp;&amp; y2 &gt;= R) &#123;</span><br><span class="line">        addv[o] += v_add;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(y11 &lt;= M) update_add(lc, L, M); <span class="keyword">else</span> maintain(lc, L, M);</span><br><span class="line">        <span class="keyword">if</span>(y2 &gt; M) update_add(rc, M+<span class="number">1</span>, R);<span class="keyword">else</span> maintain(rc, M+<span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line">    maintain(o, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_set</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">2</span>*o, rc = o*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y11 &lt;= L &amp;&amp; y2 &gt;= R) &#123;</span><br><span class="line">        setv[o] = v_set;</span><br><span class="line">        addv[o] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pushdown(o);</span><br><span class="line">        <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(y11 &lt;= M) update_set(lc, L, M); <span class="keyword">else</span> maintain(lc, L, M);</span><br><span class="line">        <span class="keyword">if</span>(y2 &gt; M) update_set(rc, M+<span class="number">1</span>, R); <span class="keyword">else</span> maintain(rc, M+<span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line">    maintain(o, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> _min, _max, _sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> add)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(setv[o] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        _sum += (add+setv[o]+addv[o]) * (min(R, y2)-max(L, y11)+<span class="number">1</span>);</span><br><span class="line">        _min = min(_min, setv[o]+addv[o]+add);</span><br><span class="line">        _max = max(_max, setv[o]+addv[o]+add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y11 &lt;= L &amp;&amp; y2 &gt;= R) &#123;</span><br><span class="line">        _sum += sumv[o] + add * (R-L+<span class="number">1</span>);</span><br><span class="line">        _min = min(_min, minv[o]+add);</span><br><span class="line">        _max = max(_max, maxv[o]+add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> M = L + (R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(y11 &lt;= M) query(o*<span class="number">2</span>, L, M, add+addv[o]);</span><br><span class="line">        <span class="keyword">if</span>(y2 &gt; M) query(o*<span class="number">2</span>+<span class="number">1</span>, M+<span class="number">1</span>, R, add + addv[o]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(setv, <span class="number">-1</span>, <span class="keyword">sizeof</span> setv);</span><br><span class="line">    <span class="built_in">memset</span>(addv, <span class="number">0</span>, <span class="keyword">sizeof</span> addv);</span><br><span class="line">    <span class="built_in">memset</span>(sumv, <span class="number">0</span>, <span class="keyword">sizeof</span> sumv);</span><br><span class="line">    <span class="built_in">memset</span>(minv, <span class="number">0</span>, <span class="keyword">sizeof</span> minv);</span><br><span class="line">    <span class="built_in">memset</span>(maxv, <span class="number">0</span>, <span class="keyword">sizeof</span> maxv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v_add);</span><br><span class="line">y11 = y2 = i;</span><br><span class="line">update_add(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;y11,&amp;y2,&amp;c);</span><br><span class="line">v_add = c;</span><br><span class="line">update_add(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">_sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y11);</span><br><span class="line">y2 = y11;</span><br><span class="line">query(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,_sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>划一下习题.</p><p>树状数组:</p><p><a href="https://vjudge.net/problem/UVALive-2191" target="_blank" rel="noopener">LA-2191</a><br><a href="https://vjudge.net/problem/UVALive-5902" target="_blank" rel="noopener">LA-5902</a></p><p>线段树+其他技巧<br><a href="https://vjudge.net/problem/UVA-12299" target="_blank" rel="noopener">UVA-12299</a><br><a href="https://vjudge.net/problem/UVA-11525" target="_blank" rel="noopener">UVA-11525</a><br><a href="https://vjudge.net/problem/UVALive-4730" target="_blank" rel="noopener">LA-4730</a><br><a href="https://vjudge.net/problem/UVALive-4108" target="_blank" rel="noopener">LA-4108</a><br><a href="https://vjudge.net/problem/UVALive-4013" target="_blank" rel="noopener">LA-4013</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉索引树Binary-Index-Tree（树状数组）&quot;&gt;&lt;a href=&quot;#二叉索引树Binary-Index-Tree（树状数组）&quot; class=&quot;headerlink&quot; title=&quot;二叉索引树Binary Index Tree（树状数组）&quot;&gt;&lt;/a&gt;二叉
      
    
    </summary>
    
      <category term="高级数据结构" scheme="http://yoursite.com/categories/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-&quot;学习笔记&quot;" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
