<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>karriganasta&#39;s blog</title>
  
  <subtitle>infinite OI road.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-22T04:53:35.320Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>karriganasta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「BZOJ3123 / SDOI2013」 森林 主席树+DSU ON TREE</title>
    <link href="http://yoursite.com/2018/09/22/%E3%80%8CBZOJ3123-SDOI2013%E3%80%8D-%E6%A3%AE%E6%9E%97-%E4%B8%BB%E5%B8%AD%E6%A0%91-DSU-ON-TREE/"/>
    <id>http://yoursite.com/2018/09/22/「BZOJ3123-SDOI2013」-森林-主席树-DSU-ON-TREE/</id>
    <published>2018-09-22T04:24:07.000Z</published>
    <updated>2018-09-22T04:53:35.320Z</updated>
    
    <content type="html"><![CDATA[<p> 写毒瘤 学套路 .</p><p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3123" target="_blank" rel="noopener">BZOJ3123</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个 $N$ 结点的森林 每一个结点有一个非负权值 初始的时候有 $M$ 条边. 有 $T$ 个操作.</p><p>请支持下面两个操作 强制在线</p><blockquote><p>1 $Q$ $x$ $y$ $k$ 查询点 $x$ 到点 $y$ 上第 $k$ 小的权值 保证输入合法</p><p>2 $L$ $x$ $y$ 在 $x$ 和 $y$ 之间连边 连完边后保证还是森林.</p></blockquote><p>$N,M,T \leq 80000$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先对于所有出现的值离散化</p><p>对于第一个操作考虑对每个联通块开一个主席树每次新加结点就继承$father$的信息.</p><p>每次查询的时候在 $x$ $y$ $lca(x,y)$ $fa(lca(x,y))$ 上跑二分</p><p>这样的复杂度是 $O(nlog^2n)$ 的.</p><p>对于第二个操作来说 这种只有连边没有断边 用 $Link CutTree$ 可以做到 $nlogn$ 但显然给自己加大了代码复杂度 我们考虑启发式合并 记录每个联通块的 $fa$ 和 $size$ 每次连边的时候用并查集去查哪个联通快的 $size$ 更大然后暴力重新计算 $ST$ 表即可 这样的复杂度也是 $O(nlog^2n)$ 的.</p><p>总复杂度 $O(nlog^2n)$ 可以垃圾回收但没必要.</p><h3 id="Code-人丑代码长"><a href="#Code-人丑代码长" class="headerlink" title="Code(人丑代码长)"></a>Code(人丑代码长)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//What is broken can be reforged. --Riven</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">NextChar</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="keyword">char</span> c;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isalpha</span>(c);c=getchar()); <span class="keyword">return</span> c;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">8e4</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXNODE = <span class="number">1e7</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> root[MAXN],lson[MAXNODE],rson[MAXNODE],sz[MAXNODE],n,m,T,fa[MAXN],k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[MAXN],cnt = <span class="number">0</span>,cntt = <span class="number">0</span>,st[MAXN][<span class="number">20</span>],a[MAXN],b[MAXN],sum[MAXN],dep[MAXN],vis[MAXN],nn;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;lt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;lt[u].pb(v);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Getid</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> lower_bound(b+<span class="number">1</span>,b+nn+<span class="number">1</span>,x)-b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = getf(fa[x]);&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;dustbin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dustbin.empty()) <span class="keyword">return</span> ++cnt;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> u = dustbin.front();</span><br><span class="line">        dustbin.pop();</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dec</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    lson[u] = rson[u] = sz[u] = <span class="number">0</span>;</span><br><span class="line">    dustbin.push(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">decline</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (l != r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        decline(lson[u],l,mid);</span><br><span class="line">        decline(rson[u],mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    Dec(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    k = Newnode();</span><br><span class="line">    sz[k] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(lson[k],l,mid);</span><br><span class="line">    build(rson[k],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    k = Newnode();</span><br><span class="line">    sz[k] = sz[pre] + <span class="number">1</span>;</span><br><span class="line">    lson[k] = lson[pre]; rson[k] = rson[pre];</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) ins(lson[k],lson[pre],l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> ins(rson[k],rson[pre],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> b[l];</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = sz[lson[x]] + sz[lson[y]] - sz[lson[x1]] - sz[lson[y1]];</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= tmp) <span class="keyword">return</span> query(lson[x],lson[y],lson[x1],lson[y1],l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rson[x],rson[y],rson[x1],rson[y1],mid+<span class="number">1</span>,r,k-tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    ++sum[rt]; st[u][<span class="number">0</span>] = fa[u] = father; dep[u] = dep[father]+<span class="number">1</span>; vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">18</span>; ++i)</span><br><span class="line">        st[u][i] = st[st[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">//Dec(root[u]);</span></span><br><span class="line">    root[u] = <span class="number">0</span>;</span><br><span class="line">    ins(root[u],root[father],<span class="number">1</span>,nn,Getid(a[u]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lt[u].size(); ++i) &#123;</span><br><span class="line">        <span class="comment">//printf("%lld\n",v);</span></span><br><span class="line">        <span class="keyword">int</span> v = lt[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == father) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u,rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">18</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (dep[st[y][i]] &gt;= dep[x])  y = st[y][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">18</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[x][i] != st[y][i]) &#123;</span><br><span class="line">            x = st[x][i]; y = st[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> st[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("1.ans","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> hjqmy = read();</span><br><span class="line">    hjqmy = <span class="number">1</span>;T = hjqmy;</span><br><span class="line">    n =  read(),m = read(),T = read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">        b[i] = read();</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    nn = unique(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//rep(i,1,nn) printf("%lld\n",b[i]);</span></span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = read(),y = read();</span><br><span class="line">        addedge(x,y);addedge(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    build(root[<span class="number">0</span>],<span class="number">1</span>,nn);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)  <span class="keyword">if</span> (!vis[i]) dfs(i,<span class="number">0</span>,i),fa[i] = i;</span><br><span class="line">    <span class="comment">//for (int i = 1; i &lt;= n; ++i) printf("%lld ",dep[i]);</span></span><br><span class="line">    <span class="comment">//for (int x,y;;) x=read(),y=read(),printf("%lld\n",LCA(x,y));</span></span><br><span class="line">    <span class="keyword">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = NextChar();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'Q'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = read()^lastans,y = read()^lastans,K = read()^lastans,x1 = LCA(x,y),y1 = st[x1][<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,lastans = query(root[x],root[y],root[x1],root[y1],<span class="number">1</span>,nn,K));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x = read()^lastans,y = read()^lastans;</span><br><span class="line">            addedge(x,y); addedge(y,x);</span><br><span class="line">            <span class="keyword">int</span> fax = getf(x),fay = getf(y);</span><br><span class="line">            <span class="keyword">if</span> (sum[fax] &gt; sum[fay]) swap(x,y),swap(fax,fay);</span><br><span class="line">            dfs(x,y,fay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 写毒瘤 学套路 .&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=3123&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ3123&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="主席树" scheme="http://yoursite.com/categories/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="DSU启发式合并" scheme="http://yoursite.com/categories/DSU%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ5311 / CF321E」 贞鱼 WQS二分+决策单调优化 DP</title>
    <link href="http://yoursite.com/2018/09/22/%E3%80%8CBZOJ5311-CF321E%E3%80%8D-%E8%B4%9E%E9%B1%BC-WQS%E4%BA%8C%E5%88%86-%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E4%BC%98%E5%8C%96-DP/"/>
    <id>http://yoursite.com/2018/09/22/「BZOJ5311-CF321E」-贞鱼-WQS二分-决策单调优化-DP/</id>
    <published>2018-09-22T04:22:31.000Z</published>
    <updated>2018-09-22T04:50:59.287Z</updated>
    
    <content type="html"><![CDATA[<p>当决策单调与WQS二分结合.</p><p>Links there:<a href="http://codeforces.com/contest/321/problem/E" target="_blank" rel="noopener">CF321E</a> <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5311" target="_blank" rel="noopener">bzoj5311</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给 $n$ 条贞鱼与每对贞鱼之间的怨气值 求分成 $K$ 段,每段的怨气值之和的最小值.</p><p>$1 \leq n \leq 4000, 1 \leq k \leq min(n,800)$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先想朴素的 $dp$.不难想到这个 $O(n^2k)$ 的转移</p><script type="math/tex; mode=display">f(i,k) = min{(f[j][k-1] + calc(j,i))}</script><p>其中 $calc(i,j)$ 利用前缀和做一下就好了.显然跑不过去.</p><p>类似 $JSOI2011 Lemon$ ,假设有 $k &lt; j \leq i$ ,我们发现如果有 $j$ 在某个时刻比 $k$ 优秀那么它永远比 $k$ 优秀.因为$f[j]  + calc(j,i) &gt; f[k] + calc(k,i)$ , $f[j] - f[k] &gt; calc(k,i) - calc(j,i) &gt; 0$</p><p>但是不能斜率优化 因为右边的式子在换了决策点之后 并不一定单调.</p><p>搞一个单调队列 又是类似 $JSOI2011 Lemon$ ,保证更优秀的答案出现的时间单调 每次二分去找.</p><p>然后我们成功优化到了 $O(nlognk)$</p><p>发现还是过不去 为什么呢</p><p><strong>读入太大了</strong></p><p>再考虑一个优化 观察到这里的限制是恰好 $K$ 段</p><p>用 $WQS$ 二分的套路 每次选一段的时候加一个怨气值 记录最后选了几段.</p><p>发现如果这个附加怨气值越小的话对于固定的 $i$ 总段数越大.</p><p>然后答案还原影响就可以了.</p><p>注意二分的边界 这玩意不是一般的坑</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Keep pluggin',this is your only outlet.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">16</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span>(S==T)&#123;T=(S=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">16</span>,<span class="built_in">stdin</span>);<span class="keyword">if</span>(T==S) <span class="keyword">return</span> EOF;&#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=gc();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e3</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[MAXN][MAXN],m,pre[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN],c[MAXN],q[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] + ((pre[y][y] - pre[x][y] - pre[y][x] + pre[x][x]) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">isbetter</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w1 = calc(x,t),w2 = calc(y,t);</span><br><span class="line">    <span class="keyword">if</span> (w1 &gt; w2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (w2 &gt; w1) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (c[x] &gt;= c[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Tim</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//the pos decision x is better than y</span></span><br><span class="line">    <span class="keyword">int</span> l = y + <span class="number">1</span>,r = n,mid;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (isbetter(x,y,mid)) r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// +1 is the valid place.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">isok</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">1</span>,tail = <span class="number">1</span>;</span><br><span class="line">    q[head] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(head &lt; tail &amp;&amp; isbetter(q[head],q[head+<span class="number">1</span>],i)) ++head;</span><br><span class="line">        f[i] = calc(q[head],i) + mid;</span><br><span class="line">        c[i] = c[q[head]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head &lt; tail &amp;&amp; Tim(q[tail<span class="number">-1</span>],q[tail]) &gt; Tim(q[tail],i)) --tail;</span><br><span class="line">        q[++tail] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c[n] &lt;= m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n = read(),m = read();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">        rep(j,<span class="number">1</span>,n) &#123;</span><br><span class="line">            a[i][j] = read();</span><br><span class="line">            pre[i][j] = pre[i<span class="number">-1</span>][j] + pre[i][j<span class="number">-1</span>] - pre[i<span class="number">-1</span>][j<span class="number">-1</span>] + a[i][j]; <span class="comment">//prefix sum</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>,R = pre[n][n] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(L &lt;= R) &#123;</span><br><span class="line">        <span class="comment">// printf("%lld %lld\n",L,R);</span></span><br><span class="line">        <span class="keyword">int</span> mid = (L+R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// printf("%lld\n",mid);</span></span><br><span class="line">        <span class="keyword">if</span> (isok(mid)) &#123;ans = f[n] - mid * m; R = mid - <span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> L = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当决策单调与WQS二分结合.&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;http://codeforces.com/contest/321/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF321E&lt;/a&gt; &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=5311&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bzoj5311&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="WQS二分" scheme="http://yoursite.com/categories/WQS%E4%BA%8C%E5%88%86/"/>
    
      <category term="DP-决策单调优化DP" scheme="http://yoursite.com/categories/DP-%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E4%BC%98%E5%8C%96DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ4709 / JSOI2011」 柠檬 决策单调优化DP</title>
    <link href="http://yoursite.com/2018/09/22/%E3%80%8CBZOJ4709-JSOI2011%E3%80%8D-%E6%9F%A0%E6%AA%AC-%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E4%BC%98%E5%8C%96DP/"/>
    <id>http://yoursite.com/2018/09/22/「BZOJ4709-JSOI2011」-柠檬-决策单调优化DP/</id>
    <published>2018-09-22T04:21:05.000Z</published>
    <updated>2018-09-22T04:49:42.640Z</updated>
    
    <content type="html"><![CDATA[<p>发现自己对 $DP$ 优化一无所知.</p><p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4709" target="_blank" rel="noopener">BZOJ-4709</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $N$ 个贝壳,每个贝壳有颜色 $s_i$ 可以取若干段的贝壳并每次指定一个颜色 $x$ ,定义在每个选择的区间内对答案的贡献为 $x \times t[x]^2$ ,其中 $t[x]$ 为在这一段中颜色 $x$ 的出现次数</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先要想一个结论:</p><p>假设每次取的区间为 $[L,R]$ 那么必定有 $s_L = s_R$ ,也就是两端颜色相同.这样取一定是最优的.</p><p>如果两端颜色不一样的话 那么这一点可以归到左边或者归到右边 而且对单单这一段的答案没有影响 所以正确性显然 这样找的一定最大</p><p>那么记录 $c[i]$ 为颜色 $s_i$ 从开始出现到现在的次数 显然有转移</p><script type="math/tex; mode=display">f[i] =max(f[j-1],a[i] *{(s[i]-s[j]+1)}^2)</script><p>这样的复杂度是 $O(n^2)$ 的.</p><p>考虑优化 显然不能斜率优化 因为对于 $i&lt;j$ , $i$ 的决策会影响到 $j$ 的决策</p><p>观察转移方程 发现如果说有 $k &lt; j  \leq i$ 假如 $k$ 的转移要比 $j$ 优秀,那么在后面的转移中 $j$ 是一定用不到的 因为平方会越来越大 因此可以对每一个颜色开一个栈 每次发现栈顶的没有下面那个转移优秀就把他弹掉.</p><p><del>然后你就发现你WA了</del></p><p>因为这么做只能保证被弹掉的不再有用 但我们求的是最大值 无法保证栈顶的一定最优秀 比如出现栈中第三个更优秀的情况.</p><p>那么我们就要从入栈时间来想 仍然假设 $k &lt; j  \leq i$ ,我们假定 $k$ 转移在 $k_1$ 优于 $i$ ,$j$ 在 $j_1$ 优于</p><p>$i$ 如果有 $k_1 &lt; j_1$ 会发生什么呢.</p><p>仔细模拟之后我们发现 栈中第一个元素比第二个优秀,而下面还有一个更优秀的 $k_1$ 我们没把它取出来.</p><p>这就是万恶之源 因此遇到 $k_1 &lt; j_1$ 的情况 就弹出 保证栈内元素比上一个元素更优的时间也是单调的 因此二分去找这个 “更优时间” 就行啦.</p><p>复杂度$O(nlogn)$ 可以搞过去.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Keep pluggin',this is your only outlet.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickmul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> mod)</span></span>&#123;<span class="keyword">return</span> (x*y-(<span class="keyword">int</span>)((<span class="keyword">long</span> <span class="keyword">double</span>)x/mod*y)*mod+mod)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;sta[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,col[MAXN],a[MAXN],f[MAXN],c[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x<span class="number">-1</span>] + (c[y]-c[x]+<span class="number">1</span>) * (c[y]-c[x]+<span class="number">1</span>) * a[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Tim</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>,r = n,mid,cur = (c[y] - c[x]);</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (f[x<span class="number">-1</span>] + (mid + cur) * (mid + cur) * a[x] &lt; f[y<span class="number">-1</span>] + mid * mid * a[y])</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i] =  read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        c[i] = ++col[a[i]];</span><br><span class="line">        <span class="keyword">while</span>((<span class="keyword">signed</span>)sta[a[i]].size()&gt;=<span class="number">2</span> &amp;&amp; Tim(sta[a[i]][(<span class="keyword">signed</span>)sta[a[i]].size()<span class="number">-2</span>],i) &lt; Tim(sta[a[i]][(<span class="keyword">signed</span>)sta[a[i]].size()<span class="number">-1</span>],i))</span><br><span class="line">            sta[a[i]].pop_back();</span><br><span class="line">        sta[a[i]].push_back(i);</span><br><span class="line">        <span class="keyword">while</span>((<span class="keyword">signed</span>)sta[a[i]].size()&gt;=<span class="number">2</span> &amp;&amp; Calc(sta[a[i]][(<span class="keyword">signed</span>)sta[a[i]].size()<span class="number">-2</span>],i) &gt; Calc(sta[a[i]][(<span class="keyword">signed</span>)sta[a[i]].size()<span class="number">-1</span>],i))</span><br><span class="line">        sta[a[i]].pop_back();</span><br><span class="line">        f[i] = Calc(sta[a[i]][sta[a[i]].size()<span class="number">-1</span>],i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sta[a[i]].size()<span class="number">-1</span>; ++j)</span><br><span class="line">            f[i] = max(f[i],Calc(sta[a[i]][j],i));</span><br><span class="line">        <span class="comment">//printf("%lld\n",f[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现自己对 $DP$ 优化一无所知.&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=4709&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ-4709&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-决策单调优化DP" scheme="http://yoursite.com/categories/DP-%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E4%BC%98%E5%8C%96DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ3622 」已经没有什么好害怕的了 容斥 DP</title>
    <link href="http://yoursite.com/2018/09/22/%E3%80%8CBZOJ3622-%E3%80%8D%E5%B7%B2%E7%BB%8F%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%AE%B3%E6%80%95%E7%9A%84%E4%BA%86-%E5%AE%B9%E6%96%A5-DP/"/>
    <id>http://yoursite.com/2018/09/22/「BZOJ3622-」已经没有什么好害怕的了-容斥-DP/</id>
    <published>2018-09-22T04:18:36.000Z</published>
    <updated>2018-09-22T04:32:40.422Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3622" target="_blank" rel="noopener">BZOJ3622</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $N$ 个药和糖 每个药和糖都有自己的能量 他们之间可以两两配对 求糖的能量比药的能量大的配对数比药的能量比糖的能量大的组数恰好多 $K$ 的方案数.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>原题意即糖的能量比药的能量大的组数恰好为 $\frac{N+K}{2}$ 组的方案数.</p><p>先排个序 再容斥一下就好了 </p><p>$f[i][j]$ 表示选择前 $i$ 个物品 组数至少为 $j$ 的方案.</p><p>$f[i][j] = \sum f[i-1][j] + f[i-1][j-1] * (k -j+1)$ </p><p>注意最后统计答案的时候 那些剩下的 $n - i$ 是可以随意排列的要乘上阶乘.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Keep pluggin',this is your only outlet.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickmul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> mod)</span></span>&#123;<span class="keyword">return</span> (x*y-(<span class="keyword">int</span>)((<span class="keyword">long</span> <span class="keyword">double</span>)x/mod*y)*mod+mod)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e3</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> f[MAXN][MAXN],k,n,a[MAXN],b[MAXN],fac[MAXN],inv[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i) fac[i] = fac[i<span class="number">-1</span>] * i  % Mod;</span><br><span class="line">    inv[MAXN<span class="number">-1</span>] = getinv(fac[MAXN<span class="number">-1</span>],Mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXN<span class="number">-2</span>; i &gt;= <span class="number">1</span>; --i) inv[i] = inv[i+<span class="number">1</span>] * (i + <span class="number">1</span>) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * inv[n - m] % Mod * inv[m] % Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;x = (x + y) % Mod;&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("3622.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("3622.out","w",stdout);</span></span><br><span class="line">    pre();</span><br><span class="line">    <span class="comment">//printf("%lld\n",C(6,2));</span></span><br><span class="line">    n = read(),k  = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) b[i] = read();</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>); sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; n &amp;&amp; b[k+<span class="number">1</span>] &lt; a[i]) ++k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            upd(f[i][j],f[i<span class="number">-1</span>][j]);</span><br><span class="line">            upd(f[i][j],f[i<span class="number">-1</span>][j<span class="number">-1</span>] * (max(<span class="number">0L</span>L,k - j + <span class="number">1</span>)) % Mod);</span><br><span class="line">        &#125;</span><br><span class="line">        f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> nk = (n + k) &gt;&gt; <span class="number">1</span>,ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nk,d = <span class="number">1</span>; i &lt;= n; ++i,d = Mod - d) upd(ans,f[n][i] * d % Mod * C(i,nk) % Mod * fac[n-i] % Mod);<span class="comment">//printf("%lld\n",ans);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=3622&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ3622&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-容斥DP" scheme="http://yoursite.com/categories/DP-%E5%AE%B9%E6%96%A5DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ3065」 带插入区间K小值 替罪羊树套主席树</title>
    <link href="http://yoursite.com/2018/09/22/%E3%80%8CBZOJ3065%E3%80%8D-%E5%B8%A6%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4K%E5%B0%8F%E5%80%BC-%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%A5%97%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>http://yoursite.com/2018/09/22/「BZOJ3065」-带插入区间K小值-替罪羊树套主席树/</id>
    <published>2018-09-22T04:17:03.000Z</published>
    <updated>2018-09-22T04:31:30.502Z</updated>
    
    <content type="html"><![CDATA[<p>真-毒瘤题</p><p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3065" target="_blank" rel="noopener">BZOJ3065</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>如题,强制在线,带修改,带插入的区间 $k​$ 小值的查询</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>不带插入是可以带修主席树直接做的 不带插入的右转 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3065" target="_blank" rel="noopener">BZOJ1901</a></p><p>这个插入的操作十分的令人恶心 我们要多维护一个区间顺序的信息了</p><p>脑海里回顾一下学过的毒瘤的数据结构 似乎只有平衡树能搞这个东西了</p><p>所以我们用替罪羊树套主席树!</p><p>Treap?Splay?插入的时候要rotate太难写!</p><p>我们用暴力重构的Scapegoat!</p><p><del>不用旋转 思维比较简单 实现难度低 代码量小 绝对是非可持久化平衡树的首选啊</del></p><p>每次暴力重构的时间是 $O(nlog^2n)$ 每个点期望重构次数是严格小于 $logn$ 次的所以总复杂度小于等于 $O(nlog^3n)$</p><p>再考虑一下询问 这里是要把每个结点对应区间的节点作为一个向量拉出来 对于向量跑二分.</p><p>二分复杂度 $logn$ 每次询问寻找复杂度 $logn$ 所以询问的复杂度为 $O(qlog^2n)$ </p><p>还有没有优化的余地呢 ?</p><p>答案是肯定的 对于 $N$ 个权值区域相同的主席树合并可以做到 $O(nlogn)$</p><p>每次暴力重构的复杂度可以通过权值线段树的合并做到 $O(nlog^2n)$</p><p>这样最后的复杂度是 $O((n+q) \times log^2n)$ 的但是因为暴力重构的次数实际上并不多 因此这个优化实质上也不明显</p><p>注意垃圾回收! 垃圾回收一定不要写挂! <del>(这就是我调一个上午的理由)</del></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//What is broken can be reforged.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">100</span>,m =<span class="number">70000</span>,M = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> c[N][<span class="number">2</span>],lson[M],rson[M],rt[M],sz[N],pool[N + <span class="number">5</span>],rub = <span class="number">0</span>,q[M],a[M],p[M],headpq;</span><br><span class="line"><span class="keyword">int</span> n,root = <span class="number">0</span>,headp,headq,trtot = <span class="number">0</span>,lastans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">NextChar</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="keyword">char</span> c = getchar(); <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(c)) c = getchar(); <span class="keyword">return</span> c;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> xs = <span class="number">0.75</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!rub) <span class="keyword">return</span> ++trtot;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> pool[rub--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Recycle</span><span class="params">(<span class="keyword">int</span> &amp;k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rub &gt; N) --rub;</span><br><span class="line">    pool[++rub] = k;</span><br><span class="line">    <span class="keyword">if</span> (c[k][<span class="number">0</span>]) Recycle(c[k][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (c[k][<span class="number">1</span>]) Recycle(c[k][<span class="number">1</span>]);</span><br><span class="line">    sz[k] = <span class="number">0</span>; k = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> &amp;u)</span> </span>&#123;</span><br><span class="line">    Recycle(rt[u]);</span><br><span class="line">    <span class="keyword">if</span> (lson[u]) dfs(lson[u]);</span><br><span class="line">    p[++headp] = u;</span><br><span class="line">    <span class="keyword">if</span> (rson[u]) dfs(rson[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) k=Newnode();</span><br><span class="line">    <span class="keyword">if</span> (l==r)&#123; sz[k]+=y; <span class="keyword">return</span>; &#125; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) ins(c[k][<span class="number">0</span>],l,mid,x,y); <span class="keyword">else</span> ins(c[k][<span class="number">1</span>],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    sz[k]=sz[c[k][<span class="number">0</span>]]+sz[c[k][<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">if</span> (!sz[k]) Recycle(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (l==r)&#123;</span><br><span class="line">        k=p[l]; ins(rt[k],<span class="number">0</span>,m,a[k],<span class="number">1</span>); <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i,mid=(l+r)&gt;&gt;<span class="number">1</span>; k=p[mid];</span><br><span class="line">    build(lson[k],l,mid<span class="number">-1</span>); build(rson[k],mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">for</span> (i=l; i&lt;=r; i++) ins(rt[k],<span class="number">0</span>,m,a[p[i]],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> &amp;k)</span></span>&#123;</span><br><span class="line">    headp=<span class="number">0</span>; dfs(k); build(k,<span class="number">1</span>,headp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k)&#123;</span><br><span class="line">        k=++n; ins(rt[k],<span class="number">0</span>,m,y,<span class="number">1</span>);</span><br><span class="line">        a[k]=y; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ins(rt[k],<span class="number">0</span>,m,y,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp=sz[rt[lson[k]]]; <span class="keyword">bool</span> bo;</span><br><span class="line">    <span class="keyword">if</span> (tmp&gt;=x) bo=add(lson[k],x,y);</span><br><span class="line">        <span class="keyword">else</span> bo=add(rson[k],x-tmp<span class="number">-1</span> ,y);</span><br><span class="line">    <span class="keyword">if</span> (sz[rt[k]]*<span class="number">0.75</span>&gt;max(sz[rt[lson[k]]],sz[rt[rson[k]]]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (bo)</span><br><span class="line">            <span class="keyword">if</span> (tmp&gt;=x) rebuild(lson[k]); <span class="keyword">else</span> rebuild(rson[k]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">1</span> &amp;&amp; r == sz[rt[k]]) &#123;p[++headp] = rt[k]; <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> t = sz[rt[lson[k]]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= t &amp;&amp; r &gt;= t) q[++headq] = a[k];</span><br><span class="line">    <span class="keyword">if</span> (r &lt; t) getid(lson[k],l,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; t) getid(rson[k],l-t,r-t);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; t) getid(lson[k],l,t<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; t) getid(rson[k],<span class="number">1</span>,r-t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> rst)</span></span>&#123;</span><br><span class="line">    headp=<span class="number">0</span>; headq=<span class="number">0</span>; getid(root,x,y);</span><br><span class="line">    rst--; <span class="keyword">int</span> l=<span class="number">0</span>,r=m,mid,i,tmp;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">        mid=(l+r)&gt;&gt;<span class="number">1</span>; tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;=headp; i++) tmp+=sz[c[p[i]][<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;=headq; i++)</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= q[i] &amp;&amp; q[i]&lt;=mid) tmp++;</span><br><span class="line">        <span class="keyword">if</span> (tmp&gt;rst)&#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=headp; i++) p[i]=c[p[i]][<span class="number">0</span>];</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=headp; i++) p[i]=c[p[i]][<span class="number">1</span>];</span><br><span class="line">            l=mid+<span class="number">1</span>;rst-=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    ins(rt[k],<span class="number">0</span>,m,y,<span class="number">1</span>); <span class="keyword">int</span> t = sz[rt[lson[k]]] + <span class="number">1</span>,ret;</span><br><span class="line">    <span class="keyword">if</span> (x == t) &#123;ret = a[k]; a[k] = y;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; t) ret = Modify(lson[k],x,y);</span><br><span class="line">    <span class="keyword">else</span> ret = Modify(rson[k],x-t,y);</span><br><span class="line">    ins(rt[k],<span class="number">0</span>,m,ret,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i] = read(),p[i] = i;</span><br><span class="line">    build(root,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> op = read();</span><br><span class="line">    <span class="keyword">while</span>(op--) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = NextChar();</span><br><span class="line">        <span class="keyword">int</span> x = read()^lastans,y = read()^lastans;</span><br><span class="line">        <span class="comment">//printf("%lld %lld\n",x,y);</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'I'</span>) &#123;<span class="keyword">if</span> (add(root,x<span class="number">-1</span>,y)) rebuild(root);&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'Q'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> z = read()^lastans; lastans = solve(x,y,z); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> Modify(root,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真-毒瘤题&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=3065&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ3065&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="嵌套数据结构" scheme="http://yoursite.com/categories/%E5%B5%8C%E5%A5%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「CF739E」 Gosha is hunting WQS二分优化dp</title>
    <link href="http://yoursite.com/2018/09/17/%E3%80%8CCF739E%E3%80%8D-Gosha-is-hunting-WQS%E4%BA%8C%E5%88%86%E4%BC%98%E5%8C%96dp/"/>
    <id>http://yoursite.com/2018/09/17/「CF739E」-Gosha-is-hunting-WQS二分优化dp/</id>
    <published>2018-09-17T13:48:45.000Z</published>
    <updated>2018-09-17T14:38:27.437Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="http://codeforces.com/contest/739/problem/E" target="_blank" rel="noopener">CF739E</a></p><a id="more"></a><p>写了个 $O(n^3)$的概率转移 $dp$  被劝退了不会优化 只能去补姿势</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $N$ 个怪物,你有 $a$ 个 $Pokeball$ 和 $b$ 个 $Ultraball$.</p><p>给出每个怪物分别被 $Pokeball$ 和被 $Ultraball$ 捕获的概率 求最大能捕获个数的期望.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>上来抱着 $codeforces $ 跑的巨快的心态写了一发 $O(n^3)$</p><p>用 $f(i,j,k)$ 表示 前 $i$ 个怪物用 $j$ 个 $Pokeball$, $k$ 个 $Ultraball$ 的最大期望.</p><p>这个转移显然,讨论一下每个怪物</p><blockquote><p>不用球 / 用Pokeball / 用Ultraball / 都用</p></blockquote><p>大概写出来这样子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= a; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;  k &lt;= b; ++k)&#123;</span><br><span class="line">                <span class="keyword">int</span> lst = (i &amp; <span class="number">1</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                upd(f[lst^<span class="number">1</span>][j][k],f[lst][j][k]);</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">1</span>) upd(f[lst^<span class="number">1</span>][j][k],f[lst][j<span class="number">-1</span>][k] + p[i]);</span><br><span class="line">                <span class="keyword">if</span> (k &gt;= <span class="number">1</span>) upd(f[lst^<span class="number">1</span>][j][k],f[lst][j][k<span class="number">-1</span>] + u[i]);</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">1</span> &amp;&amp; k &gt;= <span class="number">1</span>)</span><br><span class="line">                upd(f[lst^<span class="number">1</span>][j][k],f[lst][j<span class="number">-1</span>][k<span class="number">-1</span>] + <span class="number">1.0</span> - (<span class="number">1.0</span> - p[i]) * (<span class="number">1.0</span> - u[i]));</span><br><span class="line">                <span class="keyword">if</span> (i == n) upd(ans,f[lst^<span class="number">1</span>][j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后你就发现你 $T$ 飞了.</p><p><img src="/2018/09/17/「CF739E」-Gosha-is-hunting-WQS二分优化dp/1.png" alt="make"></p><p>用 $WQS$ 二分的思想 </p><p>原问题显然必须把 $a,b$ 取光.</p><p>所以这实际上是一个有2个限制的取 $K$ 个物品的问题</p><p>固定 $f(i,a,k)$ 的 $i,a$ 的时候 , 发现 $f(i,a,k)$ 是关于 $k$ 的凸函数.</p><p>这是显然的对于固定的 $i$ ,你扔的球的个数越多的话收益越差.</p><p>类似的 , 固定 $f(i,j,b)$ 的 $i,b$ 的时候 , 发现 $f(i,j,b)$ 是关于 $j$ 的凸函数.</p><p>那么不如给每个球加两个限制 $cost1 \space cost2$ 表示每个类型的球额外的代价.</p><p>二分套二分,最后把这一部分影响还原就是答案.</p><p>因为 $cost1 \space cost2$ 的范围在 $[0,1]$ 之间 所以二分的次数很少 (看你 eps)</p><p>几乎就是 $O(n\times x^2)$ ,$x$ 为二分常数 可小了.</p><p>跑的还真是快呢.</p><p><img src="/2018/09/17/「CF739E」-Gosha-is-hunting-WQS二分优化dp/2.png" alt="make2"></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Keep pluggin',this is your only outlet.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickmul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> mod)</span></span>&#123;<span class="keyword">return</span> (x*y-(<span class="keyword">int</span>)((<span class="keyword">long</span> <span class="keyword">double</span>)x/mod*y)*mod+mod)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> f[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">double</span> p[<span class="number">2010</span>],u[<span class="number">2010</span>],pu[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> numa[<span class="number">2010</span>],numb[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> a,b,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">double</span> &amp;x,<span class="keyword">double</span> y)</span> </span>&#123;x = max(x,y);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> c1,<span class="keyword">double</span> c2)</span></span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0.0</span>; numa[<span class="number">0</span>] = numb[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        f[i] = f[i<span class="number">-1</span>] ; numb[i] = numb[i<span class="number">-1</span>]; numa[i] = numa[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (f[i<span class="number">-1</span>] + p[i] - c1 &gt; f[i]) &#123;</span><br><span class="line">            f[i] = f[i<span class="number">-1</span>] + p[i] - c1;</span><br><span class="line">            numa[i] = numa[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            numb[i] = numb[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f[i<span class="number">-1</span>] + u[i] - c2 &gt; f[i]) &#123;</span><br><span class="line">            f[i] = f[i<span class="number">-1</span>] + u[i] - c2;</span><br><span class="line">            numa[i] = numa[i<span class="number">-1</span>];</span><br><span class="line">            numb[i] = numb[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f[i<span class="number">-1</span>] + pu[i] - (c1 + c2) &gt; f[i]) &#123;</span><br><span class="line">            f[i] = f[i<span class="number">-1</span>] + pu[i] - (c1 + c2);</span><br><span class="line">            numa[i] = numa[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            numb[i] = numb[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n = read(),a = read(),b = read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;p[i]);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;u[i]);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) pu[i] = <span class="number">1.0</span> - (<span class="number">1.0</span> - p[i]) * (<span class="number">1.0</span> - u[i]);</span><br><span class="line">    <span class="comment">//O(n^3) dp</span></span><br><span class="line">    <span class="comment">// double ans = 1e-10;</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= n; ++i) &#123;</span></span><br><span class="line">    <span class="comment">//     for (int j = 0; j &lt;= min(i,a); ++j)</span></span><br><span class="line">    <span class="comment">//         for (int k = 0;  k &lt;= b; ++k)&#123;</span></span><br><span class="line">    <span class="comment">//             int lst = (i &amp; 1) ? 0 : 1;</span></span><br><span class="line">    <span class="comment">//             upd(f[lst^1][j][k],f[lst][j][k]);</span></span><br><span class="line">    <span class="comment">//             if (j &gt;= 1) upd(f[lst^1][j][k],f[lst][j-1][k] + p[i]);</span></span><br><span class="line">    <span class="comment">//             if (k &gt;= 1) upd(f[lst^1][j][k],f[lst][j][k-1] + u[i]);</span></span><br><span class="line">    <span class="comment">//             if (j &gt;= 1 &amp;&amp; k &gt;= 1)</span></span><br><span class="line">    <span class="comment">//             upd(f[lst^1][j][k],f[lst][j-1][k-1] + 1.0 - (1.0 - p[i]) * (1.0 - u[i]));</span></span><br><span class="line">    <span class="comment">//             if (i == n) upd(ans,f[lst^1][j][k]);</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">double</span> L = <span class="number">0</span>,R = <span class="number">1</span>,L1,R1;</span><br><span class="line">    <span class="keyword">while</span>(R - L &gt; eps) &#123;</span><br><span class="line">        <span class="keyword">double</span> mid1 = (L + R) / <span class="number">2</span>;</span><br><span class="line">        L1 = <span class="number">0</span>,R1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(R1 - L1 &gt; eps)&#123;</span><br><span class="line">            <span class="keyword">double</span> mid2 = (L1 + R1) / <span class="number">2</span>;</span><br><span class="line">            Calc(mid1,mid2);</span><br><span class="line">            <span class="keyword">if</span> (numb[n] &gt; b) L1 = mid2;</span><br><span class="line">                <span class="keyword">else</span> R1 = mid2;</span><br><span class="line">        &#125;</span><br><span class="line">        Calc(mid1,R1);</span><br><span class="line">        <span class="keyword">if</span> (numa[n] &gt; a) L = mid1;</span><br><span class="line">            <span class="keyword">else</span> R = mid1;</span><br><span class="line">    &#125;</span><br><span class="line">    Calc(R,R1);</span><br><span class="line">    <span class="keyword">double</span> ans = f[n] + a * R + b * R1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>发现自己一万年没更blog了.之前的题会陆陆续续补上来吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;http://codeforces.com/contest/739/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF739E&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="WQS二分" scheme="http://yoursite.com/categories/WQS%E4%BA%8C%E5%88%86/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>WQS二分-学习笔记</title>
    <link href="http://yoursite.com/2018/09/17/WQS%E4%BA%8C%E5%88%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/09/17/WQS二分-学习笔记/</id>
    <published>2018-09-17T13:44:53.000Z</published>
    <updated>2018-09-17T13:47:08.266Z</updated>
    
    <content type="html"><![CDATA[<p>换几种称呼:斜率凸优化 带权二分 这几个本质上其实并没有什么区别呢.</p><a id="more"></a><h4 id="解决问题的范畴"><a href="#解决问题的范畴" class="headerlink" title="解决问题的范畴"></a>解决问题的范畴</h4><p>给一个选物品的限制条件,在 $N$ 个物品里要求恰好选 $K$ 个,让你最大化/最小化权值.</p><p>且当选择物品的数量越多的时候权值越大/越小.</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>普通的DP可以在$O(nk*C)$的时间内解决这个问题,其中 $C$ 是转移的复杂度.</p><p>但是要是碰上独留的出题人呢.</p><p>这个 $K$ 的限制十分的令人头大, 不如不考虑这个玩意.也就是去掉物品个数限制 $K$ .</p><p>我们令取一个物品的附加权值为 $Cost$</p><p>那么根据解决问题的范畴里面的性质.</p><p>假设我们 $Cost$ 越大 我们选择的物品个数随之减少/增大, 权值也随之减少/增大</p><p>那么我们在转移 $DP$ 的时候可以考虑记录下取物品的个数</p><p>根据是否大于 $K$ 来调整权值.</p><p>最后拿答案减掉 $Cost$ 的影响就是答案.</p><p>这样的复杂度将 $K$ 这一维缩成了 $logCost$.对于 $K$ 比较小的来说 可能优化效果并不明显.</p><p>算是个黑科技吧 今天也是偶尔遇到了才学了学呢</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p>见新的post吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换几种称呼:斜率凸优化 带权二分 这几个本质上其实并没有什么区别呢.&lt;/p&gt;
    
    </summary>
    
      <category term="WQS二分" scheme="http://yoursite.com/categories/WQS%E4%BA%8C%E5%88%86/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>FWT-FMT子集变换卷积学习笔记</title>
    <link href="http://yoursite.com/2018/08/16/FWT-FMT%E5%AD%90%E9%9B%86%E5%8F%98%E6%8D%A2%E5%8D%B7%E7%A7%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/16/FWT-FMT子集变换卷积学习笔记/</id>
    <published>2018-08-15T16:20:42.000Z</published>
    <updated>2018-08-15T16:31:34.155Z</updated>
    
    <content type="html"><![CDATA[<p>终于被论文题劝退之后来补这个坑了</p><a id="more"></a><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>被HAOI2015按位或劝退</p><p>滚回去补vfk的论文</p><p>so happy</p><p><strong>参见2015国家队论文《集合幂级数的性质与应用及其快速算法》</strong> </p><h3 id="集合幂级数"><a href="#集合幂级数" class="headerlink" title="集合幂级数"></a>集合幂级数</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>之前对于有关集合的计数问题 ,一般的常规思路是用 $f_S$ 去表示方案数然后去递推.</p><p>然而这个时候你看一眼题面 意识到自己 $O(4^n)$ <del>甚至连暴力都不如</del> （不对 这就是暴力）</p><p>于是我们需要一个东西来优化递推转移</p><p>还是用数列的理论来类比.之前多项式的一些理论是不是在集合中也可以使用呢?</p><p>我们曾经对于一个数列 $f<em>0,f_1…$ 用一个生成函数来描述 即 $f(x) = \sum</em> { k=0 } ^ { inf } f_k\times x^k$</p><p>左边是严格的数列递推 右边是优美的多项式 有成套的<del>工具</del>(板子)去解决.</p><p>但是集合的处理怎么办?</p><p>引入集合幂级数的概念</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>令 $f​$ 是定义域在集合 $U​$ 以内,映射到 $F​$ 的一个<strong>集合幂级数 </strong>, 对于每一个定义域中的 $S,S \in U​$,设 $f_S​$ 为该 $S​$ 带入函数中所得到的值.</p><p><strong>结论</strong>  确定了每一个 $S$ 所对应的 $f_S$ , $f$ 也可以随之确定且唯一.</p><p>我们用类似生成函数的定义方式的式子来定义 $f$ . $f = \sum _  {  S \in U  }   f_S \times  x ^  {  S } $</p><p>这里的 $ f_S $ 并非系数 而是一个 $U$ 的子集所对应的一个<strong>点值</strong>.</p><p>我还是举论文上的例子吧。。。</p><p>$U={ 1,2 } , f(x) = 5x^{ \varnothing }$$+ 8x^ {  {  1 } }$ $+$ $13x^ {  { 1,2}}$</p><p>则这个集合幂级数里,$f({ 1,2 } ) = 13$,$f(\varnothing) = 5,f( { 1}) = 8$</p><p>考虑这个玩意的运算.</p><p>加减法显然系数相加相减即可.但是乘法呢？我们对于集合的运算取并取交 得到的似乎并不相同啊</p><p>引出子集变换集合卷积</p><h3 id="FMT-Fast-Mobius-Transform-快速莫比乌斯变换"><a href="#FMT-Fast-Mobius-Transform-快速莫比乌斯变换" class="headerlink" title="FMT(Fast Mobius Transform)快速莫比乌斯变换"></a>FMT(Fast Mobius Transform)快速莫比乌斯变换</h3><p>取集合运算 $L \subseteq U,R \subseteq U$，$L * R = L \cup R$</p><p>$f(x) = \sum<em> { S \subseteq L} f_S x^S ,g(x) = \sum</em> { S \subseteq R}g_S x^S$</p><p>它们的卷积为 $h(x) = \sum<em> { L \subseteq U}  \sum</em> { R\subseteq U}f_Lg_R(L \cup R = S)$</p><h4 id="Bruteforce"><a href="#Bruteforce" class="headerlink" title="Bruteforce"></a>Bruteforce</h4><p>暴力枚举集合 复杂度 $O(3^N)$ 美滋滋</p><h4 id="Divide-amp-Conquer"><a href="#Divide-amp-Conquer" class="headerlink" title="Divide &amp; Conquer"></a>Divide &amp; Conquer</h4><p>考虑分治乘 对于现有的集合 $U = \ { 1,2,3,4,…n}$ 考虑 $ n $ 单独提出来 分类.</p><p>现在记号 $F_1(x)$ 表示现有的集合中不包含 $n$ 的 $F_2(x)$ 表示现有的集合中包含 $n$ 但是要除去的</p><p>$f * g = (F_1+ { x_nF_2})(G_1+x_nG_2)$</p><p>然后展开分治算就可以了.</p><p>$T(n) = T(n-1)+O(2^N)$ 由主定理 $T(n) = O(N\times2^N)$</p><p>据炸鸡小弟声称 分治乘往往跑的比$FMT$快 但也并不知道是为什么…</p><h4 id="Fast-Mobius-Transform"><a href="#Fast-Mobius-Transform" class="headerlink" title="Fast Mobius Transform"></a>Fast Mobius Transform</h4><p>证明看论文 这里只讲结论</p><p>定义一个幂级数的莫比乌斯变换为</p><p>$F<em>S = \sum</em> { T \subseteq S}f_T$</p><p>反过来 我们定义 $F$ 的莫比乌斯反演为 $f$</p><p>推个容斥错位相减 $f<em>S = \sum</em> { T \subseteq S} { (-1)^ { |S-T|}F_T}$</p><p>我们算卷积的时候 $h(x) = \sum<em> { L \subseteq U}  \sum</em> { R\subseteq U}f_Lg_R(L \cup R = S)$</p><p>两边同时反演.最后可以得到 $H = F * G$ 即 反演后依然成立</p><p>最后两边反演即可 . 这样我们算发 $ f,g$ 的卷积 只要先莫比乌斯变换 然后相乘之后 再莫比乌斯反演 就可以啦</p><p>复杂度$O(N \times 2^N)$</p><h4 id="模板-StupidOJ47"><a href="#模板-StupidOJ47" class="headerlink" title="模板 StupidOJ47"></a>模板 StupidOJ47</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n) &#123; <span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123; f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) &#123; x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[MAXN],b[MAXN],l = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fmt</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> len,<span class="keyword">int</span> type)</span> </span>&#123;  <span class="comment">//type = -1 反演</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; len) - <span class="number">1</span>; ++j)</span><br><span class="line">        a[j] += type * a[(<span class="number">1</span>&lt;&lt;i)^j] * (j &gt;&gt; i &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123; </span><br><span class="line">    n = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i = i &lt;&lt; <span class="number">1</span>, ++l);</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i] = read();</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>) b[i] = read();</span><br><span class="line">    fmt(a,l,<span class="number">1</span>); fmt(b,l,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i] = a[i] * b[i];</span><br><span class="line">    fmt(a,l,<span class="number">-1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Fast-Walsh-Hadamard-Transform"><a href="#Fast-Walsh-Hadamard-Transform" class="headerlink" title="Fast Walsh-Hadamard Transform"></a>Fast Walsh-Hadamard Transform</h3><p>本质上就是每一位只可能是 $1,0$ 的多项式</p><p>懒得证明正确性了 但是这是确实存在的</p><p>$FWT(A+B) = FWT(A) +FWT(B)$</p><p>$FWT(A \oplus  B) = FWT(A) \times FWT(B)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt_and</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> type)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = (i &gt;&gt; <span class="number">1</span>) , j = <span class="number">0</span>; j &lt; n; j += i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; j + p; ++k)</span><br><span class="line">            a[k+p] += a[k] * type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt_or</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> type)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = (i &gt;&gt; <span class="number">1</span>), j = <span class="number">0</span>; j &lt; n; j += i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; j + p; ++k)</span><br><span class="line">            a[k] += a[k+p] * type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt_xor</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> type)</span> </span>&#123;  <span class="comment">//mod意义下</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = (i &gt;&gt; <span class="number">1</span>), j = <span class="number">0</span>; j &lt; n; j += i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; j + p; ++k) &#123; </span><br><span class="line">                <span class="keyword">int</span> x = (a[k] + a[k+p]),y = (a[k]-a[k+p]);</span><br><span class="line">                a[k] = x; a[k+p] = y;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">int</span> inv = getinv(quickpow(<span class="number">2</span>,n,Mod),Mod);</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i] = a[i] * inv % Mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于被论文题劝退之后来补这个坑了&lt;/p&gt;
    
    </summary>
    
      <category term="FWT,FMT" scheme="http://yoursite.com/categories/FWT-FMT/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「hihocoder1596」Beautiful Sequences</title>
    <link href="http://yoursite.com/2018/08/16/%E3%80%8Chihocoder1596%E3%80%8DBeautiful-Sequences/"/>
    <id>http://yoursite.com/2018/08/16/「hihocoder1596」Beautiful-Sequences/</id>
    <published>2018-08-15T16:20:32.000Z</published>
    <updated>2018-08-16T16:03:03.500Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://hihocoder.com/problemset/problem/1596" target="_blank" rel="noopener">hihocoder-1596</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于一个正整数列 $ a[1], … , a[n] (n ≥ 3) $，如果对于所有 $2 ≤ i ≤ n - 1$ ，都有 $a[i-1] + a[i+1] ≥ 2 × a[i]$ ，则称这个数列是美丽的。</p><p>现在有一个正整数列 $b[1], …, b[n]$ ，请计算:将 $b$ 数列均匀随机打乱之后，得到的数列是美丽的概率 $P$。</p><p>你只需要输出 $(P × (n!)) $ $ mod \space 1000000007$ 即可。（显然 $P × (n!)$ 一定是个整数）</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将${ a_i}$转化为维护一个凸函数的图像 用$f[i][j][k][t]$ 表示当前第 $i$ 个,左端点最大值和次大值为 $a[i],a[j]$ ,右端点最大值为 $a[k]$ , 次大值 $a[t]$ 的方案.由于已经排过序,新加进来的 $契$ 一定比当前左右端点的都要大.</p><p>那么有两种情况,要么在左边成立 要么在右边成立.</p><script type="math/tex; mode=display">f[i][j][k][t] =>f[i+1][i][k][t] \space (a[i+1] + a[j]\geq 2 \times a[i]) \\\\f[i][j][k][t] =>f[i][j][i+1][k] \space (a[i+1] + a[t]  \geq 2 \times a[k])</script><p>这第二个柿子有一点奇怪 但是因为左边端点其实是和右边端点等价的. 所以可以将上面第二个写成这样</p><script type="math/tex; mode=display">f[i][j][k][t] =>f[i+1][k][i][j] \space (a[i+1] + a[t]  \geq 2 \times a[k])</script><p>注意细节将所有最小的计数 然后答案去乘它的阶乘.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,b[<span class="number">61</span>],f[<span class="number">61</span>][<span class="number">61</span>][<span class="number">61</span>][<span class="number">61</span>],ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isok</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span>*b[x] &lt;= b[a] + b[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;x=(x+y)%Mod;&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("data.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("data.ans","w",stdout);</span></span><br><span class="line">    n=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) b[i]=read();</span><br><span class="line">    sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ll = b[<span class="number">1</span>],l = <span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) &#123;<span class="keyword">if</span> (ll == b[i]) ++l,ans = ans * i % Mod;&#125;</span><br><span class="line">    <span class="keyword">if</span> (l == n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    f[l][l][l][l] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; ++k)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= i; ++t) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!f[i][j][k][t]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">int</span> del = f[i][j][k][t];</span><br><span class="line">                    upd(f[i+<span class="number">1</span>][i][k][t],del * isok(i+<span class="number">1</span>,i,j));</span><br><span class="line">                    upd(f[i+<span class="number">1</span>][k][i][j],del * isok(i+<span class="number">1</span>,k,t));</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="keyword">int</span> ans2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= n; ++t)</span><br><span class="line">            upd(ans2,f[n][j][k][t]);</span><br><span class="line">    ans2 = ans2 * ans % Mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://hihocoder.com/problemset/problem/1596&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hihocoder-1596&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-期望DP" scheme="http://yoursite.com/categories/DP-%E6%9C%9F%E6%9C%9BDP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「HDU5823」2016多校联合Round8 Color II 状压</title>
    <link href="http://yoursite.com/2018/08/16/%E3%80%8CHDU5823%E3%80%8D2016%E5%A4%9A%E6%A0%A1%E8%81%94%E5%90%88Round8-Color-II-%E7%8A%B6%E5%8E%8B/"/>
    <id>http://yoursite.com/2018/08/16/「HDU5823」2016多校联合Round8-Color-II-状压/</id>
    <published>2018-08-15T16:20:09.000Z</published>
    <updated>2018-08-16T16:03:16.391Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5823" target="_blank" rel="noopener">HDU5823</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求一个图的每一个子图的最小染色数.</p><p>点集大小 $N \leq 18$ </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力枚举子集的复杂度是 $O(3^n)$ ,等等! 似乎 $3^{18} = 387420489$ 可能常数优秀可以过？</p><p>我们先枚举子图 再枚举子集 是独立集合 涂一个颜色</p><p>然后将这个子集剩下的状态转移出来 $f[S] = min(f[S],f[S补]+1)$</p><p>交了一发 居然过了!</p><p>其实利用快速沃尔什变化可以优化到 $O(2^N \times N^2)$ </p><p>具体可以看这里<a href="https://blog.csdn.net/v5zsq/article/details/52403255" target="_blank" rel="noopener">Link</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int unsigned</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> msk,t,n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">19</span>][<span class="number">19</span>];</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">1</span>&lt;&lt;<span class="number">18</span>],valid[<span class="number">1</span>&lt;&lt;<span class="number">18</span>];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    t=read();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        n=read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">        MM(valid,<span class="number">1</span>); MM(res,<span class="number">0x3F</span>);</span><br><span class="line">        msk = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= msk; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i&gt;&gt;(j<span class="number">-1</span>)&amp;<span class="number">1</span>)</span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">                <span class="keyword">if</span> ((i&gt;&gt;(k<span class="number">-1</span>)&amp;<span class="number">1</span>) &amp;&amp; s[j][k] == <span class="string">'1'</span>) &#123;valid[i] = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span> (!valid[i]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= msk; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> S = i; S; S = (S<span class="number">-1</span>)&amp;i)</span><br><span class="line">            <span class="keyword">if</span> (valid[S]) res[i] = min(res[i],res[S^i] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> mul = <span class="number">1</span>,ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= msk; ++i) mul = mul * <span class="number">233</span>, ans += res[i] * mul;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%u\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5823&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU5823&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-状压DP" scheme="http://yoursite.com/categories/DP-%E7%8A%B6%E5%8E%8BDP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「CTSC2018」假面(faceless) 概率与期望dp 递推 01背包还原 </title>
    <link href="http://yoursite.com/2018/08/16/%E3%80%8CCTSC2018%E3%80%8D%E5%81%87%E9%9D%A2-faceless-%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9Bdp-%E9%80%92%E6%8E%A8-01%E8%83%8C%E5%8C%85%E8%BF%98%E5%8E%9F/"/>
    <id>http://yoursite.com/2018/08/16/「CTSC2018」假面-faceless-概率与期望dp-递推-01背包还原/</id>
    <published>2018-08-15T16:19:44.000Z</published>
    <updated>2018-08-16T16:02:56.653Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://loj.ac/problem/2552" target="_blank" rel="noopener">CTSC2018假面</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $N$ 个敌人,每个敌人的血条为 $hp_i$ ,针针会丢 $Q$ 个技能.</p><p>技能1:指定一个敌方单位 $id$ ,给出 $u,v$ ,表示有 $\frac{u}{v}$ 的概率命中这个单位并造成1的伤害.</p><p>技能2:给出一个敌人的集合 ${ id_i }$ ,大小为 $k$ ,求每一个 $id_i$ 的存活期望.</p><p>最后还要求出每个敌人的血量剩余的期望.</p><p>(语文水平低下还恳请看原题面)</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考虑用 $a[i][j]$ 表示第 $i$ 个敌人剩下 $j$ 的血量的期望.</p><p>我们对于每一次技能 $1$ 是可以在 $O(hp[id])$ 内维护出这个 $a[id][j]$ 的,不难理解.</p><p>具体如下</p><p>$a[id][0] = a[id][0] + a[id][1] * p$ (已经挂了加上只剩下1滴血的这次挂掉的)</p><p>$a[id][i] = (a[id][i] <em> (1-p) + a[id][i+1] </em> p)$ (打得到与打不到)</p><p>用 $f[i][j]$ 表示前 $i$ 个敌人有 $j$ 个存活的期望.</p><p>用 $exist[i]$ 表示技能2中集合第 $i$ 个的存活期望</p><p>用 $dead[i]$ 表示技能2中集合第 $i$ 个的死亡期望</p><p>那么对于每一个技能 $2$ 本质上是一次询问操作.</p><p>通过考虑第 $i$ 个敌人的存活与否 不难有以下的转移</p><script type="math/tex; mode=display">f[i][0] = f[i-1][0] * dead[i]\\\\f[i][j] = (f[i-1][j-1] * exist[i] + f[i-1][j] * dead[i])</script><p>这样的话我们可以对于每一个集合中的元素 都这么暴力跑一遍就可以得到每个的期望.</p><p>时间复杂度为 $O(Cn^3 + Qm)$ , $m$ 为最大$hp$值.</p><p>只拿到 $70pts$</p><p>考虑优化 每一次我们都暴力重新转移 显然很多状态都被浪费了</p><p>考虑逆转移 </p><script type="math/tex; mode=display">f[i][j] = (f[i-1][j-1] * exist[i] + f[i-1][j] * dead[i])</script><p>令$f[i][j] = f’[j]$ 表示要转移到的状态. $f’[j]$ 由 $f[j-1],f[j]$ 转移而来</p><script type="math/tex; mode=display">f'[j] = (f[j-1] * exist[i] + f[j] * dead[i])</script><p>把它改写过来就是</p><script type="math/tex; mode=display">f[j] = \frac{f'[j] - f[j-1]*exist[i]}{dead[i]}</script><p>这样每次我们就可以不需要暴力重置状态啦！这样就可以优化成$O(Cn^2+Qm)$</p><p><strong>坑点</strong> 注意求逆元不要每次都在做的时候<code>getinv(x,Mod)</code>这样复杂度多了一个<code>log(Mod)</code></p><p>虽然过了题但是还是要小心啊 预处理线推逆元.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">int</span> n,hp[MAXN],f[MAXN][MAXN],g[MAXN],t[MAXN],Inv[MAXN],</span><br><span class="line">    inv[MAXN],m,exist[MAXN],a[MAXN][MAXN],dead[MAXN],</span><br><span class="line">    ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    Inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">200</span>; ++i) Inv[i] = (Mod - Mod/i) * (Inv[Mod % i]) % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) hp[i] = read(),a[i][hp[i]] = <span class="number">1</span>;</span><br><span class="line">    m=read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> op = <span class="number">1</span>; op &lt;= m; ++op)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt = read();</span><br><span class="line">        <span class="keyword">if</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = read();</span><br><span class="line">            rep(i,<span class="number">1</span>,k) t[i] = read();</span><br><span class="line">            rep(i,<span class="number">1</span>,k) exist[i] = (<span class="number">1</span>-a[t[i]][<span class="number">0</span>]+Mod) % Mod;</span><br><span class="line">            rep(i,<span class="number">1</span>,k) dead[i] = (<span class="number">1</span>-exist[i]+Mod) % Mod;</span><br><span class="line">            f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            rep(i,<span class="number">1</span>,n)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>] * dead[i] % Mod;</span><br><span class="line">                rep(j,<span class="number">1</span>,i)</span><br><span class="line">                f[i][j] = (f[i<span class="number">-1</span>][j<span class="number">-1</span>] * exist[i] % Mod + f[i<span class="number">-1</span>][j] * dead[i] % Mod) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">            rep(i,<span class="number">1</span>,k) ans[i] = <span class="number">0</span>;</span><br><span class="line">            rep(i,<span class="number">1</span>,k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exist[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (exist[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">                        g[j<span class="number">-1</span>] = f[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> ded = getinv(dead[i],Mod);</span><br><span class="line">                        g[<span class="number">0</span>] = f[k][<span class="number">0</span>] * ded % Mod;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">                        g[j] = (f[k][j] - exist[i] * g[j<span class="number">-1</span>] % Mod + Mod) * ded % Mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">                    ans[i] = (ans[i] + exist[i] * g[j<span class="number">-1</span>] % Mod * Inv[j] % Mod) % Mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> id = read(),u = read(),v = read(),p = u * getinv(v,Mod) % Mod;</span><br><span class="line">            a[id][<span class="number">0</span>] = (a[id][<span class="number">0</span>] + a[id][<span class="number">1</span>] * p % Mod) % Mod;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= hp[id]; ++i)</span><br><span class="line">            a[id][i] = (a[id][i] * (<span class="number">1</span>-p+Mod) % Mod + a[id][i+<span class="number">1</span>] * p % Mod) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans[i] = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= hp[i]; ++j)</span><br><span class="line">         ans[i] = (ans[i] + a[i][j] * j % Mod) % Mod;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">0 2 1 1</span></span><br><span class="line"><span class="comment">1 1 2</span></span><br><span class="line"><span class="comment">0 2 1 1</span></span><br><span class="line"><span class="comment">0 3 1 1</span></span><br><span class="line"><span class="comment">1 1 2</span></span><br><span class="line"><span class="comment">1 3 1 2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">499122177 0 499122177</span></span><br><span class="line"><span class="comment">1 0 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://loj.ac/problem/2552&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CTSC2018假面&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-期望DP" scheme="http://yoursite.com/categories/DP-%E6%9C%9F%E6%9C%9BDP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>Suffix Automaton 后缀自动机学习笔记</title>
    <link href="http://yoursite.com/2018/08/09/Suffix-Automaton-%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/09/Suffix-Automaton-后缀自动机学习笔记/</id>
    <published>2018-08-08T22:29:41.000Z</published>
    <updated>2018-08-08T22:32:56.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="后缀自动机-Suffix-Automaton-SAM"><a href="#后缀自动机-Suffix-Automaton-SAM" class="headerlink" title="后缀自动机 Suffix Automaton (SAM)"></a>后缀自动机 Suffix Automaton (SAM)</h2><a id="more"></a><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>后缀自动机，本质上是关于单词的有向无环图，是一种强有力的数据结构，可以在$O(n)$的时间内构造完成并辅助解决很多字符串问题。它也可以被理解为一个长度为$N$的字符串的压缩之后存起来的信息。</p><p>后缀自动机是陈老师<code>WJMZBMR</code>首次引进国内OI圈的，陈老师的论文全是干货。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><h4 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h4><p>$Status(str)$表示$trans(init,str)$</p><p>$Reg(s)$表示从状态$s$开始可以识别的$string$(后缀集合)</p><p>下面这一段是关于$Reg(s)$的解释</p><p>什么是$Reg(s)$? <strong>好问题</strong>!举个例子:</p><p>假设现在有一个串$S = “ABCABCBD”$</p><p>对于要在$S$中寻找的一个子串$S’ = “BC”$</p><p>很明显出现位置的集合为${ (2,3),(5,6)}$</p><p>他出现的后缀集合为${ suffix(3), suffix(6)}$</p><p>对于一个$string \space a$</p><script type="math/tex; mode=display">Reg(Status(a)) = \{ suffix(r_1),suffix(r_2) ... suffix(r_n)\}</script><p>很明显 我们只要存下了${r1,r2,…,rn}$ 就可以确定这个$Reg(Status(a))$</p><p>不妨用一个集合$Right(a)$来记录这一信息</p><p><strong>性质1</strong> 对于两个子串$a,b$,如果$Right(a) = Right(b)$那么$Status(a) = Status(b)$</p><p><strong>性质2</strong> 一个状态$s$表示的所有子串$Right$集合相同,为$Right(s)$.</p><p>所以说给定了一个$Right(s)$以及子串的长度 我们就可以唯一确定这个子串$s$.</p><p><strong>性质3</strong> 一个$Right$集合和一个长度定义了一个子串。</p><p><strong>性质4</strong> 对于状态$s$，使得$Right(s)$合法的子串长度是一个区间，不妨定义为$[Min(s),Max(s)]$</p><p><strong>性质5</strong> $Right$集合的包含关系形成的树形结构叫做 <strong>Parent Tree</strong>      </p><p>其他文献中叫做$Suffix Link$这个边是从孩子指向父亲的，和AC自动机的Fail Tree有点像</p><p><strong>性质6</strong> <strong>Parent树从上往下Right集合变小，子串长度变长</strong> </p><p>Parent Tree的叶子节点数$O(N)$，每个内部节点至少两个孩子，所以总结点数$O(N) $</p><p><del>差不多这些就已经够了？</del></p><p>一些推论</p><p>可以证明，在SAM中节点数不超过$2n−2$，边数不超过$3n−3$（包括转移边和Parent Tree的边） </p><p><strong>性质7</strong>$Suffix Link$从父亲指向儿子后就是$Reverse(s)$ 的$Suffix Tree$  反向字符串的<strong>后缀树</strong>！后缀树是一颗经过压缩的字典树 </p><p><strong>性质8</strong> (感觉这个好神啊) 两个串的最长公共后缀,位于这两个串对应状态在$Parent$树上的最近公共祖先状态</p><p>其他还有一些可以发掘啊 比如$Max$和$Min$的关系什么的…</p><h3 id="建立SAM"><a href="#建立SAM" class="headerlink" title="建立SAM"></a>建立SAM</h3><p>$SAM$采用的是在线逐个加入字符的方法</p><p>简单来说分这几个阶段</p><ol><li><p>假设当前$T$的串长度为$L$,现在新加入一个$x$</p><p>$p = Status(T),Right(p) = L$</p></li><li><p>新建一个$np = ST(T+x)$(加法为字符串的加法)</p><p>那么$p$的$Parent$祖先的$Right$集合里都有$L$</p><p>向上更新$trans(v,x)$,也就是没有字符$x$的祖先都需要更新,从这个状态$last$要向当前新状态$np$添加转移</p><p>也就是$trans[last].ch[x] = np$</p></li><li><p>分类讨论最后祖先的情况</p><p>(1)如果最后查找到了$root$,也就是根节点 我们直接将它的$Parent$边连向$root$</p><p>(2)找到第一个有的祖先为$p$,令$q = trans[p].ch[x]$</p><p>再分类一波</p><p>​    (i)如果说满足了$t[q].val=t[p].val+1$ 说明强行加入这个$L+1$不会使得$Max(q)$减小 直接连边</p><p>​    (ii)不满足 我们考虑新建一个节点$nq$,$nq$本质上除了$Max$不同,其他信息均相同,将$np$,$q$的$parent$均连向$nq$</p></li></ol><p><del>代码实现还是比较可读的吧…</del></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sam</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> ch[<span class="number">26</span>],par,val; <span class="comment">//par -&gt; parent | val -&gt; Max</span></span><br><span class="line">    &#125;t[N];</span><br><span class="line">    <span class="keyword">int</span> c[N],a[N],siz[N]; <span class="comment">//这一行辅助数组</span></span><br><span class="line">    <span class="keyword">int</span> sz,root,last;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;sz=root=last=<span class="number">1</span>;&#125; <span class="comment">//定义根节点为1</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=last,np=++sz;<span class="comment">//新建一个节点</span></span><br><span class="line">        t[np].val=t[p].val+<span class="number">1</span>;<span class="comment">//长度为上一个节点长度+1</span></span><br><span class="line">        <span class="keyword">for</span>(;p&amp;&amp;!t[p].ch[x];p=t[p].par) t[p].ch[x]=np;<span class="comment">//向上祖先更改ch[x]</span></span><br><span class="line">        <span class="keyword">if</span>(!p) t[np].par=root;<span class="comment">//如果最终为根节点直接将parent边连向root</span></span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//分类讨论</span></span><br><span class="line">            <span class="keyword">int</span> q=t[p].ch[x];</span><br><span class="line">            <span class="keyword">if</span>(t[q].val==t[p].val+<span class="number">1</span>) t[np].par=q;<span class="comment">//满足Max(q) = Max(p) + 1</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> nq=++sz;<span class="comment">//新建nq节点</span></span><br><span class="line">                t[nq]=t[q];<span class="comment">//拷贝节点q的信息</span></span><br><span class="line">                t[nq].val=t[p].val+<span class="number">1</span>;<span class="comment">//nq和p唯一的不同Max</span></span><br><span class="line">                t[q].par=t[np].par=nq;<span class="comment">//也是拷贝信息</span></span><br><span class="line">                <span class="keyword">for</span>(;p&amp;&amp;t[p].ch[x]==q;p=t[p].par) t[p].ch[x]=nq;<span class="comment">//拷贝信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last=np;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//做其他事的时候可能会用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) c[t[i].val]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) c[i] += c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) a[--c[t[i].val]] = i; <span class="comment">//这里是基数排序对parent边作拓扑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;sam;</span><br></pre></td></tr></table></figure><h3 id="题单"><a href="#题单" class="headerlink" title="题单"></a>题单</h3><p><strong>spoj8222</strong> 后缀自动机模板(spoj8222) </p><p><strong>BZOJ3998</strong> 第K大子串，维护val和sum </p><p><strong>NOI2015品酒大会</strong> 用后缀自动机建出后缀树，然后就变成了后缀树裸题 </p><p><strong>BZOJ4545</strong> 后缀自动机+有向LCT </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;后缀自动机-Suffix-Automaton-SAM&quot;&gt;&lt;a href=&quot;#后缀自动机-Suffix-Automaton-SAM&quot; class=&quot;headerlink&quot; title=&quot;后缀自动机 Suffix Automaton (SAM)&quot;&gt;&lt;/a&gt;后缀自动机 Suffix Automaton (SAM)&lt;/h2&gt;
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「CF743D」Chloe and pleasant prizes</title>
    <link href="http://yoursite.com/2018/07/22/%E3%80%8CCF743D%E3%80%8DChloe-and-pleasant-prizes/"/>
    <id>http://yoursite.com/2018/07/22/「CF743D」Chloe-and-pleasant-prizes/</id>
    <published>2018-07-22T03:05:01.000Z</published>
    <updated>2018-07-22T03:09:55.692Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="http://codeforces.com/contest/743/problem/D" target="_blank" rel="noopener">CF734D</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求最大的两子树权值之和,要求子树没有交集</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>真·斯波题,直接统计最大子树和次大子树即可.</p><p>特判一条链的情况 是不可能有答案的.</p><p>恶心的inf弄我半天</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line"><span class="keyword">int</span> n,w[MAXN],fa[MAXN],dp[MAXN],head[MAXN],sz[MAXN],cnt,flag=<span class="number">0</span>,ans=-inf;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt;</span><br><span class="line">&#125;E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    E[++cnt].nxt = head[u]; E[cnt].to = v; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = -inf;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    dp[u] = -inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">        ++sz[u];</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        w[u] += w[v];</span><br><span class="line">        dp[u] = max(dp[u],dp[v]);</span><br><span class="line">        <span class="keyword">if</span> (sz[u] &gt; <span class="number">1</span>) flag = <span class="number">1</span>;</span><br><span class="line">        ans = max(ans,cur + dp[v]);</span><br><span class="line">        cur = max(cur,dp[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[u] = max(dp[u],w[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) w[i]=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;<span class="keyword">int</span> u=read(),v=read(); addedge(u,v); addedge(v,u);&#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Impossible"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;http://codeforces.com/contest/743/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF734D&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「CF696B」Puzzles 树上期望DP</title>
    <link href="http://yoursite.com/2018/07/22/%E3%80%8CCF696B%E3%80%8DPuzzles-%E6%A0%91%E4%B8%8A%E6%9C%9F%E6%9C%9BDP/"/>
    <id>http://yoursite.com/2018/07/22/「CF696B」Puzzles-树上期望DP/</id>
    <published>2018-07-22T02:32:38.000Z</published>
    <updated>2018-07-22T03:08:40.204Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="http://codeforces.com/contest/696/problem/B" target="_blank" rel="noopener">CF696B</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一棵树,根据$dfs(x)$中$x$的不同,每个节点的$dfn(i)$也会不同,求$dfs(i),i \in[1,n]$中$dfn(i)$的期望.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>还是去考虑每个节点作为根节点大法师时对其他点的贡献.</p><p>我们不如考虑一颗子树.已知节点$u$的期望$ans[u]=1.0$</p><p>对于剩下的点考虑$dfn$的排列可以是直接从$u$到达,则$ans[v] += ans[u] + 1.0$</p><p>或者是经过$u$的其他儿子且排在节点$v$前面的儿子的来.</p><p>不难发现每次对于任意$u$的儿子$a,b$满足$dfn(a)&gt;dfn(b)$的概率为$\frac{1}{2}$</p><p>所以第二部分$ans[v] += (其他节点总数) * 0.5$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt;</span><br><span class="line">&#125;E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN],sz[MAXN],cnt = <span class="number">0</span>,n;</span><br><span class="line"><span class="keyword">double</span> ans[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    E[++cnt].nxt = head[u]; E[cnt].to = v; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v; i; i=E[i].nxt)&#123;</span><br><span class="line">        v=E[i].to;</span><br><span class="line">        <span class="comment">//if (v != fa) </span></span><br><span class="line">        dfs(v,u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v; i; i=E[i].nxt)&#123;</span><br><span class="line">        v=E[i].to;</span><br><span class="line">        <span class="comment">//if(v==f)continue;</span></span><br><span class="line">        ans[v]=ans[u]+<span class="number">1.0</span>+(sz[u]-sz[v]<span class="number">-1</span>)*<span class="number">0.5</span>;</span><br><span class="line">        dfs2(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    rep(i,<span class="number">2</span>,n) &#123;</span><br><span class="line">        <span class="keyword">int</span> t=read();</span><br><span class="line">        addedge(t,i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    ans[<span class="number">1</span>] = <span class="number">1.0</span>;</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">"%.7lf "</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;http://codeforces.com/contest/696/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF696B&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「ZOJ3626」Treasure Hunt I 树上背包</title>
    <link href="http://yoursite.com/2018/07/22/%E3%80%8CZOJ3626%E3%80%8DTreasure-Hunt-I-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85/"/>
    <id>http://yoursite.com/2018/07/22/「ZOJ3626」Treasure-Hunt-I-树上背包/</id>
    <published>2018-07-22T02:12:04.000Z</published>
    <updated>2018-07-22T15:16:46.965Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3626" target="_blank" rel="noopener">ZOJ3626</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一棵树每条边上有花费值$cost_i$,每个点上有权值$w_i$,求以$k$为起点,花费小于$m$,并最终回到起点$k$,能得到的最大权值</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>树上的背包dp</p><p>令$f[i][j]$表示从$i$为起点,花费$j$所可以得到的最大权值.有两种决策对于$i$的孩子$v$,要么不走,要么花费$cost_{i \space to \space v}$</p><p>所以有$f[i][j]=max(f[i][j],f[v][k]+f[i][j-cost-k])$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,cost;</span><br><span class="line">&#125;E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k,head[MAXN],w[MAXN],vis[MAXN],cnt,ans;</span><br><span class="line"><span class="keyword">int</span> f[MAXN][<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    E[++cnt].nxt = head[u]; E[cnt].to = v; E[cnt].cost = w; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    f[u][<span class="number">0</span>] = w[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to,cost = E[i].cost;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            dfs(v);</span><br><span class="line">            per(j,m,<span class="number">0</span>) rep(k,<span class="number">0</span>,j-cost)</span><br><span class="line">            f[u][j]=max(f[v][k]+f[u][j-k-cost],f[u][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n) == <span class="number">1</span>)&#123;</span><br><span class="line">        cnt=<span class="number">0</span>;ans=<span class="number">-1</span>;MM(vis,<span class="number">0</span>);MM(head,<span class="number">0</span>);MM(f,<span class="number">0</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n) w[i]=read();</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;<span class="keyword">int</span> u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w);&#125;</span><br><span class="line">        k=read(),m=read()&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        dfs(k);</span><br><span class="line">        rep(i,<span class="number">0</span>,m) ans=max(ans,f[k][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3626&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZOJ3626&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-树形DP" scheme="http://yoursite.com/categories/DP-%E6%A0%91%E5%BD%A2DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「CF1006F」Xor-Paths Meet-in-the-middle</title>
    <link href="http://yoursite.com/2018/07/21/%E3%80%8CCF1006F%E3%80%8DXor-Paths-Meet-in-the-middle/"/>
    <id>http://yoursite.com/2018/07/21/「CF1006F」Xor-Paths-Meet-in-the-middle/</id>
    <published>2018-07-21T14:43:36.000Z</published>
    <updated>2018-07-21T14:46:48.187Z</updated>
    
    <content type="html"><![CDATA[<p><del>(第一份屯题计划?)</del></p><p>Links there:<a href="http://codeforces.com/problemset/problem/1006/F" target="_blank" rel="noopener">CF1006F</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n \times m$的矩阵,从起点$(1,1)$起步到$(n,m)$,每次只能向下或者向右走.</p><p>求所有满足路径上的异或和为 $k$ 的路径条数.</p><p>$ n,m \leq 20 ,\space k\leq 1e18$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>采用中间相遇的方法.显然每次从$(1,1)$ 到 $(n,m)$ 需要走$(n+m-2)$步.前一半暴力大法师.后一半直接判断是否可以异或到$k$即可.$k$很大的话不如开个$map$.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">25</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;cnt[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> a[MAXN][MAXN],ans=<span class="number">0</span>,n,m,k,h;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val,<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> cur = val ^ a[x][y];</span><br><span class="line">    <span class="keyword">if</span> (x+y == h+<span class="number">2</span>) &#123;</span><br><span class="line">         ++cnt[x][y][cur];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(x+<span class="number">1</span>,y,cur,step+<span class="number">1</span>);</span><br><span class="line">    dfs(x,y+<span class="number">1</span>,cur,step+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val,<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> cur = val ^ a[x][y];</span><br><span class="line">    <span class="keyword">if</span> (x+y == h+<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[x][y][val^k]) ans += cnt[x][y][val^k];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs2(x<span class="number">-1</span>,y,cur,step+<span class="number">1</span>);</span><br><span class="line">    dfs2(x,y<span class="number">-1</span>,cur,step+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),m=read(),k=read();</span><br><span class="line">    h=(n+m<span class="number">-2</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,m) a[i][j]=read();</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    dfs2(n,m,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3 11</span></span><br><span class="line"><span class="comment">2 1 5</span></span><br><span class="line"><span class="comment">7 10 0</span></span><br><span class="line"><span class="comment">12 6 4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;(第一份屯题计划?)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;http://codeforces.com/problemset/problem/1006/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF1006F&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「屯题计划」Codeforces 泛做</title>
    <link href="http://yoursite.com/2018/07/21/%E3%80%8C%E5%B1%AF%E9%A2%98%E8%AE%A1%E5%88%92%E3%80%8DCodeforces-%E6%B3%9B%E5%81%9A/"/>
    <id>http://yoursite.com/2018/07/21/「屯题计划」Codeforces-泛做/</id>
    <published>2018-07-21T13:26:37.000Z</published>
    <updated>2018-07-22T03:10:21.986Z</updated>
    
    <content type="html"><![CDATA[<p><strong>也算是个脑子康复训练吧。</strong></p><p>蒟蒻不做题提前退役。蒟蒻不撕烤智熵何来？蒟蒻不反省天天被D。</p><p><strong>Codeforces:</strong></p><center><font color="#dd00dd"><font size="10"><font face="fantasy"> 3 / 50 </font> </font><br>  </font><br></center> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;也算是个脑子康复训练吧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;蒟蒻不做题提前退役。蒟蒻不撕烤智熵何来？蒟蒻不反省天天被D。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Codeforces:&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&quot;#dd00dd&quot;
      
    
    </summary>
    
      <category term="屯题计划" scheme="http://yoursite.com/categories/%E5%B1%AF%E9%A2%98%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ5028」小Z的加油店 差分 线段树单点修改区间求gcd</title>
    <link href="http://yoursite.com/2018/07/21/%E3%80%8CBZOJ5028%E3%80%8D%E5%B0%8FZ%E7%9A%84%E5%8A%A0%E6%B2%B9%E5%BA%97-%E5%B7%AE%E5%88%86-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%B1%82gcd/"/>
    <id>http://yoursite.com/2018/07/21/「BZOJ5028」小Z的加油店-差分-线段树单点修改区间求gcd/</id>
    <published>2018-07-21T10:25:26.000Z</published>
    <updated>2018-07-21T10:30:39.051Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5028" target="_blank" rel="noopener">BZOJ5028</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>参见传送门(<del>懒得写了</del>)</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考试时的我:”md怎么搞啊 应该是求个区间gcd吧 那这样的话加标记对求gcd有影响怎么算啊 不会不是线段树这个东西吧 会不会是分块啊 难道还有其他姿势吗…”</p><p>诶 那么差分一下不久完事了!多开个线段树或者树状数组记录原序列就好了啊!</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,B[N],ans[<span class="number">4</span>*N],C[<span class="number">4</span>*N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = p;i &lt; N;i += lowbit(i)) C[i] += v;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> ret = <span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i = p;i;i -= lowbit(i)) ret += C[i];<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _gcd(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;a=<span class="built_in">abs</span>(a);b=<span class="built_in">abs</span>(b);<span class="keyword">return</span> __gcd(a,b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;ans[o] = B[l] - B[l - <span class="number">1</span>];<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(lc,l,mid);build(rc,mid + <span class="number">1</span>,r);</span><br><span class="line">    ans[o] = _gcd(ans[lc],ans[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;ans[o] += v;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= mid) modify(lc,l,mid,p,v);</span><br><span class="line">    <span class="keyword">else</span> modify(rc,mid + <span class="number">1</span>,r,p,v);</span><br><span class="line">    ans[o] = _gcd(ans[lc],ans[rc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == L &amp;&amp; r == R) <span class="keyword">return</span> ans[o];</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(R &lt;= mid) <span class="keyword">return</span> query(lc,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(L &gt; mid) <span class="keyword">return</span> query(rc,mid + <span class="number">1</span>,r,L,R);</span><br><span class="line">    <span class="keyword">return</span> _gcd(query(lc,l,mid,L,mid),query(rc,mid + <span class="number">1</span>,r,mid + <span class="number">1</span>,R));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("bucket.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("bucket.out","w",stdout);</span></span><br><span class="line">    n = read(),m = read();</span><br><span class="line">    MM(B,<span class="number">0</span>);MM(C,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        B[i] = read();</span><br><span class="line">        add(i,B[i]);</span><br><span class="line">        add(i + <span class="number">1</span>,-B[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt = read(),l = read(),r = read(),v;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>)&#123;</span><br><span class="line">            v = read();</span><br><span class="line">            modify(<span class="number">1</span>,<span class="number">1</span>,n,l,v);</span><br><span class="line">            <span class="keyword">if</span>(r &lt; n)</span><br><span class="line">            modify(<span class="number">1</span>,<span class="number">1</span>,n,r + <span class="number">1</span>,-v);</span><br><span class="line">            add(l,v);</span><br><span class="line">            add(r + <span class="number">1</span>,-v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum(l));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,_gcd(query(<span class="number">1</span>,<span class="number">1</span>,n,l + <span class="number">1</span>,r),sum(r)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fclose(stdin); fclose(stdout);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=5028&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ5028&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「HDU1290」(加强) 数学 递推</title>
    <link href="http://yoursite.com/2018/07/21/HDU1290-%E5%8A%A0%E5%BC%BA/"/>
    <id>http://yoursite.com/2018/07/21/HDU1290-加强/</id>
    <published>2018-07-21T10:05:37.000Z</published>
    <updated>2018-07-21T10:23:17.803Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1290" target="_blank" rel="noopener">HDU1290</a>(弱化版)</p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个球,把球切 $N$ 刀(允许各个方向但是必须直线切),问最多可以分成多少块(对$1e9+7$取模).</p><p>加强,$N \leq 1,000,000,000$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>令$f(n)$表示答案,既最多可以分成的块数,$d(n)$表示二维平面内 $N$ 条直线分成的块数</p><p>考虑$f(n)$与$f(n-1)$的关系,相当于在$f(n-1)$的基础上再在一个平面内多分出$d(n-1)$块</p><p>所以有$f(n)=f(n-1)+d(n-1)$</p><p>$d(n-1) = 1+\frac{(n-1)\times n}{2}$ (这个应该小学奥数就教过吧..找一下规律就行了)</p><p>所以$f(n) = f(1) + \sum_{i=1}^{n-1}d(i)$</p><p>明显$f(1)=2$</p><p>$f(n)=2+(n-1)+\sum<em>{i=2}^{n}\frac{n^2}{2}-\sum</em>{i=2}^{n}\frac{n}{2}$</p><p>诶我们似乎发现把后面两个$\sum$中$i$下标从1开始对答案没有影响而且似乎更优美了!</p><p>$\therefore f(n) = n+1+\frac{n\times (n+1) \times (2n+1)}{12}+\frac{(1+n)\times n}{4}$</p><p>于是求一下逆元啊什么的就解决了啊</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    freopen(<span class="string">"melon.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"melon.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n=read();</span><br><span class="line">        <span class="keyword">int</span> ans=(<span class="number">1</span>+n+(getinv(<span class="number">12</span>,Mod) * n % Mod * (n+<span class="number">1</span>) % Mod * (<span class="number">2</span>*n+<span class="number">1</span>) % Mod) - (getinv(<span class="number">4</span>,Mod) * n % Mod * (n+<span class="number">1</span>) % Mod) + Mod) % Mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>); fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1290&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU1290&lt;/a&gt;(弱化版)&lt;/p&gt;
    
    </summary>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「NOI2018」屠龙勇士 CRT,EXCRT</title>
    <link href="http://yoursite.com/2018/07/21/NOI2018-%E5%B1%A0%E9%BE%99%E5%8B%87%E5%A3%AB-CRT-EXCRT/"/>
    <id>http://yoursite.com/2018/07/21/NOI2018-屠龙勇士-CRT-EXCRT/</id>
    <published>2018-07-21T09:13:17.000Z</published>
    <updated>2018-07-21T10:06:59.761Z</updated>
    
    <content type="html"><![CDATA[<p><del>一道细节毒瘤的签到题</del></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>小D 最近在网上发现了一款小游戏。游戏的规则如下：</p><ul><li>游戏的目标是按照编号$1 - n$ 顺序杀掉 $n$ 条巨龙，每条巨龙拥有一个初始的生命值 $a_i$ 。同时每条巨龙拥有恢复能力，当其使用恢复能力时，它的生命值就会每次增加 $p_i$ ,直至生命值非负。只有在攻击结束后且当生命值恰好为 $0$ 时它才会死去。</li><li>游戏开始时玩家拥有 $m$ 把攻击力已知的剑，每次面对巨龙时，玩家只能选择一把剑，当杀死巨龙后这把剑就会消失，但作为奖励，玩家会获得全新的一把剑。 小D觉得这款游戏十分无聊，但最快通关的玩家可以获得 ION2018 的参赛资格，于是小D决定写一个笨笨的机器人帮她通关这款游戏，她写的机器人遵循以下规则：</li><li>每次面对巨龙时，机器人会选择当前拥有的，攻击力不高于巨龙初始生命值中攻击力最大的一把剑作为武器。如果没有这样的剑，则选择攻击力最低的一把剑作为武器。</li><li>机器人面对每条巨龙，它都会使用上一步中选择的剑攻击巨龙固定的$x$次，使巨龙的生命值减少 $x \times ATK$ 。</li><li>之后，巨龙会不断使用恢复能力，每次恢复pi 生命值。若在使用恢复能力前或 某一次恢复后其生命值为0 ，则巨龙死亡，玩家通过本关。</li></ul><p>那么显然机器人的攻击次数是决定能否最快通关这款游戏的关键。小 D 现在得知了每条巨龙的所有属性，她想考考你，你知道应该将机器人的攻击次数x设置为多少，才能用最少的攻击次数通关游戏吗？</p><p>当然如果无论设置成多少都无法通关游戏，输出$-1$即可。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>不难发现 每次使用的剑都是可以确定的</p><p>用priority_queue或者map或者set或者脑残地手写一个平衡树都可以在$logn$的时间内得到.</p><p>所以用$O(nlogn)$的时间得到所有的$swd_i,p_i,a_i$</p><p>我们的任务是解对于所有模方程组成立的 $x$.</p><script type="math/tex; mode=display">swd_i\times x \space -a_i \equiv0 \pmod {p_i}</script><script type="math/tex; mode=display">x \equiv a_i * inv(swd_i)  \pmod {p_i}</script><p>似乎用一个EXCRT就好了,因为不保证$p_i$是质数,要用ex_gcd求逆元,特判负数情况.</p><p>如果用乘起来的CRT秒秒钟爆炸long long哦 用合并式的EXCRT似乎更加资瓷哦</p><p>中间爆long long导致我同步赛就只有25分了….炒鸡难受…</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN],p[MAXN],swd[MAXN],tag[MAXN],cur=<span class="number">1</span>,cc;</span><br><span class="line"><span class="keyword">int</span> Remain[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">MulMod</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a * b - (<span class="keyword">int</span>)((<span class="keyword">long</span> <span class="keyword">double</span>) a * b /m) *m;</span><br><span class="line">    <span class="keyword">return</span> t%m+(t&gt;&gt;<span class="number">63</span>&amp;m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pri,atk;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pri &lt; cur &amp;&amp; b.pri &lt; cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(atk &lt;= cc &amp;&amp; b.atk &lt;= cc) <span class="keyword">return</span> atk &lt; b.atk;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> atk &gt; b.atk;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> pri &lt; b.pri;</span><br><span class="line">    &#125;</span><br><span class="line">    Node(<span class="keyword">int</span> xx=<span class="number">0</span>,<span class="keyword">int</span> yy=<span class="number">0</span>):pri(xx),atk(yy)&#123;&#125;</span><br><span class="line">&#125;b[MAXN];</span><br><span class="line">priority_queue&lt;Node&gt;pq;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pref</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty()) pq.pop();</span><br><span class="line">    cur=<span class="number">1</span>; cc=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;<span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;<span class="keyword">int</span> k=exgcd(b,a%b,y,x);y-=x*(a/b); <span class="keyword">return</span> k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">exgcd_inv</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123; <span class="comment">//calc inv(a) in mod b</span></span><br><span class="line">    <span class="keyword">int</span> x,y,ans;</span><br><span class="line">    <span class="keyword">if</span> (exgcd(a,b,x,y) == <span class="number">1</span>) ans = (x%b+b) % b;</span><br><span class="line">    <span class="keyword">else</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> m1, <span class="keyword">int</span> a2, <span class="keyword">int</span> m2, <span class="keyword">int</span> &amp;a3, <span class="keyword">int</span> &amp;m3)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d = __gcd(m1, m2);</span><br><span class="line">    <span class="keyword">int</span> c = a2 - a1;</span><br><span class="line">    <span class="keyword">if</span>(c % d) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    c = (c % m2 + m2) % m2;</span><br><span class="line">    m1 /= d;m2 /= d;c /= d;</span><br><span class="line">    c = MulMod(c,exgcd_inv(m1, m2),m2);</span><br><span class="line">    c *= m1 * d; c += a1;</span><br><span class="line">    m3 = m1 * m2 * d;</span><br><span class="line">    a3 = (c % m3 + m3) % m3;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CRT</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> m[], <span class="keyword">int</span> n)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> m1 = m[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)  &#123;</span><br><span class="line">        <span class="keyword">int</span> a2 = a[i];</span><br><span class="line">        <span class="keyword">int</span> m2 = m[i];</span><br><span class="line">        <span class="keyword">int</span> m3, a3;</span><br><span class="line">        <span class="keyword">if</span>(!merge(a1, m1, a2, m2, a3, m3))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        a1 = a3;</span><br><span class="line">        m1 = m3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (a1 % m1 + m1) % m1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    freopen(<span class="string">"dragon.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"dragon.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> flg=<span class="number">0</span>,minans=<span class="number">0</span>;</span><br><span class="line">        Pref();</span><br><span class="line">        n=read(); m=read();</span><br><span class="line">        rep(i,<span class="number">1</span>,n) a[i]=read();rep(i,<span class="number">1</span>,n) p[i]=read();</span><br><span class="line">        rep(i,<span class="number">1</span>,n) b[i]=Node(i,read());rep(i,<span class="number">1</span>,m) b[n+i] = Node(<span class="number">0</span>,read());</span><br><span class="line">        rep(i,<span class="number">1</span>,m) pq.push(b[n+i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            cur=i;</span><br><span class="line">            cc=a[cur];</span><br><span class="line">            Node t=pq.top();</span><br><span class="line">            swd[i]=t.atk;</span><br><span class="line">            pq.pop();</span><br><span class="line">            pq.push(b[i]);</span><br><span class="line">            minans = max(minans,((a[i]+swd[i]<span class="number">-1</span>)/swd[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">            <span class="keyword">int</span> iv = exgcd_inv(swd[i],p[i]);</span><br><span class="line">            <span class="keyword">if</span> (iv == <span class="number">-1</span>) &#123;flg = <span class="number">1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">            Remain[i] = MulMod(iv,a[i],p[i]); <span class="comment">//iv * a[i] % p[i];</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flg) &#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> ans = CRT(Remain,p,n);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,max(ans,minans));</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>); fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;一道细节毒瘤的签到题&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
</feed>
