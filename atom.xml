<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>karriganasta&#39;s blog</title>
  
  <subtitle>infinite OI road.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-16T13:38:59.311Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>karriganasta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「NOI2011」道路修建 树形dp</title>
    <link href="http://yoursite.com/2018/07/16/%E3%80%8CNOI2011%E3%80%8D%E9%81%93%E8%B7%AF%E4%BF%AE%E5%BB%BA-%E6%A0%91%E5%BD%A2dp/"/>
    <id>http://yoursite.com/2018/07/16/「NOI2011」道路修建-树形dp/</id>
    <published>2018-07-16T13:32:54.000Z</published>
    <updated>2018-07-16T13:38:59.311Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://loj.ac/problem/2445" target="_blank" rel="noopener">NOI2011道路修建</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一个树,定义每条边的建造费用为边两侧点的差的绝对值于边权$w_i$的乘积,求出总的建造费用.</p><p>(诶是不是太简洁了)</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>直接树形dp就行啦.似乎没什么可以思考的地方呢…</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sz[MAXN],n,vis[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,w,nxt;</span><br><span class="line">&#125;E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN],cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">E[++cnt].nxt = head[u];E[cnt].to = v;E[cnt].w = w;head[u] = cnt;</span><br><span class="line">E[++cnt].nxt = head[v];E[cnt].to = u;E[cnt].w = w;head[v] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">sz[cur] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = E[i].nxt) &#123;</span><br><span class="line"><span class="keyword">int</span> v = E[i].to,w = E[i].w;</span><br><span class="line"><span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">dfs(v);</span><br><span class="line">sz[cur] += sz[v];</span><br><span class="line">ans += w * <span class="built_in">abs</span>(n-(sz[v]) - sz[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">MM(head,<span class="number">0</span>); MM(vis,<span class="number">0</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;<span class="keyword">int</span> u=read(),v=read(),w=read(); addedge(u,v,w);&#125;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">1 4 2</span></span><br><span class="line"><span class="comment">6 3 1</span></span><br><span class="line"><span class="comment">5 2 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://loj.ac/problem/2445&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NOI2011道路修建&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-树形DP" scheme="http://yoursite.com/categories/DP-%E6%A0%91%E5%BD%A2DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「HEOI2015」兔子与樱花 贪心+树形dp</title>
    <link href="http://yoursite.com/2018/07/16/%E3%80%8CHEOI2015%E3%80%8D%E5%85%94%E5%AD%90%E4%B8%8E%E6%A8%B1%E8%8A%B1-%E8%B4%AA%E5%BF%83-%E6%A0%91%E5%BD%A2dp%E2%80%98/"/>
    <id>http://yoursite.com/2018/07/16/「HEOI2015」兔子与樱花-贪心-树形dp‘/</id>
    <published>2018-07-16T13:19:18.000Z</published>
    <updated>2018-07-16T13:31:42.575Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://loj.ac/problem/2118" target="_blank" rel="noopener">HEOI2015 兔子与樱花</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一个有根树,每个节点有一个权值(樱花个数) $c_i$ ,给出定值 $m$ ,定义删除节点操作.</p><p>当一个节点被去掉之后,这个节点上的樱花和它的儿子节点都被连到删掉节点的父节点上.如果父节点也被删除,那么就会继续向上连接,直到第一个没有被删除的节点为止。 </p><p>对于每一个节点 $i​$ ,它的儿子节点的个数和 $i​$ 节点上樱花个数之和不能超过 $m​$ ,$son_i + c_i \leq m​$.</p><p>求最多删去节点的个数.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><del>（感觉整天傻逼题写半天好颓废啊）</del></p><p>可以把树上每个点的权值看为$c_i + son_i$</p><p>每次先统计子树信息,对子树贪心从权值小的开始选并删除,直到无法使得$son_i + c_i \leq m$为止.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;lt[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN],fa[MAXN],vis[MAXN],ans;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[x] &lt; a[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)(lt[u].size()); i++) dfs(lt[u][i]);</span><br><span class="line">a[u] += lt[u].size();</span><br><span class="line">sort(lt[u].begin(),lt[u].end(),cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,v; i &lt; (<span class="keyword">int</span>)(lt[u].size()); i++) &#123;</span><br><span class="line">v = lt[u][i];</span><br><span class="line"><span class="keyword">if</span> (a[u] + a[v] &lt;= m+<span class="number">1</span>) ++ans,a[u] += a[v] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=read();</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> k=read();</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="keyword">int</span> v=read();</span><br><span class="line">fa[v]=i; lt[i].pb(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 4</span></span><br><span class="line"><span class="comment">0 2 2 2 4 1 0 4 1 1</span></span><br><span class="line"><span class="comment">3 6 2 3</span></span><br><span class="line"><span class="comment">1 9</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">2 7 4</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://loj.ac/problem/2118&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HEOI2015 兔子与樱花&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-树形DP" scheme="http://yoursite.com/categories/DP-%E6%A0%91%E5%BD%A2DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「SHOI2017」分手是祝愿 差分,期望dp</title>
    <link href="http://yoursite.com/2018/07/15/%E3%80%8CSHOI2017%E3%80%8D%E5%88%86%E6%89%8B%E6%98%AF%E7%A5%9D%E6%84%BF-%E5%B7%AE%E5%88%86-%E6%9C%9F%E6%9C%9Bdp/"/>
    <id>http://yoursite.com/2018/07/15/「SHOI2017」分手是祝愿-差分-期望dp/</id>
    <published>2018-07-15T13:51:32.000Z</published>
    <updated>2018-07-15T14:16:41.636Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://loj.ac/problem/2145" target="_blank" rel="noopener">LOJ-2145/SHOI2017</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>B 君在玩一个游戏,这个游戏由 $N$ 个灯和 $N$个开关组成，给定这 $N$ 个灯的初始状态.下标为从 $1$ 到 $N$  的正整数。</p><p>每个灯有两个状态亮和灭，我们用 $1$ 来表示这个灯是亮的，用 $0$ 表示这个灯是灭的，游戏的目标是使所有灯都灭掉。</p><p>但是当操作第 $i$ 个开关时，所有编号为 $i$ 的约数（包括 $1$ 和 $i$）的灯的状态都会被改变，即从亮变成灭，或者是从灭变成亮。</p><p>B 君发现这个游戏很难，于是想到了这样的一个策略，每次等概率随机操作一个开关，直到所有灯都灭掉。</p><p>这个策略需要的操作次数很多，B 君想到这样的一个优化。如果当前局面，可以通过操作小于等于  $k$  个开关使所有灯都灭掉，那么他将不再随机，直接选择操作次数最小的操作方法（这个策略显然小于等于  $k$  步）操作这些开关。</p><p>B 君想知道按照这个策略（也就是先随机操作，最后 小于等于 $k​$ 步，使用操作次数最小的操作方法）的操作次数的期望。</p><p>这个期望可能很大，但是 B 君发现这个期望乘以 $N$ 的阶乘一定是整数，所以他只需要知道这个整数对 $100003$ 取模之后的结果。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>bike的题就是简洁干净.</p><p>考虑$N=K$的情况,发现只要贪心从大到小取就行啦,所以50分是送的!?</p><p>令$f(i)$表示还有$i$步达成目标的期望步数.</p><script type="math/tex; mode=display">f(i)=\frac{i}{n}f(i-1)+(1-\frac{i}{n})f(i+1) \\\\f(i+1)=\frac{i+1}{n}f(i)+(1-\frac{i+1}{n})f(i+2)\\\\...</script><p>但是这样并不好计算啊!在算$f(i)$的时候并不能保证都知道$f(i-1),f(i+1)$</p><p>考虑差分.差分$g$的意义就是从第$i$步到第$i-1$步的期望.</p><script type="math/tex; mode=display">g(i)=\frac{i}{n}+\frac{n-i}{n}(1+g(i+1)+g(i))\\\\g(i)=\frac{i}{n}+\frac{n-i}{n}g(i)+\frac{n-i}{n}(1+g(i+1))\\\\\frac{i}{n}g(i)=\frac{i}{n}+\frac{n-i}{n}(1+g(i+1))\\\\g(i)=1+\frac{n-i}{i}(i+g(i+1))</script><p>最终把$g(i)$加起来就是答案啦</p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> g[MAXN],n,k,lt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> (lt[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> tt = <span class="built_in">sqrt</span>(i+<span class="number">0.5</span>);</span><br><span class="line">            ++ret;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tt; ++j) <span class="keyword">if</span>(!(i%j))&#123;</span><br><span class="line">                lt[j] ^= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i != j * j) lt[i/j] ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),k=read();</span><br><span class="line">    <span class="keyword">int</span> fac = <span class="number">1</span>,ans = <span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) fac = fac * i % Mod;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) lt[i]=read();</span><br><span class="line">    <span class="keyword">int</span> t = calc();</span><br><span class="line">    <span class="keyword">if</span> (t &lt;= k)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, t * fac % Mod),<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) g[i] = <span class="number">1</span>;</span><br><span class="line">    g[n] = <span class="number">1</span>;</span><br><span class="line">    per(i,n<span class="number">-1</span>,k+<span class="number">1</span>) g[i] = (<span class="number">1</span> + (g[i+<span class="number">1</span>] + <span class="number">1</span>) * (n - i) % Mod * getinv(i,Mod) % Mod) % Mod;</span><br><span class="line">    rep(i,<span class="number">1</span>,t) &#123;ans += g[i]; <span class="keyword">if</span> (ans &gt;= Mod) ans -= Mod;&#125;</span><br><span class="line">    ans = ans * fac % Mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 0</span></span><br><span class="line"><span class="comment">0 0 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">512</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://loj.ac/problem/2145&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ-2145/SHOI2017&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-期望DP" scheme="http://yoursite.com/categories/DP-%E6%9C%9F%E6%9C%9BDP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>课件/个人总结[-RESERVED-]</title>
    <link href="http://yoursite.com/2018/07/11/%E8%AF%BE%E4%BB%B6-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-RESERVED/"/>
    <id>http://yoursite.com/2018/07/11/课件-个人总结-RESERVED/</id>
    <published>2018-07-11T14:20:36.000Z</published>
    <updated>2018-07-11T14:27:30.411Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX19G1i02Vm9V6zmHAXfvcAk3hBg1320A/ysOh/emmTqiUer3+VpHZolEWbbrc15Wo2yRH4dYErRwTnjycM00N6c/UD2FaGj2pktZ2hh3OwiJ9aNCu8Ej8+kP</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以后个人小结什么的都挂这里了…&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>「HDU2089」不要62 数位dp</title>
    <link href="http://yoursite.com/2018/07/10/%E3%80%8CHDU2089%E3%80%8D%E4%B8%8D%E8%A6%8162-%E6%95%B0%E4%BD%8Ddp/"/>
    <id>http://yoursite.com/2018/07/10/「HDU2089」不要62-数位dp/</id>
    <published>2018-07-10T15:08:14.000Z</published>
    <updated>2018-07-11T12:12:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://vjudge.net/problem/HDU-2089" target="_blank" rel="noopener">HDU-2089-不要62</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>身为杭州人看到这个题意笑出了声.</p><p>求规定区间内数字中满足不含62连号、不含4的数字.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>和windy数差不多的 反正都是一个套路.</p><p>预处理之后再统计即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">14</span>][<span class="number">14</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">14</span>],cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">9</span>) f[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">2</span>,<span class="number">13</span>)</span><br><span class="line">        rep(j,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">4</span>) <span class="keyword">continue</span>;</span><br><span class="line">            rep(k,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((k == <span class="number">2</span> &amp;&amp; j == <span class="number">6</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                f[i][j] += f[i<span class="number">-1</span>][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>; cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;a[++cnt]=x%<span class="number">10</span>;x/=<span class="number">10</span>;&#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,cnt<span class="number">-1</span>) rep(j,<span class="number">1</span>,<span class="number">9</span>) ret += f[i][j];</span><br><span class="line">    rep(j,<span class="number">1</span>,a[cnt]<span class="number">-1</span>) ret += f[cnt][j];</span><br><span class="line">    per(i,cnt<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rep(j,<span class="number">0</span>,a[i]<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">4</span> &amp;&amp; a[i+<span class="number">1</span>] != <span class="number">4</span>)</span><br><span class="line">        ret += f[i][j] * (!(a[i+<span class="number">1</span>] == <span class="number">6</span> &amp;&amp; j == <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> ((a[i+<span class="number">1</span>] == <span class="number">6</span> &amp;&amp; a[i] == <span class="number">2</span>) || a[i+<span class="number">1</span>] == <span class="number">4</span> || a[i] == <span class="number">4</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>) ++ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;a,&amp;b) == <span class="number">2</span> &amp;&amp; (a+b)) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,calc(b)-calc(a<span class="number">-1</span>)+((!a)||(!b)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://vjudge.net/problem/HDU-2089&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU-2089-不要62&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-数位DP" scheme="http://yoursite.com/categories/DP-%E6%95%B0%E4%BD%8DDP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「BZOJ1026/SCOI2009」windy数 数位dp</title>
    <link href="http://yoursite.com/2018/07/10/%E3%80%8CBZOJ1026%E3%80%8Dwindy%E6%95%B0-%E6%95%B0%E4%BD%8Ddp/"/>
    <id>http://yoursite.com/2018/07/10/「BZOJ1026」windy数-数位dp/</id>
    <published>2018-07-10T15:07:35.000Z</published>
    <updated>2018-07-11T11:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1026" target="_blank" rel="noopener">BZOJ1026-windy数</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义不含前导零且相邻两个数字之差至少为2的正整数被称为windy数.给出$A,B$,求在$A,B$之间windy数的个数.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>(别问我为什么这么晚才来补题)</p><p>令$f[i][j]$表示当前数字有$i$位,最高位取到$j$以下的满足条件的windy数.</p><p>很明显有转移$f[i][j] = \sum f[i-1][k] * (|k - j|&gt;=2)$</p><p>预处理出$f[i][j]$后来迭代或者递归计算$x$以内的答案即可 注意细节讨论.</p><p>在计算$calc(x)$的时候,先处理$x$的位数和各数位的值.</p><p>令位数为$cnt$,当$i&lt;=n-1$的时候直接统计.</p><p>$j = 最高位-1$ 独立计算一次 <code>rep(j,1,a[cnt]-1) ret+=f[cnt][j];</code></p><p>对于剩余的位数$ret += f[i][j],cnt-1\geq i \geq 1 ,0 \leq j \leq a[i] - 1$.</p><p>然后要保证$|a[i]-a[i+1] |&gt;= 2$,否则直接退出.</p><p>差不多就这样了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">15</span>],cnt=<span class="number">0</span>,f[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">9</span>) f[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">2</span>,<span class="number">13</span>)</span><br><span class="line">        rep(j,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">            rep(k,<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(k-j)&gt;=<span class="number">2</span>) f[i][j] += f[i<span class="number">-1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;a[++cnt]=x%<span class="number">10</span>;x/=<span class="number">10</span>;&#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,cnt<span class="number">-1</span>)</span><br><span class="line">        rep(j,<span class="number">1</span>,<span class="number">9</span>) ret+=f[i][j];</span><br><span class="line">    rep(j,<span class="number">1</span>,a[cnt]<span class="number">-1</span>) ret+=f[cnt][j];</span><br><span class="line">    per(i,cnt<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">        rep(j,<span class="number">0</span>,a[i]<span class="number">-1</span>) ret+=f[i][j]*(<span class="built_in">abs</span>(a[i+<span class="number">1</span>]-j)&gt;=<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(a[i]-a[i+<span class="number">1</span>])&lt;<span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>) ++ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> a=read(),b=read();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,calc(b)-calc(a<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1026&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1026-windy数&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-数位DP" scheme="http://yoursite.com/categories/DP-%E6%95%B0%E4%BD%8DDP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「ZJOI2007」仓库建设 -斜率优化dp</title>
    <link href="http://yoursite.com/2018/07/10/%E3%80%8CZJOI2007%E3%80%8D%E4%BB%93%E5%BA%93%E5%BB%BA%E8%AE%BE-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp/"/>
    <id>http://yoursite.com/2018/07/10/「ZJOI2007」仓库建设-斜率优化dp/</id>
    <published>2018-07-10T15:06:36.000Z</published>
    <updated>2018-07-11T12:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1096" target="_blank" rel="noopener">ZJOI2007-仓库建设</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><del>凑字数我来copy一波</del><br>$L$公司有$N$个工厂，由高到底分布在一座山上。如图所示，工厂$1$在山顶，工厂$N$在山脚。由于这座山处于高原内陆地区（干燥少雨），$L$公司一般把产品直接堆放在露天，以节省费用。突然有一天，$L$公司的总裁$L$先生接到气象部门的电话，被告知三天之后将有一场暴雨，于是$L$先生决定紧急在某些工厂建立一些仓库以免产品被淋坏。由于地形的不同，在不同工厂建立仓库的费用可能是不同的。第$i$个工厂目前已有成品$P_i$件，在第$i$个工厂位置建立仓库的费用$C_i$。对于没有建立仓库的工厂，其产品应被运往其他的仓库进行储藏，而由于$L$公司产品的对外销售处设置在山脚的工厂$N$，故产品只能往山下运（即只能运往编号更大的工厂的仓库），当然运送产品也是需要费用的，假设一件产品运送$1$个单位距离的费用是$1$。假设建立的仓库容量都都是足够大的，可以容下所有的产品。你将得到以下数据：<br>$1$：工厂$i$距离工厂$1$的距离$Xi$（其中X1=0）;<br>$2$：工厂$i$目前已有成品数量$P_i$;<br>$3$：在工厂$i$建立仓库的费用$C_i$;<br>请你帮助$L$公司寻找一个仓库建设的方案，使得总的费用（建造费用+运输费用）最小。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>斜率题做多了真的就几步推出斜率公式维护凸包就好了 代码还短…</p><p>$O(n^3)$的转移还是非常显然的.展开后通过维护前缀和可以优化成$O(n^2)$</p><script type="math/tex; mode=display">f[i] = max\{(f[j]+x[i]*(sump[i]-sump[j])-(sumpx[i]-sumpx[j]))\} + c[i]</script><p>这是一个十分十分显然的斜率优化的形式.</p><p>老套路</p><p>假设有$x&lt;y$, $x$的转移比$y$更优.</p><p>那么有</p><script type="math/tex; mode=display">\frac{(f[x]+sumpx[x])-(f[y]+sumpx[y])}{(sump[x]-sump[y])} < x[i]</script><p>对这个式子维护一个凸包即可.我代码里还是用double来判断斜率的。</p><p>其实改用分母分子分别相乘判大小的写法更严谨。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n,x[MAXN],c[MAXN],p[MAXN],f[MAXN];</span><br><span class="line"><span class="keyword">int</span> K[MAXN],l,r;</span><br><span class="line"><span class="keyword">int</span> sump[MAXN],sumpx[MAXN];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">1.0</span>*((f[x]+sumpx[x])-(f[y]+sumpx[y]))/(sump[x]-sump[y]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) x[i]=read(),p[i]=read(),c[i]=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) sump[i] = sump[i<span class="number">-1</span>] + p[i];</span><br><span class="line">    rep(i,<span class="number">1</span>,n) sumpx[i] = sumpx[i<span class="number">-1</span>] + x[i]*p[i];</span><br><span class="line">    <span class="comment">// rep(i,1,n) printf("%lld %lld\n",sump[i],sumpx[i]);</span></span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; calc(K[l],K[l+<span class="number">1</span>]) &lt; x[i]) ++l;</span><br><span class="line">        <span class="keyword">int</span> j = K[l];</span><br><span class="line">        f[i] = f[j] + x[i] * (sump[i] - sump[j]) - (sumpx[i] - sumpx[j]) + c[i];</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; calc(K[r<span class="number">-1</span>],K[r]) &gt; calc(K[r],i)) --r; <span class="comment">//维护下凸包..</span></span><br><span class="line">        K[++r] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1096&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZJOI2007-仓库建设&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-斜率优化DP" scheme="http://yoursite.com/categories/DP-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「HDU3507」Print Article 斜率优化dp</title>
    <link href="http://yoursite.com/2018/07/10/%E3%80%8CHDU3507%E3%80%8DPrint-Article-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp/"/>
    <id>http://yoursite.com/2018/07/10/「HDU3507」Print-Article-斜率优化dp/</id>
    <published>2018-07-10T15:05:39.000Z</published>
    <updated>2018-07-11T12:18:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://vjudge.net/problem/HDU-3507" target="_blank" rel="noopener">HDU-3507-PrintArticle</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>将$n$个数分成若干个区间,每个区间的代价为区间和的平方加上一个常数$m$,求最小代价.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考虑斜率优化,假设存在$x&lt;y$, $x$的转移比$y$优.</p><p>则有</p><script type="math/tex; mode=display">\frac{(f[y] - f[x] + (sum[y]*sum[y]) - (sum[x]*sum[x])) }{2*(sum[x]-sum[y])} < sum[i]</script><p>维护一个凸包就完事了.</p><p><del>（完了我更新博客越来越懒了 难道这就是颓废退役的前兆？！）</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sum[MAXN],a[MAXN],M,N;</span><br><span class="line"><span class="keyword">int</span> f[MAXN],q[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">1.0</span> * (f[y] - f[x] + (sum[y]*sum[y]) - (sum[x]*sum[x]))/(<span class="number">2</span>*(sum[x]-sum[y]));&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;N,&amp;M); &#123;</span><br><span class="line">        MM(f,<span class="number">0</span>);MM(q,<span class="number">0</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,N) sum[i] = sum[i<span class="number">-1</span>] + read();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>,r = <span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,N)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; calc(q[l],q[l+<span class="number">1</span>]) &lt; sum[i]) ++l;</span><br><span class="line">            <span class="keyword">int</span> j = q[l];</span><br><span class="line">            f[i] = f[j] + (sum[i] - sum[j]) * (sum[i] - sum[j]) + M;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; calc(q[r<span class="number">-1</span>],q[r]) &gt; calc(q[r],i)) --r;</span><br><span class="line">            q[++r] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[N]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://vjudge.net/problem/HDU-3507&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU-3507-PrintArticle&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-斜率优化DP" scheme="http://yoursite.com/categories/DP-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/"/>
    
    
  </entry>
  
  <entry>
    <title>「APIO2010」特别行动队-斜率优化dp</title>
    <link href="http://yoursite.com/2018/07/10/%E3%80%8CAPIO2010%E3%80%8D%E7%89%B9%E5%88%AB%E8%A1%8C%E5%8A%A8%E9%98%9F-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp/"/>
    <id>http://yoursite.com/2018/07/10/「APIO2010」特别行动队-斜率优化dp/</id>
    <published>2018-07-10T15:04:18.000Z</published>
    <updated>2018-07-11T12:31:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Links there:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1911" target="_blank" rel="noopener">APIO2010-特别行动队</a></p><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>看链接去 懒得搬运</p><p>还是照例先推一个最弱的$O(n^3)$的转移.</p><p>令$f[i]$表示取到前$i$个士兵时的最大战斗力,考虑枚举$[j+1,i]$区间新成一队.</p><script type="math/tex; mode=display">f[i] = max\{f[j],calc(i,j)\},calc(i,j) = a(\sum_{k=j+1}^{i}x_i)^2+b\sum_{k=j+1}^{i}x_i+c)</script><p>这样的转移可以再优化前缀和得到$O(n^2)$的转移.</p><p>考虑斜率优化.</p><p>假设存在$j &gt; k$,$j$的转移比$k$优.（这里的$x[i]$已经是前缀和啦）</p><script type="math/tex; mode=display">f[j]+Ax[j]^{2}-2Ax[i]x[j]-Bx[j] > f[k]+Ax[k]^{2}-2Ax[i]x[k]-Bx[k]</script><p>移项。</p><script type="math/tex; mode=display">2Ax[i](x[j]-x[k]) < (f[j]+Ax[j]^{2}-Bx[j])-(f[k]+Ax[k]^{2}-Bx[k])</script><p>然后就可以斜率优化啦.</p><script type="math/tex; mode=display">x[i] < \frac{(f[j]+Ax[j]^{2}-Bx[j])-(f[k]+Ax[k]^{2}-Bx[k])}{2A(x[j]-x[k])}</script><p>然后维护一个下凸包就可以啦.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,b,a) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sum[MAXN],a,b,c,x[MAXN],n;</span><br><span class="line"><span class="keyword">int</span> f[MAXN],q[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x*x*a+b*x+c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">UP</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> ((f[x]+a*sum[x]*sum[x]-b*sum[x])-(f[y]+a*sum[y]*sum[y]-b*sum[y]));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">DOWN</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">2L</span>L*a*(sum[x]-sum[y]);&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    a=read(),b=read(),c=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) sum[i] = sum[i<span class="number">-1</span>] + read();</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>,r = <span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; UP(q[l],q[l+<span class="number">1</span>]) &lt;= sum[i] * DOWN(q[l],q[l+<span class="number">1</span>])) ++l;</span><br><span class="line">        <span class="keyword">int</span> j = q[l];</span><br><span class="line">        f[i] = f[j] + calc(sum[i]-sum[j]);</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; UP(q[r<span class="number">-1</span>],q[r]) * DOWN(q[r],i) &gt;= UP(q[r],i) * DOWN(q[r<span class="number">-1</span>],q[r])) --r;</span><br><span class="line">        q[++r] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//rep(i,1,n) printf("%lld ",f[i]);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Links there:&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1911&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;APIO2010-特别行动队&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DP-斜率优化DP" scheme="http://yoursite.com/categories/DP-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「Atcoder」ARC075 E - Meaningful Mean</title>
    <link href="http://yoursite.com/2018/06/30/%E3%80%8CAtcoder%E3%80%8DARC075-E-Meaningful-Mean/"/>
    <id>http://yoursite.com/2018/06/30/「Atcoder」ARC075-E-Meaningful-Mean/</id>
    <published>2018-06-30T03:57:54.000Z</published>
    <updated>2018-06-30T04:20:07.588Z</updated>
    
    <content type="html"><![CDATA[<p>h fake q安利的题.</p><p>Links there:<a href="https://arc075.contest.atcoder.jp/tasks/arc075_c" target="_blank" rel="noopener">ARC075E</a></p><a id="more"></a><p>题意:给出一个长为$N$的序列 ,求出所有的连续序列,满足他们的算术平均数小于等于$K$.</p><p>范围:$N\leq 200000,1 \leq A_i \leq 10^9,1 \leq K \leq 10^9$</p><p>分析:首先可以考虑简化问题,将每一个数先减去$K$,再维护一个前缀和$sum$,那么问题简化成求出所有对$(l,r)$使得$sum(r)-sum(l-1) \geq 0$.那么我们求出所有$sum$中的顺序对,也就是满足$i&lt;j,sum[i]&lt;sum[j]$的个数就行了,我们可以用树状数组来维护这个东西.注意离散化.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,a[MAXN],s[MAXN],ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> C[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;MAXN;i+=lowbit(i)) C[i]+=d;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gsum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">int</span> ret = <span class="number">0</span>;<span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&gt;=<span class="number">1</span>;i-=lowbit(i)) ret += C[i]; <span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(); k=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read()-k,s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    rep(i,<span class="number">0</span>,n) v.pb(s[i]);</span><br><span class="line">    sort(v.begin(),v.end());</span><br><span class="line">    v.resize(unique(v.begin(),v.end())-v.begin());</span><br><span class="line">    rep(i,<span class="number">0</span>,n) s[i]=lower_bound(v.begin(),v.end(),s[i])-v.begin()+<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">        ans += Gsum(s[i]);</span><br><span class="line">        add(s[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 26</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;h fake q安利的题.&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;https://arc075.contest.atcoder.jp/tasks/arc075_c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ARC075E&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Atcoder" scheme="http://yoursite.com/categories/Atcoder/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「LOJ6277-6285」数列分块入门傻逼题</title>
    <link href="http://yoursite.com/2018/06/28/%E3%80%8CLOJ6277-6285%E3%80%8D%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%E5%82%BB%E9%80%BC%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/28/「LOJ6277-6285」数列分块入门傻逼题/</id>
    <published>2018-06-28T07:16:51.000Z</published>
    <updated>2018-06-28T07:36:53.723Z</updated>
    
    <content type="html"><![CDATA[<p>突然想起之前就想做的分块练习.</p><p>现在做起来真的感觉好傻逼啊.</p><a id="more"></a><p>分块暴力美学 有时候花里胡哨的数据结构出锅的时候也算是 一种补救方法吧.</p><p>分块代码不长也比较好写,根据hzwer的blog,分块时一定要想想这几个问题:</p><p>对于每次区间操作：</p><p>1.<strong>不完整的块</strong> 的$O(\sqrt{n})$个元素怎么处理?</p><p>2.$O(\sqrt{n})$个 <strong>整块</strong> 怎么处理?</p><p>3.要预处理什么信息（复杂度不能超过后面的操作）?</p><p>分块在大数据下很容易找出锅.</p><p>一般查错就分不同大小的块就好啦.</p><p>我贴完代码就跑!</p><h3 id="分块入门1-区间加法-单点查值"><a href="#分块入门1-区间加法-单点查值" class="headerlink" title="分块入门1 区间加法 单点查值"></a>分块入门1 区间加法 单点查值</h3><p>没错 树状数组同学今天请你坐下！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> sum_B[<span class="number">251</span>],ref[MAXN],a[MAXN],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/m+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read();MM(sum_B,<span class="number">0</span>);</span><br><span class="line">    m=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt=read(),l=read(),r=read(),c=read();</span><br><span class="line">        <span class="keyword">if</span> (opt) &#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[r]+sum_B[refer_blk(r)]);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> L = refer_blk(l),R = refer_blk(r);</span><br><span class="line">        <span class="keyword">if</span> (L == R) &#123;rep(j,l,r) a[j] += c; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        rep(j,L+<span class="number">1</span>,R<span class="number">-1</span>) sum_B[j] += c;</span><br><span class="line">        rep(j,l,refer_blk(l)*m) a[j] += c;</span><br><span class="line">        rep(j,(refer_blk(r)<span class="number">-1</span>)*m+<span class="number">1</span>,r) a[j] += c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门2-区间加法-求区间小于c的元素个数"><a href="#分块入门2-区间加法-求区间小于c的元素个数" class="headerlink" title="分块入门2 区间加法 求区间小于c的元素个数"></a>分块入门2 区间加法 求区间小于c的元素个数</h3><p>没错 树状数组同学您还是坐下吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">8e4</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">500</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Blks</span>&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">int</span> add;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">int</span> q = lower_bound(v.begin(),v.end(),x-add)-v.begin();<span class="keyword">return</span> q;&#125;</span><br><span class="line">&#125;Blk[MAXM];</span><br><span class="line"><span class="keyword">int</span> n,a[MAXN],m,cnt=<span class="number">0</span>,p=<span class="number">1</span>,D;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/m+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Blk[x].v.clear();</span><br><span class="line">    rep(i,(x<span class="number">-1</span>)*m+<span class="number">1</span>,x*m) Blk[x].v.pb(a[i]);</span><br><span class="line">    sort(Blk[x].v.begin(),Blk[x].v.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read();D=n;</span><br><span class="line">    m=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) &#123;a[i]=read();Blk[refer_blk(i)].v.push_back(a[i]);&#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m) sort(Blk[i].v.begin(),Blk[i].v.end());</span><br><span class="line">    <span class="comment">//rep(k,1,n) &#123;for (auto it : Blk[k].v) printf("%lld ",it); puts("");&#125;</span></span><br><span class="line">    rep(ss,<span class="number">1</span>,D)&#123;</span><br><span class="line">        <span class="comment">//printf("%lld\n",o);</span></span><br><span class="line">        <span class="comment">//rep(k,1,n) &#123;for (auto it : Blk[k].v) printf("%lld ",it); puts("");&#125;</span></span><br><span class="line">        <span class="keyword">int</span> opt,l,r,c;</span><br><span class="line">        opt=read(),l=read(),r=read(),c=read();</span><br><span class="line">        <span class="keyword">int</span> L = refer_blk(l),R = refer_blk(r);</span><br><span class="line">        <span class="keyword">if</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">            rep(i,l,min(m*L,r)) ret += (Blk[L].add + a[i] &lt; c * c);</span><br><span class="line">            <span class="keyword">if</span> (L != R) rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) ret += (Blk[R].add + a[i] &lt; c * c);</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) ret += Blk[i].query(c*c);</span><br><span class="line">        <span class="comment">//    cerr &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            rep(i,l,min(m*L,r)) a[i] += c;</span><br><span class="line">            Reset(L);</span><br><span class="line">            <span class="keyword">if</span> (L != R) &#123;rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) a[i] += c;Reset(R);&#125;</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) Blk[i].add += c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门3-区间加法-查找前驱"><a href="#分块入门3-区间加法-查找前驱" class="headerlink" title="分块入门3 区间加法 查找前驱"></a>分块入门3 区间加法 查找前驱</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">500</span>+<span class="number">50</span>;</span><br><span class="line"><span class="comment">//----------head----------</span></span><br><span class="line"><span class="keyword">int</span> n,M;</span><br><span class="line"><span class="keyword">int</span> v[MAXN],BL[MAXN],atag[MAXN];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;Sets[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=min(BL[a]*M,b);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Sets[BL[a]].erase(v[i]);</span><br><span class="line">        v[i]+=c;</span><br><span class="line">        Sets[BL[a]].insert(v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(BL[a]!=BL[b])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(BL[b]<span class="number">-1</span>)*M+<span class="number">1</span>;i&lt;=b;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Sets[BL[b]].erase(v[i]);</span><br><span class="line">            v[i]+=c;</span><br><span class="line">            Sets[BL[b]].insert(v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=BL[a]+<span class="number">1</span>;i&lt;=BL[b]<span class="number">-1</span>;i++)</span><br><span class="line">        atag[i]+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Ret=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=min(BL[a]*M,b);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val=v[i]+atag[BL[a]];</span><br><span class="line">        <span class="keyword">if</span>(val&lt;c)Ret=max(val,Ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(BL[a]!=BL[b])<span class="keyword">for</span>(<span class="keyword">int</span> i=(BL[b]<span class="number">-1</span>)*M+<span class="number">1</span>;i&lt;=b;i++)&#123;<span class="keyword">int</span> val=v[i]+atag[BL[b]];<span class="keyword">if</span>(val&lt;c)Ret=max(val,Ret);&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=BL[a]+<span class="number">1</span>;i&lt;=BL[b]<span class="number">-1</span>;i++)&#123;<span class="keyword">int</span> x=c-atag[i];<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=Sets[i].lower_bound(x);<span class="keyword">if</span>(it==Sets[i].begin())<span class="keyword">continue</span>;--it;Ret=max(Ret,*it+atag[i]);&#125;</span><br><span class="line">    <span class="keyword">return</span> Ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();M=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)v[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BL[i]=(i<span class="number">-1</span>)/M+<span class="number">1</span>;</span><br><span class="line">        Sets[BL[i]].insert(v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f=read(),a=read(),b=read(),c=read();</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">0</span>)add(a,b,c);</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(a,b,c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门4-区间加法-区间求和"><a href="#分块入门4-区间加法-区间求和" class="headerlink" title="分块入门4 区间加法 区间求和"></a>分块入门4 区间加法 区间求和</h3><p>其实多统计个sum信息就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RG register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(RG int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(RG int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> now[<span class="number">1</span>&lt;&lt;<span class="number">16</span>],*S,*T;</span><br><span class="line">    <span class="keyword">if</span>(S==T) &#123;T=(S=now)+fread(now,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">16</span>,<span class="built_in">stdin</span>); <span class="keyword">if</span>(S==T) <span class="keyword">return</span> EOF;&#125;</span><br><span class="line">    <span class="keyword">return</span> *S++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=gc();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=gc();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=gc();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">8e4</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">300</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN],add[MAXM],sum[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/m+<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),m=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read(),sum[refer_blk(i)] += a[i];</span><br><span class="line">    rep(op,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt=read(),l=read(),r=read(),c=read();</span><br><span class="line">        <span class="keyword">int</span> L = refer_blk(l),R = refer_blk(r);</span><br><span class="line">        <span class="keyword">if</span>(!opt)&#123;</span><br><span class="line">            rep(i,l,min(r,L*m)) a[i] += c,sum[L] += c;</span><br><span class="line">            <span class="keyword">if</span> (L != R) rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) a[i] += c,sum[R] += c;</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) add[i] += c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">            rep(i,l,min(r,L*m)) ret += a[i] + add[L];</span><br><span class="line">            <span class="keyword">if</span> (L != R) rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) ret += a[i] + add[R];</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) ret += sum[i] + m * add[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ret % (c+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门5-区间开方-区间求和"><a href="#分块入门5-区间开方-区间求和" class="headerlink" title="分块入门5 区间开方 区间求和"></a>分块入门5 区间开方 区间求和</h3><p>就是利用一个数在有限次内(根据范围最多5~6次)一定可以被开方成1给整个块打标记</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">8e4</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">4e2</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,sum[MAXM],f[MAXM],a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/m+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Upd_in_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x]) <span class="keyword">return</span> ;</span><br><span class="line">    f[x] = <span class="number">1</span>;</span><br><span class="line">    sum[x] = <span class="number">0</span>;</span><br><span class="line">    rep(i,(x<span class="number">-1</span>)*m+<span class="number">1</span>,x*m) &#123;</span><br><span class="line">        a[i] = <span class="built_in">sqrt</span>(a[i] + <span class="number">0.5</span>);</span><br><span class="line">        sum[x] += a[i];</span><br><span class="line">        f[x] = a[i] &gt; <span class="number">1</span> ? <span class="number">0</span> : f[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),m=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read(),sum[refer_blk(i)] += a[i];</span><br><span class="line">    rep(op,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt=read(),l=read(),r=read(),c=read();</span><br><span class="line">        <span class="keyword">int</span> L=refer_blk(l),R=refer_blk(r);</span><br><span class="line">        <span class="keyword">if</span>(!opt)&#123;</span><br><span class="line">            rep(i,l,min(r,L*m)) sum[L] -= a[i],a[i] = <span class="built_in">sqrt</span>(a[i] + <span class="number">0.5</span>),sum[L] += a[i];</span><br><span class="line">            <span class="keyword">if</span> (L != R) rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) sum[R] -= a[i],a[i] = <span class="built_in">sqrt</span>(a[i] + <span class="number">0.5</span>),sum[R] += a[i];</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) Upd_in_blk(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            rep(i,l,min(r,L*m)) ans += a[i];</span><br><span class="line">            <span class="keyword">if</span>(L != R) rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) ans += a[i];</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) ans += sum[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门6-单点插入-单点求值"><a href="#分块入门6-单点插入-单点求值" class="headerlink" title="分块入门6 单点插入 单点求值"></a>分块入门6 单点插入 单点求值</h3><p>可以扔链表 但是分块我们可以资瓷更多的区间操作</p><p>本来的做法是找到新元素所在的块然后暴力向右移动</p><p>但是玩意所有操作都放在同一个块怎么办？</p><p>不难发现每次重构块是$O(n)$的</p><p>那么我们增加$\sqrt{n}$个元素就重构一次块 使得所有的块大小均衡</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">400</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN],M;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/M+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[MAXM];</span><br><span class="line"><span class="keyword">int</span> buc[MAXN&lt;&lt;<span class="number">1</span>],head = <span class="number">0</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; query(<span class="keyword">int</span> x)&#123;</span><br><span class="line">    <span class="keyword">int</span> xx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; v[xx].size()) x -= v[xx].size(),++xx;</span><br><span class="line">    <span class="keyword">return</span> make_pair(xx,x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reset</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    head = <span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j = v[i].begin(); j != v[i].end(); j++) buc[++head] = *j;</span><br><span class="line">        v[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mm = <span class="built_in">sqrt</span>(head);</span><br><span class="line">    rep(i,<span class="number">1</span>,head)</span><br><span class="line">        v[(i<span class="number">-1</span>)/mm+<span class="number">1</span>].push_back(buc[i]);</span><br><span class="line">    m=(head<span class="number">-1</span>)/mm+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; t = query(x);</span><br><span class="line">    <span class="keyword">int</span> f1 = t.fi,f2 = t.se;</span><br><span class="line">    v[f1].insert(v[f1].begin()+f2,d);</span><br><span class="line">    <span class="keyword">if</span>(v[f1].size() &gt; <span class="number">20</span> * M) Reset();</span><br><span class="line">&#125;<span class="comment">//insert x to pos d</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("a1.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("my.out","w",stdout);</span></span><br><span class="line">    n=read(),M=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) v[refer_blk(i)].pb(a[i]);</span><br><span class="line">    m = (n - <span class="number">1</span>) / M + <span class="number">1</span>;</span><br><span class="line">    rep(op,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt = read(),l = read(),r = read(),c = read();</span><br><span class="line">        <span class="keyword">if</span> (!opt) &#123;ins(l,r);&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;t = query(r);<span class="keyword">int</span> f1 = t.fi,f2 = t.se;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,v[f1][f2]);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门7-区间加法-区间乘法-单点询问"><a href="#分块入门7-区间加法-区间乘法-单点询问" class="headerlink" title="分块入门7 区间加法 区间乘法 单点询问"></a>分块入门7 区间加法 区间乘法 单点询问</h3><p>注意优先度就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">400</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN],mul[MAXM],add[MAXM];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/m+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reset</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    rep(i,(x<span class="number">-1</span>)*m+<span class="number">1</span>,min(x*m,n)) a[i]=(a[i]*mul[x]+add[x])%Mod;</span><br><span class="line">    add[x] = <span class="number">0</span>; mul[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),m=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,refer_blk(n)) mul[i] = <span class="number">1</span>;</span><br><span class="line">    rep(op,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt=read(),l=read(),r=read(),c=read();</span><br><span class="line">        <span class="keyword">int</span> L = refer_blk(l),R = refer_blk(r);</span><br><span class="line">        <span class="keyword">if</span> (!opt) &#123;</span><br><span class="line">            Reset(L);</span><br><span class="line">            rep(i,l,min(r,m*L)) a[i] += c,a[i] %= Mod;</span><br><span class="line">            <span class="keyword">if</span> (L != R) &#123;Reset(R); rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) a[i] += c,a[i] %= Mod;&#125;</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) &#123;add[i] += c; add[i] %= Mod;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">1</span>)&#123;</span><br><span class="line">            Reset(L);</span><br><span class="line">            rep(i,l,min(r,m*L)) a[i] *= c,a[i] %= Mod;</span><br><span class="line">            <span class="keyword">if</span> (L != R) &#123;Reset(R); rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) a[i] *= c,a[i] %= Mod;&#125;</span><br><span class="line">            rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>) &#123;add[i] *= c; add[i] %= Mod;mul[i] *= c;mul[i] %= Mod;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(a[r]*mul[R]+add[R])%Mod);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门8-区间修改-区间询问"><a href="#分块入门8-区间修改-区间询问" class="headerlink" title="分块入门8 区间修改 区间询问"></a>分块入门8 区间修改 区间询问</h3><p>挺傻逼的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">400</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN],f[MAXM];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/m+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reset</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x]==<span class="number">-1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    rep(i,(x<span class="number">-1</span>)*m+<span class="number">1</span>,min(x*m,n)) a[i]=f[x];</span><br><span class="line">    f[x]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    MM(f,<span class="number">-1</span>);</span><br><span class="line">    n=read(),m=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read();</span><br><span class="line">    rep(op,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=read(),r=read(),c=read();</span><br><span class="line">        <span class="keyword">int</span> L = refer_blk(l),R = refer_blk(r),ans = <span class="number">0</span>;</span><br><span class="line">        Reset(L);</span><br><span class="line">        rep(i,l,min(L*m,r)) &#123;ans += a[i] == c; <span class="keyword">if</span> (a[i] != c) a[i] = c;&#125;</span><br><span class="line">        <span class="keyword">if</span> (L != R) &#123;</span><br><span class="line">            Reset(R);</span><br><span class="line">            rep(i,(R<span class="number">-1</span>)*m+<span class="number">1</span>,r) &#123;ans += a[i] == c; <span class="keyword">if</span> (a[i] != c) a[i] = c;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,L+<span class="number">1</span>,R<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (f[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i] == c) ans += m;</span><br><span class="line">                <span class="keyword">else</span> f[i] = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                rep(j,(i<span class="number">-1</span>)*m+<span class="number">1</span>,i*m)&#123;ans += a[j] == c; <span class="keyword">if</span>(a[j] != c) a[j] = c;&#125;</span><br><span class="line">                f[i] = c;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块入门9-区间众数查询"><a href="#分块入门9-区间众数查询" class="headerlink" title="分块入门9 区间众数查询"></a>分块入门9 区间众数查询</h3><p>离线版本不难想到</p><p>但似乎可以在线资瓷带修操作？</p><p>bzoj2724了解一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">500</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,id,v[MAXN],f[MAXM][MAXM];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">int</span> val[MAXM],cnt[MAXM];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ve[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">refer_blk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)/m+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(x<span class="number">-1</span>)*m+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[v[i]]++;</span><br><span class="line">        <span class="keyword">int</span> t=refer_blk(i);</span><br><span class="line">        <span class="keyword">if</span>(cnt[v[i]]&gt;mx||(cnt[v[i]]==mx&amp;&amp;val[v[i]]&lt;val[ans]))</span><br><span class="line">            ans=v[i],mx=cnt[v[i]];</span><br><span class="line">        f[x][t]=ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=upper_bound(ve[x].begin(),ve[x].end(),r)-lower_bound(ve[x].begin(),ve[x].end(),l);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans,mx;</span><br><span class="line">    ans=f[refer_blk(a)+<span class="number">1</span>][refer_blk(b)<span class="number">-1</span>];</span><br><span class="line">    mx=query(a,b,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=min(refer_blk(a)*m,b);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=query(a,b,v[i]);</span><br><span class="line">        <span class="keyword">if</span>(t&gt;mx||(t==mx&amp;&amp;val[v[i]]&lt;val[ans]))ans=v[i],mx=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(refer_blk(a)!=refer_blk(b))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(refer_blk(b)<span class="number">-1</span>)*m+<span class="number">1</span>;i&lt;=b;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=query(a,b,v[i]);</span><br><span class="line">            <span class="keyword">if</span>(t&gt;mx||(t==mx&amp;&amp;val[v[i]]&lt;val[ans]))ans=v[i],mx=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();m=<span class="built_in">sqrt</span>(n+<span class="number">0.5</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;v[i]=read();<span class="keyword">if</span>(!mp[v[i]])&#123;mp[v[i]]=++id;val[id]=v[i];&#125;</span><br><span class="line">        v[i]=mp[v[i]];ve[v[i]].push_back(i);</span><br><span class="line">    &#125;;</span><br><span class="line">    rep(i,<span class="number">1</span>,refer_blk(n)) pre(i);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;<span class="keyword">int</span> a=read(),b=read();<span class="keyword">if</span>(a&gt;b)swap(a,b);<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,val[query(a,b)]);&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然想起之前就想做的分块练习.&lt;/p&gt;
&lt;p&gt;现在做起来真的感觉好傻逼啊.&lt;/p&gt;
    
    </summary>
    
      <category term="分块" scheme="http://yoursite.com/categories/%E5%88%86%E5%9D%97/"/>
    
    
      <category term="分块" scheme="http://yoursite.com/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>「NOI2014」魔法森林</title>
    <link href="http://yoursite.com/2018/06/26/%E3%80%8CNOI2014%E3%80%8D%E9%AD%94%E6%B3%95%E6%A3%AE%E6%9E%97/"/>
    <id>http://yoursite.com/2018/06/26/「NOI2014」魔法森林/</id>
    <published>2018-06-26T05:43:52.000Z</published>
    <updated>2018-06-26T06:17:11.647Z</updated>
    
    <content type="html"><![CDATA[<p><strong>NOI2014-魔法森林</strong></p><p>Links there:<a href="http://uoj.ac/problem/3" target="_blank" rel="noopener">NOI2014MogicForest</a></p><a id="more"></a><p>题意:给出一个无向图,每一条边有两个权值$A_i,B_i$</p><p>要求从$1$节点跑到$n$节点的可能路径上,求出最小的$A_i+B_i$</p><p>思路:</p><p>首先对边进行排序,很显然的针对某个变量($A$或者$B$)关键字排序.</p><p>然后用$LCT$动态维护一个MST.每次找边的时候,如果两个点已经连结,那么在该换上找到最大值并换成次大值,特别的,如果1,n联通,则说明有路径存在,我们更新答案.这样就做到了动态维护.</p><p>上述为正常$LCT$做法.</p><p>但是听大爷们讲这题可以用$SPFA$的$O(玄学)$复杂度水掉.</p><p>个人感觉其实如果数据出的比较强的话可以卡掉$SPFA$的,但是估计出题人也没想到那么多吧…</p><p>（md调了半天一个pushup写错了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ch[u][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ch[u][1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(  <span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,F[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==F[x]?x:F[x]=getf(F[x]);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,A,B;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edges &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (A==b.A)?(B&lt;b.B):A&lt;b.A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;u=read(),v=read(),A=read(),B=read();&#125;</span><br><span class="line">&#125;E[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[MAXN&lt;&lt;<span class="number">2</span>][<span class="number">2</span>],fa[MAXN&lt;&lt;<span class="number">2</span>],rev[MAXN&lt;&lt;<span class="number">2</span>],sum[MAXN&lt;&lt;<span class="number">2</span>],mx[MAXN&lt;&lt;<span class="number">2</span>],w[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRson</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> ch[fa[u]][<span class="number">1</span>] == u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRoot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> (ch[fa[u]][<span class="number">0</span>] != u &amp;&amp; ch[fa[u]][<span class="number">1</span>] != u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;rev[u] ^= <span class="number">1</span>;swap(lc,rc);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span>(rev[u])&#123;<span class="keyword">if</span> (lc) Reverse(lc); <span class="keyword">if</span>(rc)Reverse(rc); rev[u]=<span class="number">0</span>;&#125;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        mx[u]=u;</span><br><span class="line">        mx[u]=w[mx[u]]&lt;w[mx[lc]]?mx[lc]:mx[u];</span><br><span class="line">        mx[u]=w[mx[u]]&lt;w[mx[rc]]?mx[rc]:mx[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span> (!isRoot(u)) Update(fa[u]); pushdown(u);&#125;</span><br><span class="line"><span class="comment">/* ----------- Splay part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fau = fa[u],ffau = fa[fau],d = isRson(u);</span><br><span class="line">        fa[u]=ffau; <span class="keyword">if</span> (!isRoot(fau)) ch[ffau][isRson(fau)] = u;</span><br><span class="line">        fa[ch[fau][d] = ch[u][d^<span class="number">1</span>]] = fau;</span><br><span class="line">        fa[ch[u][d^<span class="number">1</span>] = fau] = u;</span><br><span class="line">        pushup(fau); pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123; <span class="comment">//边Splay边向根传递信息</span></span><br><span class="line">        Update(u);</span><br><span class="line">        <span class="keyword">for</span> (;(!isRoot(u));rotate(u))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isRoot(fa[u]))</span><br><span class="line">            rotate(isRson(fa[u])==isRson(u)?fa[u]:u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* ----------- LCT part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> f = <span class="number">0</span>; u; f = u,u = fa[u])&#123;</span><br><span class="line">            Splay(u);</span><br><span class="line">            rc = f;</span><br><span class="line">            pushup(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);Reverse(u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);<span class="keyword">while</span>(lc)pushdown(u),u=lc;<span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);access(y);Splay(y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);fa[x]=y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;split(u,v);<span class="keyword">if</span>(fa[u]==v&amp;&amp;(!rc))fa[u]=ch[v][<span class="number">0</span>]=<span class="number">0</span>;pushup(v);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;makeroot(u);access(v);Splay(v);<span class="keyword">return</span> mx[ch[v][<span class="number">0</span>]];&#125;</span><br><span class="line">&#125;LCT;</span><br><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) E[i].Rd();</span><br><span class="line">    sort(E+<span class="number">1</span>,E+m+<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=E[i].u,v=E[i].v,A=E[i].A,B=E[i].B;</span><br><span class="line">        LCT.w[n+i]=B; LCT.mx[n+i] = n+i;</span><br><span class="line">        <span class="keyword">if</span>(LCT.find(u)==LCT.find(v))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ret = LCT.query(u,v);</span><br><span class="line">            <span class="keyword">if</span> (LCT.w[ret] &gt; B)&#123;</span><br><span class="line">                LCT.cut(ret,E[ret-n].u);</span><br><span class="line">                LCT.cut(ret,E[ret-n].v);</span><br><span class="line">                LCT.link(u,n+i);</span><br><span class="line">                LCT.link(v,n+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;LCT.link(u,n+i); LCT.link(v,n+i);&#125;</span><br><span class="line">        <span class="keyword">if</span> (LCT.find(<span class="number">1</span>)==LCT.find(n))</span><br><span class="line">            ans = min(ans,A+LCT.w[LCT.query(<span class="number">1</span>,n)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans==INF?<span class="number">-1</span>:ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;NOI2014-魔法森林&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;http://uoj.ac/problem/3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NOI2014MogicForest&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动态树" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「ZJOI2008」树的统计</title>
    <link href="http://yoursite.com/2018/06/26/%E3%80%8CZJOI2008%E3%80%8D%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/06/26/「ZJOI2008」树的统计/</id>
    <published>2018-06-26T05:43:36.000Z</published>
    <updated>2018-06-26T08:13:08.703Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ZJOI-2008树的统计</strong></p><p>Links there:<a href="https://www.luogu.org/problemnew/show/P2590" target="_blank" rel="noopener">ZJOI-2008树的统计</a></p><a id="more"></a><p>题意:要求实现这些操作</p><p>I. CHANGE u t : 把结点u的权值改为t</p><p>II. QMAX u v: 询问从点u到点v的路径上的节点的最大权值</p><p>III. QSUM u v: 询问从点u到点v的路径上的节点的权值和</p><p>注意：从点u到点v的路径上的节点包括u和v本身</p><p>其实是个树剖裸题啊.但是学了$LCT$这种更强大的东西么写起来岂不是更舒服.</p><p>其实和模板题差不多,注意pushup更新的时候维护信息时,每个节点的Mx和Sum先赋值为自己然后建立虚拟点Mx[0]=-INF.</p><p>傻逼的我还是调了好久才对,发现自己调$LCT$的题真心不熟.</p><p>P.S. LCT写起来比树剖优美多了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ch[u][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ch[u][1]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,u[MAXN],v[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">NextChar</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(c)) c=getchar();</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[MAXN][<span class="number">2</span>],sum[MAXN],rev[MAXN],w[MAXN],fa[MAXN],Mx[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRson</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> ch[fa[u]][<span class="number">1</span>] == u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRoot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> (ch[fa[u]][<span class="number">0</span>] != u &amp;&amp; ch[fa[u]][<span class="number">1</span>] != u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;rev[u] ^= <span class="number">1</span>;swap(lc,rc);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span>(rev[u])&#123;<span class="keyword">if</span> (lc) Reverse(lc); <span class="keyword">if</span>(rc)Reverse(rc); rev[u]=<span class="number">0</span>;&#125;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;sum[u]=sum[lc]+sum[rc]+w[u];Mx[u]=max(w[u],max(Mx[lc],Mx[rc]));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span> (!isRoot(u)) Update(fa[u]); pushdown(u);&#125;</span><br><span class="line"><span class="comment">/* ----------- Splay part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fau = fa[u],ffau = fa[fau],d = isRson(u);</span><br><span class="line">        fa[u]=ffau; <span class="keyword">if</span> (!isRoot(fau)) ch[ffau][isRson(fau)] = u;</span><br><span class="line">        fa[ch[fau][d] = ch[u][d^<span class="number">1</span>]] = fau;</span><br><span class="line">        fa[ch[u][d^<span class="number">1</span>] = fau] = u;</span><br><span class="line">        pushup(fau); pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        Update(u);</span><br><span class="line">        <span class="keyword">for</span> (;(!isRoot(u));rotate(u))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isRoot(fa[u]))</span><br><span class="line">            rotate(isRson(fa[u])==isRson(u)?fa[u]:u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* ----------- LCT part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> f = <span class="number">0</span>; u; f = u,u = fa[u])&#123;</span><br><span class="line">            Splay(u);</span><br><span class="line">            rc = f;</span><br><span class="line">            pushup(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);Reverse(u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);<span class="keyword">while</span>(lc)pushdown(u),u=lc;<span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);access(y);Splay(y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);fa[x]=y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;split(u,v);<span class="keyword">if</span>(fa[u]==v&amp;&amp;(!rc))fa[u]=ch[v][<span class="number">0</span>]=<span class="number">0</span>;pushup(v);&#125;</span><br><span class="line">&#125;LCT;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("my.out","w",stdout);</span></span><br><span class="line">    n=read();rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;u[i]=read(),v[i]=read();&#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) LCT.w[i]=read(),LCT.sum[i]=LCT.Mx[i]=LCT.w[i];</span><br><span class="line">    LCT.Mx[<span class="number">0</span>]=-INT_MAX;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) LCT.link(u[i],v[i]);</span><br><span class="line">    m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> xx=NextChar();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isalpha</span>(xx)) &#123;<span class="keyword">char</span> t=xx;xx=getchar();<span class="keyword">if</span>(!<span class="built_in">isalpha</span>(xx))&#123;xx=t;<span class="keyword">break</span>;&#125;&#125;</span><br><span class="line">        <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">        <span class="keyword">switch</span>(xx)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'X'</span>:&#123;LCT.split(x,y);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,LCT.Mx[y]);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:&#123;LCT.split(x,y);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,LCT.sum[y]);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'E'</span>:&#123;LCT.Splay(x);LCT.w[x]=y;LCT.pushup(x);<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ZJOI-2008树的统计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2590&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZJOI-2008树的统计&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动态树" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「SDOI2008」Cave 洞穴勘测</title>
    <link href="http://yoursite.com/2018/06/26/%E3%80%8CSDOI2008%E3%80%8DCave-%E6%B4%9E%E7%A9%B4%E5%8B%98%E6%B5%8B/"/>
    <id>http://yoursite.com/2018/06/26/「SDOI2008」Cave-洞穴勘测/</id>
    <published>2018-06-26T05:42:06.000Z</published>
    <updated>2018-06-26T06:58:23.287Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SDOI2008-洞穴勘测</strong></p><p>Links there:<a href="https://www.luogu.org/problemnew/show/P2147" target="_blank" rel="noopener">SDOI2008 Cave</a></p><a id="more"></a><p>题意:要求你实现只有Link与Cut操作的,真正意义上的,$LCT$!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ch[u][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ch[u][1]</span></span><br><span class="line"><span class="comment">//#define local</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">NextChar</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isalpha</span>(c)) c=getchar();</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,op;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[MAXN][<span class="number">2</span>],sum[MAXN],rev[MAXN],w[MAXN],fa[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRson</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> ch[fa[u]][<span class="number">1</span>] == u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRoot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> (ch[fa[u]][<span class="number">0</span>] != u &amp;&amp; ch[fa[u]][<span class="number">1</span>] != u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;rev[u] ^= <span class="number">1</span>;swap(lc,rc);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span>(rev[u])&#123;<span class="keyword">if</span> (lc) Reverse(lc); <span class="keyword">if</span>(rc)Reverse(rc); rev[u]=<span class="number">0</span>;&#125;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;sum[u]=sum[lc]^sum[rc]^w[u];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span> (!isRoot(u)) Update(fa[u]); pushdown(u);&#125;</span><br><span class="line"><span class="comment">/* ----------- Splay part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fau = fa[u],ffau = fa[fau],d = isRson(u);</span><br><span class="line">        fa[u]=ffau; <span class="keyword">if</span> (!isRoot(fau)) ch[ffau][isRson(fau)] = u;</span><br><span class="line">        fa[ch[fau][d] = ch[u][d^<span class="number">1</span>]] = fau;</span><br><span class="line">        fa[ch[u][d^<span class="number">1</span>] = fau] = u;</span><br><span class="line">        pushup(fau); pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123; <span class="comment">//边Splay边向根传递信息</span></span><br><span class="line">        Update(u);</span><br><span class="line">        <span class="keyword">for</span> (;(!isRoot(u));rotate(u))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isRoot(fa[u]))</span><br><span class="line">            rotate(isRson(fa[u])==isRson(u)?fa[u]:u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* ----------- LCT part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> f = <span class="number">0</span>; u; f = u,u = fa[u])&#123;</span><br><span class="line">            Splay(u);</span><br><span class="line">            rc = f;</span><br><span class="line">            pushup(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);Reverse(u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);<span class="keyword">while</span>(lc)pushdown(u),u=lc;<span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);access(y);Splay(y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);fa[x]=y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;split(u,v);<span class="keyword">if</span>(fa[u]==v&amp;&amp;(!rc))fa[u]=ch[v][<span class="number">0</span>]=<span class="number">0</span>;pushup(v);&#125;</span><br><span class="line">&#125;LCT;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line">    freopen(<span class="string">"1.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"1.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">    <span class="keyword">char</span> x = NextChar();</span><br><span class="line"><span class="comment">//    putchar(x);puts("");</span></span><br><span class="line">    <span class="keyword">switch</span>(x)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'C'</span>:&#123;</span><br><span class="line">    <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">    <span class="keyword">if</span> (LCT.find(x) != LCT.find(y)) LCT.link(x,y);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>:&#123;</span><br><span class="line">                <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,LCT.find(x)==LCT.find(y)?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> :&#123;</span><br><span class="line">                <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">                <span class="keyword">if</span> (LCT.find(x) == LCT.find(y)) LCT.cut(x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> local </span></span><br><span class="line">    fclose(<span class="built_in">stdin</span>); fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;SDOI2008-洞穴勘测&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Links there:&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2147&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SDOI2008 Cave&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动态树" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「Link-Cut-Trees」LCT动态树学习笔记</title>
    <link href="http://yoursite.com/2018/06/14/%E3%80%8CLink-Cut-Trees%E3%80%8DLCT%E5%8A%A8%E6%80%81%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/06/14/「Link-Cut-Trees」LCT动态树学习笔记/</id>
    <published>2018-06-14T15:58:42.000Z</published>
    <updated>2018-06-26T07:12:43.450Z</updated>
    
    <content type="html"><![CDATA[<p><strong>调了差不多一下午+晚上左右的LCT,算是搞懂了</strong></p><p><strong>感谢qxq巨爷的倾情讲解（大雾</strong></p><p><strong><a href="download\LCT-0[无比生动版讲稿].doc">LCT讲稿(无比生动版)</a></strong></p><a id="more"></a><p>LUOGU P3690 LCT[模板]</p><p><a href="https://www.luogu.org/problemnew/show/P3690" target="_blank" rel="noopener">Link there</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc ch[u][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc ch[u][1]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,op;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[MAXN][<span class="number">2</span>],sum[MAXN],rev[MAXN],w[MAXN],fa[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRson</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> ch[fa[u]][<span class="number">1</span>] == u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isRoot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> (ch[fa[u]][<span class="number">0</span>] != u &amp;&amp; ch[fa[u]][<span class="number">1</span>] != u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;rev[u] ^= <span class="number">1</span>;swap(lc,rc);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span>(rev[u])&#123;<span class="keyword">if</span> (lc) Reverse(lc); <span class="keyword">if</span>(rc)Reverse(rc); rev[u]=<span class="number">0</span>;&#125;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;sum[u]=sum[lc]^sum[rc]^w[u];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">if</span> (!isRoot(u)) Update(fa[u]); pushdown(u);&#125;</span><br><span class="line"><span class="comment">/* ----------- Splay part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fau = fa[u],ffau = fa[fau],d = isRson(u);</span><br><span class="line">        fa[u]=ffau; <span class="keyword">if</span> (!isRoot(fau)) ch[ffau][isRson(fau)] = u;</span><br><span class="line">        fa[ch[fau][d] = ch[u][d^<span class="number">1</span>]] = fau;</span><br><span class="line">        fa[ch[u][d^<span class="number">1</span>] = fau] = u;</span><br><span class="line">        pushup(fau); pushup(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123; <span class="comment">//边Splay边向根传递信息</span></span><br><span class="line">        Update(u);</span><br><span class="line">        <span class="keyword">for</span> (;(!isRoot(u));rotate(u))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isRoot(fa[u]))</span><br><span class="line">            rotate(isRson(fa[u])==isRson(u)?fa[u]:u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* ----------- LCT part ------------*/</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> f = <span class="number">0</span>; u; f = u,u = fa[u])&#123;</span><br><span class="line">            Splay(u);</span><br><span class="line">            rc = f;</span><br><span class="line">            pushup(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);Reverse(u);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;access(u);Splay(u);<span class="keyword">while</span>(lc)pushdown(u),u=lc;<span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);access(y);Splay(y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(x);fa[x]=y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;split(u,v);<span class="keyword">if</span>(fa[u]==v&amp;&amp;(!rc))fa[u]=ch[v][<span class="number">0</span>]=<span class="number">0</span>;pushup(v);&#125;</span><br><span class="line">&#125;LCT;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) LCT.w[i]=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op=read(),x=read(),y=read();</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:&#123;LCT.split(x,y);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,LCT.sum[y]);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;<span class="keyword">if</span>(LCT.find(x) != LCT.find(y))LCT.link(x,y);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;<span class="keyword">if</span>(LCT.find(x) == LCT.find(y))LCT.cut(x,y);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;LCT.w[x]=y;LCT.Splay(x);<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的中考之后再补辣.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;调了差不多一下午+晚上左右的LCT,算是搞懂了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感谢qxq巨爷的倾情讲解（大雾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;download\LCT-0[无比生动版讲稿].doc&quot;&gt;LCT讲稿(无比生动版)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动态树" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces」 Educational Round 45 复盘</title>
    <link href="http://yoursite.com/2018/06/10/%E3%80%8CCodeforces%E3%80%8D-Educational-Round-45%E5%A4%8D%E7%9B%98/"/>
    <id>http://yoursite.com/2018/06/10/「Codeforces」-Educational-Round-45复盘/</id>
    <published>2018-06-10T12:21:50.000Z</published>
    <updated>2018-06-26T07:13:17.401Z</updated>
    
    <content type="html"><![CDATA[<p><strong>没有体验.</strong></p><a id="more"></a><p>首先网速就很不给力 裸连ping在1000ms+,LOSS爆炸,根本打不开.</p><p>于是科学上网勉强可以打.</p><p>垃圾ER,整天卡人的小数据出出</p><p>题意不明不知道要构造的图的性质</p><p>卡我一个多小时的D,最后就改了一行代码赛后一发AC（赛时4发WA）,体验极差！</p><p>掉Rating是肯定的.</p><p>shit.</p><p>:(</p><p>后来发现E原来是傻逼题</p><p>F也一眼可做的样子</p><p>mdzz我完完全全错失ELO机会</p><p>不是先把做了的丢上来吧.</p><p><strong>A</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=read(),m=read(),a=read(),b=read();</span><br><span class="line"><span class="keyword">if</span> (!(n % m)) &#123;<span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> x1 = n % m,x2 = m - x1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,min(x1 * b,x2 * a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>B</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,a[maxn],b[maxn],c[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pa[maxn];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),k=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=read(),pa[i]=make_pair(a[i],i);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    sort(pa+<span class="number">1</span>,pa+n+<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n) b[i]=pa[i].fi,c[i]=pa[i].se;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) &#123;<span class="keyword">int</span> tof = b[i],s; s = (upper_bound(b+<span class="number">1</span>,b+n+<span class="number">1</span>,tof+k) - b) - <span class="number">1</span> -  (upper_bound(b+<span class="number">1</span>,b+n+<span class="number">1</span>,tof)-b) + <span class="number">1</span>; <span class="keyword">if</span> (s &gt; <span class="number">0</span>) ++ans;&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n-ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>C</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;buc;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; check(<span class="built_in">string</span> a,<span class="keyword">int</span> l)&#123;</span><br><span class="line">    <span class="keyword">int</span> lf = <span class="number">0</span>,rt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lneed=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,l<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (lf == <span class="number">0</span> &amp;&amp; a[i] == <span class="string">')'</span>) &#123;++lneed;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        lf += a[i] == <span class="string">'('</span>;</span><br><span class="line">        rt += a[i] == <span class="string">')'</span>;</span><br><span class="line">        <span class="keyword">int</span> x=min(lf,rt);</span><br><span class="line">        lf -= x; rt -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> make_pair(lneed,lf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="keyword">int</span> l = a.length();</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Re = check(a,l);</span><br><span class="line">        <span class="keyword">if</span> (Re.fi &gt; <span class="number">0</span> &amp;&amp; Re.se &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (Re.fi == <span class="number">0</span> &amp;&amp; Re.se == <span class="number">0</span>) ++buc[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Re.fi != <span class="number">0</span>) ++buc[Re.fi];</span><br><span class="line">        <span class="keyword">else</span> ++buc[-Re.se];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAXN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!buc[i] || !buc[-i]) <span class="keyword">continue</span>;</span><br><span class="line">        ans += buc[i] * buc[-i];</span><br><span class="line">    &#125;</span><br><span class="line">    ans += buc[<span class="number">0</span>] * buc[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>D</strong></p><p>我挂张图希望泥萌感受到我的绝望</p><p>可能是我菜吧.</p><p><img src="/2018/06/10/「Codeforces」-Educational-Round-45复盘/1.png" alt="shit"></p><p>赛后一发就对我也不知道是什么操作啊(雾)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,a,b,g[<span class="number">1001</span>][<span class="number">1001</span>],flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),a=read(),b=read();</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="number">1</span> &amp;&amp; b != <span class="number">1</span>) &#123;<span class="built_in">puts</span>(<span class="string">"NO"</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span> &amp;&amp; a == <span class="number">1</span> &amp;&amp; b == <span class="number">1</span>) &#123;<span class="built_in">puts</span>(<span class="string">"NO"</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">3</span> &amp;&amp; a == <span class="number">1</span> &amp;&amp; b == <span class="number">1</span>) &#123;<span class="built_in">puts</span>(<span class="string">"NO"</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) swap(a,b),flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b; i &lt;= n - <span class="number">1</span>; i++) g[i][i+<span class="number">1</span>] = g[i+<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">    rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,n) &#123;<span class="keyword">if</span> (i==j) <span class="keyword">continue</span>; g[i][j]^=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        rep(j,<span class="number">1</span>,n)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,g[i][j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>E</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,x[MAXN],ans = LLONG_MAX;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    n=read(),m=read(),k=read();</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = read();</span><br><span class="line">        x[t] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!i)  x[i] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> x[i] = x[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> x[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">        <span class="keyword">int</span> e1=<span class="number">0</span>,e2=<span class="number">0</span>,y;</span><br><span class="line">        y=read();</span><br><span class="line">        <span class="keyword">while</span>(e1 &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x[e1] &lt; <span class="number">0</span> || x[e1] &lt;= e1 - i) <span class="keyword">break</span>;</span><br><span class="line">            e1 = i + x[e1];</span><br><span class="line">            ++e2;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (e1 &gt;= n) ? min(ans,y * e2) : ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans==LLONG_MAX?<span class="number">-1</span>:ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>gg my friend.</p><p>明天div2见.</p><p>我真的比老狗还菜 加油.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;没有体验.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELO Record" scheme="http://yoursite.com/categories/ELO-Record/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>「POJ-3237」Tree </title>
    <link href="http://yoursite.com/2018/06/10/%E3%80%8CPOJ-3237%E3%80%8DTree/"/>
    <id>http://yoursite.com/2018/06/10/「POJ-3237」Tree/</id>
    <published>2018-06-10T09:54:23.000Z</published>
    <updated>2018-06-10T10:03:15.586Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3237" target="_blank" rel="noopener">POJ-3237</a></p><p>Description</p><p>You are given a tree with <em>N</em> nodes. The tree’s nodes are numbered 1 through <em>N</em> and its edges are numbered 1 through <em>N</em> − 1. Each edge is associated with a weight. Then you are to execute a series of instructions on the tree. The instructions can be one of the following forms:</p><a id="more"></a><div class="table-container"><table><thead><tr><th><code>CHANGE</code> <em>i</em> <em>v</em></th><th>Change the weight of the <em>i</em>th edge to <em>v</em></th></tr></thead><tbody><tr><td><code>NEGATE</code> <em>a</em> <em>b</em></td><td>Negate the weight of every edge on the path from <em>a</em> to <em>b</em></td></tr><tr><td><code>QUERY</code> <em>a</em> <em>b</em></td><td>Find the maximum weight of edges on the path from <em>a</em> to <em>b</em></td></tr></tbody></table></div><p>Input</p><p>The input contains multiple test cases. The first line of input contains an integer <em>t</em> (<em>t</em> ≤ 20), the number of test cases. Then follow the test cases.Each test case is preceded by an empty line. The first nonempty line of its contains <em>N</em> (<em>N</em> ≤ 10,000). The next <em>N</em> − 1 lines each contains three integers <em>a</em>, <em>b</em> and c, describing an edge connecting nodes <em>a</em> and <em>b</em> with weight <em>c</em>. The edges are numbered in the order they appear in the input. Below them are the instructions, each sticking to the specification above. A lines with the word “<code>DONE</code>” ends the test case.</p><p>Output</p><p>For each “<code>QUERY</code>” instruction, output the result on a separate line.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">1 2 1</span><br><span class="line">2 3 2</span><br><span class="line">QUERY 1 2</span><br><span class="line">CHANGE 1 3</span><br><span class="line">QUERY 1 2</span><br><span class="line">DONE</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>树剖码农题,是真的难调.</p><p>似乎<code>for (int i = head[u]; ~i; i = E[i].next)</code>和<code>for (int i = head[u]; i; i = E[i].next)</code></p><p>有差别?</p><p>坑了我好久啊…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">21000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,w,next;</span><br><span class="line">&#125;E[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,dfs_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> L,R,rev;</span><br><span class="line"><span class="keyword">int</span> minn,maxx;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN],sz[MAXN],hson[MAXN],dep[MAXN],top[MAXN],dfn[MAXN],head[MAXN],T,n,uu[MAXN],vv[MAXN],ww[MAXN];</span><br><span class="line"><span class="keyword">int</span> R1[MAXN],R[MAXN];<span class="comment">//映射</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    E[++cnt].to = v;</span><br><span class="line">    E[cnt].w = w;</span><br><span class="line">    E[cnt].next = head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reset</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    MM(hson,<span class="number">-1</span>);MM(sz,<span class="number">0</span>);MM(head,<span class="number">0</span>);</span><br><span class="line">    cnt=dfs_cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void dfs1(int u,int F,int depth)&#123;</span></span><br><span class="line"><span class="comment">printf("%d %d %d\n",u,F,depth);</span></span><br><span class="line"><span class="comment">    sz[u]=1;fa[u]=F;dep[u]=depth;</span></span><br><span class="line"><span class="comment">    for(int i=head[u]; i; i=E[i].next)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int v = E[i].to;</span></span><br><span class="line"><span class="comment">        if (v != F) &#123;</span></span><br><span class="line"><span class="comment">R[v]=E[i].w;</span></span><br><span class="line"><span class="comment">            dfs1(v,u,depth+1);</span></span><br><span class="line"><span class="comment">            sz[u] += sz[v];</span></span><br><span class="line"><span class="comment">            if((hson[u] == -1) || sz[hson[u]] &lt; sz[v]) hson[u] = v;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    dep[u] = depth;</span><br><span class="line">    fa[u] = father;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">            R[v] = E[i].w;</span><br><span class="line">            dfs1(v, u, depth + <span class="number">1</span>);</span><br><span class="line">            sz[u] += sz[v];</span><br><span class="line">            <span class="keyword">if</span> (hson[u] == <span class="number">-1</span> || sz[v] &gt; sz[hson[u]]) hson[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">dfn[u] = dfs_cnt++; top[u] = t; R1[dfn[u]] = R[u];</span><br><span class="line"><span class="keyword">if</span> (!hson[u]) <span class="keyword">return</span> ;</span><br><span class="line">dfs2(hson[u],t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next)&#123;</span><br><span class="line"><span class="keyword">int</span> v = E[i].to;</span><br><span class="line"><span class="keyword">if</span> (v != fa[u] &amp;&amp; v != hson[u]) dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">tree[o].minn = min(tree[lc].minn,tree[rc].minn);</span><br><span class="line">tree[o].maxx = max(tree[lc].maxx,tree[rc].maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">swap(tree[o].minn,tree[o].maxx);</span><br><span class="line">tree[o].maxx *= <span class="number">-1</span>;</span><br><span class="line">tree[o].minn *= <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!tree[o].rev) <span class="keyword">return</span> ;</span><br><span class="line">tree[lc].rev ^= <span class="number">1</span>; tree[rc].rev ^= <span class="number">1</span>; <span class="comment">//下放反转标记</span></span><br><span class="line">Modify(lc); Modify(rc);</span><br><span class="line">tree[o].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">tree[o].L = l,tree[o].R = r;</span><br><span class="line">tree[o].rev = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l == r) tree[o].minn = tree[o].maxx = R1[l];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Build(lc,l,m);</span><br><span class="line">Build(rc,m+<span class="number">1</span>,r);</span><br><span class="line">pushup(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> p,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == tree[o].L &amp;&amp; p == tree[o].R) &#123;tree[o].minn = tree[o].maxx = z;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pushdown(o);</span><br><span class="line"><span class="keyword">int</span> ll = tree[o].L,rr = tree[o].R,mid = (ll + rr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (p &lt;= mid) update(lc,p,z);</span><br><span class="line"><span class="keyword">else</span> update(rc,p,z);</span><br><span class="line">pushup(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[o].L,R = tree[o].R;</span><br><span class="line"><span class="keyword">if</span> (L &gt;= l &amp;&amp; R &lt;= r)&#123;</span><br><span class="line">tree[o].rev ^= <span class="number">1</span>;</span><br><span class="line">Modify(o);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(o);</span><br><span class="line"><span class="keyword">int</span> m = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= m) update2(lc,l,r);</span><br><span class="line"><span class="keyword">if</span> (r &gt; m) update2(rc,l,r);</span><br><span class="line">pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Maintain</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> topu = top[u],topv = top[v];</span><br><span class="line"><span class="keyword">while</span>(topu != topv) &#123;</span><br><span class="line"><span class="keyword">if</span> (dep[topu] &lt; dep[topv]) swap(u,v),swap(topu,topv);</span><br><span class="line">update2(<span class="number">1</span>,dfn[topu],dfn[u]);</span><br><span class="line">u = fa[topu],topu = top[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u,v);</span><br><span class="line">update2(<span class="number">1</span>,dfn[v] + <span class="number">1</span>,dfn[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_on_tree</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L = tree[o].L,R = tree[o].R;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> tree[o].maxx;</span><br><span class="line"><span class="keyword">if</span> (l &gt; R || r &lt; L) <span class="keyword">return</span> -INT_MAX;</span><br><span class="line">pushdown(o);</span><br><span class="line"><span class="keyword">return</span> max(query_on_tree(lc,l,r),query_on_tree(rc,l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query_mx</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = -INT_MAX;</span><br><span class="line"><span class="keyword">int</span> topu = top[u],topv = top[v];</span><br><span class="line"><span class="keyword">while</span>(topu != topv) &#123;</span><br><span class="line"><span class="keyword">if</span> (dep[topu] &lt; dep[topv]) swap(u,v),swap(topu,topv);</span><br><span class="line">ans = max(ans,query_on_tree(<span class="number">1</span>,dfn[topu],dfn[u]));</span><br><span class="line">u = fa[topu],topu = top[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u,v);</span><br><span class="line"><span class="keyword">return</span> ans = max(ans,query_on_tree(<span class="number">1</span>,dfn[v]+<span class="number">1</span>,dfn[u]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">Reset();</span><br><span class="line">n = read();</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;uu[i]=read(),vv[i]=read(),ww[i]=read();addedge(uu[i],vv[i],ww[i]);addedge(vv[i],uu[i],ww[i]);&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (int u = 1; u &lt;= n; u++)&#123;</span></span><br><span class="line"><span class="comment">for (int i = head[u]; i; i = E[i].next)</span></span><br><span class="line"><span class="comment">printf("%d -&gt; %d = %d\n",u,E[i].to,E[i].w);</span></span><br><span class="line"><span class="comment">puts("");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">string</span> op;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; op)&#123;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">"DONE"</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">"QUERY"</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> u=read(),v=read();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Query_mx(u,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">"CHANGE"</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> m=read(),newv=read();</span><br><span class="line"><span class="keyword">if</span> (dep[uu[m]] &lt; dep[vv[m]]) swap(uu[m],vv[m]);</span><br><span class="line">update(<span class="number">1</span>,dfn[uu[m]],newv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">Maintain(u,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*IN</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">QUERY 1 2</span></span><br><span class="line"><span class="comment">CHANGE 1 3</span></span><br><span class="line"><span class="comment">QUERY 1 2</span></span><br><span class="line"><span class="comment">DONE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*OUT</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3237&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ-3237&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;You are given a tree with &lt;em&gt;N&lt;/em&gt; nodes. The tree’s nodes are numbered 1 through &lt;em&gt;N&lt;/em&gt; and its edges are numbered 1 through &lt;em&gt;N&lt;/em&gt; − 1. Each edge is associated with a weight. Then you are to execute a series of instructions on the tree. The instructions can be one of the following forms:&lt;/p&gt;
    
    </summary>
    
      <category term="动态树" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
    
      <category term="解题报告" scheme="http://yoursite.com/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>「树链剖分 - 学习笔记」</title>
    <link href="http://yoursite.com/2018/06/08/%E3%80%8C%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8D/"/>
    <id>http://yoursite.com/2018/06/08/「树链剖分-学习笔记」/</id>
    <published>2018-06-08T15:01:28.000Z</published>
    <updated>2018-06-26T07:14:20.056Z</updated>
    
    <content type="html"><![CDATA[<p>树链剖分<del>似乎</del>是个很强大的东西</p><p>可惜我之前不会啊</p><p>所以就mark一下啊</p><a id="more"></a><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>树链剖分 简称树剖.对于一般的树上路径/权值的问题,Tarjan的LCA在线性内就可以快速求解.</p><p>如果要修改点权或者边权呢?</p><p>树链剖分就是用来解决动态修改树上权值并求解的问题的</p><p>一般树链剖分更新权值的复杂度为$O(logn)$,统计路径信息的复杂度为$O((logn)^2)$</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p><strong>某些一定要知道的概念</strong></p><ul><li>重节点：子树结点数目最多的节点；</li><li>轻节点：父亲节点中除了重结点以外的节点；</li><li>重边：父亲节点和重节点连成的边；</li><li>轻边：父亲节点和轻节点连成的边；</li><li>重链：由多条重边连接而成的路径；</li><li>轻链：由多条轻边连接而成的路径；</li></ul><p>这些东西有一个性质.</p><p>1.一条重链在线段树上是一段连续的区间。</p><p>2.一个节点的重儿子就是这个节点的子节点中子树最大的点。 </p><p>所以第一次dfs求出重儿子</p><p>第二次通过dfs时间戳(dfn),得出节点新编号,并且将各个重节点连接成重链，轻节点连接成轻链</p><p>将重链（其实就是一段区间）用数据结构（一般是树状数组或线段树）来进行维护</p><p>为每个节点进行编号，其实就是DFS在执行时的顺序（id数组）</p><p>以及当前节点所在链的起点（top数组），还有当前节点在树中的位置（rnk数组）.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dfs1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> F, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    dep[u] = depth;</span><br><span class="line">    fa[u] = F;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u]) &#123; <span class="comment">//如果不是父节点就继续向下找节点</span></span><br><span class="line">            dfs1(v, u, depth + <span class="number">1</span>);</span><br><span class="line">            siz[u] += siz[v];<span class="comment">//加子结点的sz</span></span><br><span class="line">            <span class="keyword">if</span> ((!hson[u]) || siz[v] &gt; siz[hson[u]]) hson[u] = v;<span class="comment">//如果没有重孩子或者此孩子的sz较大则更新hson[u]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dfs2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfs_cnt; rnk[dfs_cnt] = u; top[u] = t;<span class="comment">//维护u顶点的节点t</span></span><br><span class="line">    <span class="keyword">if</span> (!hson[u]) <span class="keyword">return</span> ;<span class="comment">//不是重儿子就return</span></span><br><span class="line">    dfs2(hson[u], t);<span class="comment">//继续向下找重链</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != hson[u] &amp;&amp; v != fa[u]) dfs2(v, v);<span class="comment">//找其他非u为顶点的链</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LUOGU P3384 树链剖分[模板]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PER(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125; E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segmentTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    <span class="keyword">int</span> sum, tag;</span><br><span class="line">&#125; tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], siz[MAXN], top[MAXN], hson[MAXN];</span><br><span class="line"><span class="keyword">int</span> dep[MAXN], fa[MAXN], dfn[MAXN], rnk[MAXN];</span><br><span class="line"><span class="keyword">int</span> N, M, R, A[MAXN], cnt = <span class="number">0</span>, dfs_cnt = <span class="number">0</span>,mod;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    E[++cnt].to = v; E[cnt].next = head[u]; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> F, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    dep[u] = depth;</span><br><span class="line">    fa[u] = F;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">            dfs1(v, u, depth + <span class="number">1</span>);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span> ((!hson[u]) || siz[v] &gt; siz[hson[u]]) hson[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfs_cnt; rnk[dfs_cnt] = u; top[u] = t;</span><br><span class="line">    <span class="keyword">if</span> (!hson[u]) <span class="keyword">return</span> ;</span><br><span class="line">    dfs2(hson[u], t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != hson[u] &amp;&amp; v != fa[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tree[o].L = l; tree[o].R = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) tree[o].sum = A[rnk[l]];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Build(lc, l , mid);</span><br><span class="line">        Build(rc | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        tree[o].sum = tree[lc].sum + tree[rc].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    tree[lc].sum += (tree[lc].R - tree[lc].L + <span class="number">1</span>) * tree[o].tag;</span><br><span class="line">    tree[rc].sum += (tree[rc].R - tree[rc].L + <span class="number">1</span>) * tree[o].tag;</span><br><span class="line">    tree[lc].tag += tree[o].tag;</span><br><span class="line">    tree[rc].tag += tree[o].tag;</span><br><span class="line">    tree[o].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].L &gt; y || tree[o].R &lt; x) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= tree[o].L &amp;&amp; tree[o].R &lt;= y) &#123;</span><br><span class="line">        tree[o].sum += (tree[o].R - tree[o].L + <span class="number">1</span>) * z;</span><br><span class="line">        tree[o].tag += z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[o].tag) pushdown(o);</span><br><span class="line">        update(lc, x, y, z);</span><br><span class="line">        update(rc, x, y, z);</span><br><span class="line">        tree[o].sum = tree[lc].sum + tree[rc].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= tree[o].L &amp;&amp; tree[o].R &lt;= y) <span class="keyword">return</span> tree[o].sum;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].L &gt; y || tree[o].R &lt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].tag) pushdown(o);</span><br><span class="line">    <span class="keyword">return</span> query(lc, x, y) + query(rc, x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_path</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tu = top[u], tv = top[v];</span><br><span class="line">    <span class="keyword">while</span> (tu != tv) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[tu] &lt; dep[tv]) swap(u, v), swap(tu, tv);</span><br><span class="line">        update(<span class="number">1</span>, dfn[tu], dfn[u], z);</span><br><span class="line">        u = fa[tu], tu = top[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">    update(<span class="number">1</span>, dfn[v], dfn[u], z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_path</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tu = top[u], tv = top[v];</span><br><span class="line">    <span class="keyword">while</span> (tu != tv) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[tu] &lt; dep[tv]) swap(u, v), swap(tu, tv);</span><br><span class="line">        res += query(<span class="number">1</span>, dfn[tu], dfn[u]);</span><br><span class="line">        u = fa[tu], tu = top[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">return</span> res + query(<span class="number">1</span>, dfn[v], dfn[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    N = read(), M = read(), R = read(), mod = read();</span><br><span class="line">    REP(i, <span class="number">1</span>, N) A[i] = read();</span><br><span class="line">    REP(i, <span class="number">2</span>, N) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = read(), v = read();</span><br><span class="line">        adde(u, v); adde(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(R, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(R, R);</span><br><span class="line">    <span class="comment">//REP(i,1,N) printf("%d %d %d %d %d\n",i,fa[i],dfn[i],siz[i],dep[i]);</span></span><br><span class="line">    Build(<span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">    <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt = read();</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read(), y = read();</span><br><span class="line">                <span class="keyword">int</span> z; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;z);</span><br><span class="line">                update_path(x, y, z);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read(), y = read();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query_path(x, y) % mod);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read();</span><br><span class="line">                <span class="keyword">int</span> z; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;z);</span><br><span class="line">                update(<span class="number">1</span>, dfn[x], dfn[x] + siz[x] - <span class="number">1</span>, z);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                <span class="keyword">int</span> x = read();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, dfn[x], dfn[x] + siz[x] - <span class="number">1</span>) % mod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>POJ-2763</strong></p><p>基于边权修改的树剖.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">int</span> fa[MAXN],hson[MAXN],dep[MAXN],dfn[MAXN],rnk[MAXN],top[MAXN],sz[MAXN],val[MAXN];</span><br><span class="line"><span class="keyword">int</span> head[MAXN],cnt=<span class="number">0</span>,dfs_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,val;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">R</span><span class="params">()</span></span>&#123;</span><br><span class="line">u=read();v=read();val=read();</span><br><span class="line">&#125;</span><br><span class="line">Edge(<span class="keyword">int</span> uu=<span class="number">0</span>,<span class="keyword">int</span> vv=<span class="number">0</span>,<span class="keyword">int</span> vval=<span class="number">0</span>):u(uu),v(vv),val(vval)&#123;&#125;</span><br><span class="line">&#125;Edges[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> to,next;</span><br><span class="line">&#125;E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> L,R,val;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    E[++cnt].to = v; E[cnt].next = head[u]; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    dep[u] = depth;</span><br><span class="line">    fa[u] = father;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">            dfs1(v, u, dep[u]+<span class="number">1</span>);</span><br><span class="line">            sz[u] += sz[v];</span><br><span class="line">            <span class="keyword">if</span> (hson[u] == <span class="number">-1</span> || sz[v] &gt; sz[hson[u]]) hson[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++dfs_cnt; rnk[dfs_cnt] = u; top[u] = t;</span><br><span class="line">    <span class="keyword">if</span> (!hson[u]) <span class="keyword">return</span> ;</span><br><span class="line">    dfs2(hson[u], t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = E[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != hson[u] &amp;&amp; v != fa[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;Tree[o].val = Tree[lc].val + Tree[rc].val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">Tree[o].L = l;</span><br><span class="line">Tree[o].R = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;Tree[o].val = val[l]; <span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(l,mid,lc);</span><br><span class="line">build(mid+<span class="number">1</span>,r,rc);</span><br><span class="line">pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Tree[o].L == Tree[o].R) &#123;Tree[o].val = val; <span class="keyword">return</span> ;&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (Tree[o].L + Tree[o].R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (v &lt;= mid) Update(lc,v,val);</span><br><span class="line"><span class="keyword">else</span> Update(rc,v,val);</span><br><span class="line">pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree[o].L &gt;= l &amp;&amp; Tree[o].R &lt;= r) <span class="keyword">return</span> Tree[o].val;</span><br><span class="line"><span class="keyword">int</span> mid = (Tree[o].L + Tree[o].R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> query(lc,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> query(rc,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(lc,l,mid)+query(rc,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tp1 = top[u],tp2 = top[v];</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tp1 != tp2)&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[tp1] &lt; dep[tp2]) &#123;</span><br><span class="line">swap(u,v); swap(tp1,tp2);</span><br><span class="line">&#125;</span><br><span class="line">ret += query(<span class="number">1</span>,dfn[tp1],dfn[u]);</span><br><span class="line">u = fa[tp1];</span><br><span class="line">tp1 = top[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> ret;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u,v);</span><br><span class="line">ret += query(<span class="number">1</span>,dfn[hson[u]],dfn[v]);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read(),m=read(),s=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;Edges[i].R();adde(Edges[i].u,Edges[i].v);adde(Edges[i].v,Edges[i].u);&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[Edges[i].u] &lt; dep[Edges[i].v]) swap(Edges[i].u,Edges[i].v);</span><br><span class="line">val[dfn[Edges[i].u]] = Edges[i].val;</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,dfs_cnt,<span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> op=read(),x,y;</span><br><span class="line"><span class="keyword">if</span>(!op)&#123;x=read();<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query(s,x));s=x;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;x=read(),y=read();Update(<span class="number">1</span>,dfn[Edges[x].u],y);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Examples: */</span></span><br><span class="line"><span class="comment">/*in</span></span><br><span class="line"><span class="comment">3 3 1</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">0 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*out</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>:）karriganasta</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树链剖分&lt;del&gt;似乎&lt;/del&gt;是个很强大的东西&lt;/p&gt;
&lt;p&gt;可惜我之前不会啊&lt;/p&gt;
&lt;p&gt;所以就mark一下啊&lt;/p&gt;
    
    </summary>
    
      <category term="动态树" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces」CF-Round485 Div2 复盘</title>
    <link href="http://yoursite.com/2018/05/30/%E3%80%8CCodeforces%E3%80%8DCF-Round485-Div2-%E5%A4%8D%E7%9B%98/"/>
    <id>http://yoursite.com/2018/05/30/「Codeforces」CF-Round485-Div2-复盘/</id>
    <published>2018-05-30T13:33:11.000Z</published>
    <updated>2018-05-30T15:16:00.351Z</updated>
    
    <content type="html"><![CDATA[<p>我这种傻逼选手也只能做做Div2练练手了…</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="http://codeforces.com/contest/987" target="_blank" rel="noopener">CF-Round485 Div2</a></p><p><a href="http://codeforces.com/contest/987/room/134" target="_blank" rel="noopener">某彩笔选手的Room</a></p><a id="more"></a><p><img src="/2018/05/30/「Codeforces」CF-Round485-Div2-复盘/1.png" alt="Ranklist"></p><p>算是CF打到现在自己发挥算好的吧..但是为什么才涨了49分啊…不资瓷啊.</p><p>以后每次比赛都写一次复盘吧.（有可能我懒不想写</p><h3 id="划水记"><a href="#划水记" class="headerlink" title="划水记"></a>划水记</h3><h4 id="赛前"><a href="#赛前" class="headerlink" title="赛前"></a>赛前</h4><p>半夜23:35开打的Div2,<del>肝快爆了</del>,ZhangZisu还有GCC314大爷带我飞啊啊啊啊啊.</p><p>赛前疯狂打CodeSource(滑稽</p><p>尝试着睡着但是没成功,魔爪也没啦,抱着必掉$rating$的心打的比赛.</p><h4 id="赛中"><a href="#赛中" class="headerlink" title="赛中"></a>赛中</h4><p>A </p><p>一看哇特么的是 <del>复联3</del> 灭霸1背景诶!傻逼题,手速还是慢啊花了6min.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[<span class="number">7</span>] = &#123;<span class="string">"Reality"</span>,<span class="string">"Power"</span>,<span class="string">"Mind"</span>,<span class="string">"Soul"</span>,<span class="string">"Space"</span>,<span class="string">"Time"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> wd[<span class="number">7</span>] = &#123;<span class="string">"red"</span>,<span class="string">"purple"</span>,<span class="string">"yellow"</span>,<span class="string">"orange"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> g[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">MM(g,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n=read(),ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">5</span>) <span class="keyword">if</span> (wd[i] == s) g[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">5</span>) ans += (!g[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">5</span>) <span class="keyword">if</span>(!g[i]) <span class="built_in">cout</span> &lt;&lt; s[i] &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B. </p><p>给出$x$,$y$,求比较$x^y,y^x$的大小.</p><p>log一下什么的就好了.愚蠢的我忘了换底公式.</p><p>只能pow了.我菜爆了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> x,y,r;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">2</span> &amp;&amp; y == <span class="number">4</span>)&#123;<span class="built_in">puts</span>(<span class="string">"="</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">4</span> &amp;&amp; y == <span class="number">2</span>)&#123;<span class="built_in">puts</span>(<span class="string">"="</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; y)&#123;</span><br><span class="line"><span class="keyword">double</span> a1 = x,a2 = <span class="built_in">pow</span>(y,x/y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,(a1-a2 &gt; eps) ? <span class="string">'&gt;'</span> : <span class="string">'&lt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == y) &#123;<span class="built_in">puts</span>(<span class="string">"="</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">double</span> a1 = x,a2 = <span class="built_in">pow</span>(y,x/y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,(a1-a2 &gt; eps) ? <span class="string">'&gt;'</span> : <span class="string">'&lt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C.</p><p>给定$n,{ s_i} {c_i},1 \leq n \leq 3000$,求三元组$(i,j,k)$满足$s_i &lt; s_j &lt; s_k,i&lt;j&lt;k$</p><p>求出最小的$c_i+c_j+c_k$</p><p>似乎是个DP啊,想了好久的奇怪做法<del>(二分+RMQ)</del></p><p>然后发现是个$O(n^2)$的DP</p><p>啊啊啊啊啊</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000000001LL</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3003</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn],f[maxn][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> d[maxn][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">d[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span>&lt;&lt;j) - <span class="number">1</span> &lt;= n; i++) <span class="comment">//可以从第0位置开始</span></span><br><span class="line">d[i][j] = min(d[i][j<span class="number">-1</span>],d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ_query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>)) &lt;= r-l+<span class="number">1</span>) k++;</span><br><span class="line"><span class="keyword">return</span> min(d[l][k],d[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0x3F3F3F3F</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)b[i]=read();</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0x80000000</span>;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3F</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">rep(j,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">rep(k,<span class="number">0</span>,i<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k] &gt;= a[i]) <span class="keyword">continue</span>;</span><br><span class="line">f[i][j] = min(f[i][j],f[k][j<span class="number">-1</span>]+b[i]);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,n) ans=min(ans,f[i][<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans&gt;<span class="number">300000001</span>?<span class="number">-1</span>:ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D. </p><p>题意:</p><p>有$n$个村庄,$m$条边,每条边默认的边权为1,每个村庄有一个货物$x_i$,货物最多有$min(100,k)$种</p><p>分别求每个村庄作为主办方(要从其他村庄获取货物),要展览$s$个物品的最小花费？</p><p><strong>(每种货物算1个) </strong></p><p>思考了很久很久啊..中间一会儿看E一会儿看D并行地写啊..</p><p>发现是个傻逼题.</p><p>对于每种货物.选取当前的货物种类$x$,扔到队列里笨法师一遍,记录$F(i,x)$,表示第x种货物搬到村庄$i$的最小花费.这样是$O(nk)$的,那么每次每个村庄在$F(i)$里的$x$,$sort$一下求前$s$个就完事了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,k;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">101</span>],ans;</span><br><span class="line"><span class="keyword">int</span> types[<span class="number">100010</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pa; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;lt[maxn];</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">MM(f,<span class="number">0x7f</span>);</span><br><span class="line">n=read(),m=read(),k=read(),s=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n) types[i]=read();</span><br><span class="line">rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">lt[x].push_back(y);</span><br><span class="line">lt[y].push_back(x); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//system("pause");</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(<span class="number">100</span>,k); i++)&#123;</span><br><span class="line">MM(vis,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>(i==types[j])vis[j]=<span class="number">1</span>,q.push(make_pair(j,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">pa = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">f[pa.fi][i] = min(f[pa.fi][i],pa.se);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> oo = <span class="number">0</span>; oo &lt; lt[pa.fi].size(); oo++)</span><br><span class="line"><span class="keyword">if</span>(!vis[lt[pa.fi][oo]]) vis[lt[pa.fi][oo]]=<span class="number">1</span>,q.push(make_pair(lt[pa.fi][oo],pa.se+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(b,f[i],<span class="keyword">sizeof</span>(f[i]));</span><br><span class="line">sort(b+<span class="number">1</span>,b+<span class="number">100</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">1</span>;p&lt;=s;p++) ans+=b[p];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E.</p><p>给一个1~N的排列,Petr把两个不同元素交换$3n$次得到一个新的序列,Um_nik把两个不同元素交换$7n+1$次得到一个新的序列.现在给出这个新的序列,求是谁操作了这个序列.</p><p>求逆序对就完事了.01:49想到的做法,1发入魂.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b[maxn],n;</span><br><span class="line"><span class="keyword">namespace</span> getrev&#123;</span><br><span class="line"><span class="keyword">int</span> a[maxn],c[maxn],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,i,j,tmp;   </span><br><span class="line">   <span class="keyword">if</span>(r&gt;l)   </span><br><span class="line">    &#123;   </span><br><span class="line">        x(l,mid);   </span><br><span class="line">        x(mid+<span class="number">1</span>,r);   </span><br><span class="line">        tmp=l;   </span><br><span class="line">        <span class="keyword">for</span>(i=l,j=mid+<span class="number">1</span>;i&lt;=mid&amp;&amp;j&lt;=r;)   </span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])   </span><br><span class="line">            &#123;   </span><br><span class="line">                c[tmp++]=a[j++];   </span><br><span class="line">                ans+=mid-i+<span class="number">1</span>;   </span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="keyword">else</span> c[tmp++]=a[i++];   </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">if</span>(i&lt;=mid) <span class="keyword">for</span>(;i&lt;=mid;) c[tmp++]=a[i++];   </span><br><span class="line">        <span class="keyword">if</span>(j&lt;=r) <span class="keyword">for</span>(;j&lt;=r;) c[tmp++]=a[j++];   </span><br><span class="line">        <span class="keyword">for</span>(i=l;i&lt;=r;i++) a[i]=c[i];  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sol</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(a,b,<span class="keyword">sizeof</span>(b));</span><br><span class="line">x(<span class="number">1</span>,n); </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n) b[i]=read();</span><br><span class="line"><span class="keyword">int</span> petr=(n*<span class="number">3</span>) &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=getrev::sol();</span><br><span class="line">cnt=cnt&amp;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,cnt==petr?<span class="string">"Petr"</span>:<span class="string">"Um_nik"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F.(订正)</p><p>给出n,给出m个$1\leq x \leq 2^n$的元素,其中某两个元素$a,b$有连边当且仅当$a \&amp;b = 0$</p><p>求联通快的个数.</p><p>看上去很不可做！</p><p>ckr:我几秒钟就秒掉了</p><p>被D爆了啊…</p><p>首先$3^n$的暴力是很显然的,但是通不过,考虑优化.</p><p>ckr:”我们尝试着Gay掉1位”</p><p>类似于记忆化的过程,我们在dfs时记录vis[x]表示访问过x.</p><p>我们在dfs时枚举$0-n$,如果$(2^i \&amp; x)$,就可以Gay掉.</p><p>继续下去$dfs(x^{2^i})$</p><p>如果x在读入种出现了就dfs它的补集.</p><p>因为x的补集种所有子集必然与x联通,因此正确性显然.</p><p>哇 我特么这都没想到.是被难度吓退了啊.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my vegetable has exploded. :(</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y?x:y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCPY(a,b) memcpy(a,b,sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=b;i&gt;=a;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">quickpow</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">int</span> b=<span class="number">1</span>;<span class="keyword">while</span>(n)&#123;<span class="keyword">if</span>(n&amp;<span class="number">1</span>)b=b*m%p;n=n&gt;&gt;<span class="number">1</span>;m=m*m%p;&#125;<span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getinv</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> quickpow(x,p<span class="number">-2</span>,p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>); x=-x;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">10</span>) write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span>&lt;&lt;<span class="number">23</span>;</span><br><span class="line"><span class="keyword">int</span> vis[N],ins[N],ans=<span class="number">0</span>,x,n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> ;vis[u]=<span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;u) dfs((<span class="number">1</span>&lt;&lt;i)^u);</span><br><span class="line"><span class="keyword">if</span>(ins[u]) dfs((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>-u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///------------------head------------------</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">MM(ins,<span class="number">0</span>);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">x=read();</span><br><span class="line">ins[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;ins[<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"1"</span>),<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(vis[i]||!ins[i]))&#123;</span><br><span class="line">++ans;</span><br><span class="line">dfs((<span class="number">1</span>&lt;&lt;n)-i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后记</strong></p><p>算是第一次打到5题吧..</p><p>之后要坚持啊…</p><p>​                                                                                                  karriganasta :P</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我这种傻逼选手也只能做做Div2练练手了…&lt;/p&gt;
&lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/987&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF-Round485 Div2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/987/room/134&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;某彩笔选手的Room&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELO Record" scheme="http://yoursite.com/categories/ELO-Record/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>浅谈次小生成树</title>
    <link href="http://yoursite.com/2018/05/08/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%80%E5%A4%A7%E7%94%9F%E6%88%90%E6%A0%91-%E4%B8%80%E4%BA%9B%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/08/次小生成树-最大生成树-一些奇奇怪怪的生成树问题/</id>
    <published>2018-05-08T14:17:55.000Z</published>
    <updated>2018-06-26T07:24:31.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>顾名思义,在一个图$G=(V,E)$中如果存在最小生成树$T$，如果有一个生成树$T’ \not= T $且对于$\forall T_x &gt; T’$,则称生成树$T’$为$G$的次小生成树.</p><a id="more"></a><h5 id="算法0"><a href="#算法0" class="headerlink" title="算法0"></a>算法0</h5><p>枚举原来$T$中每一条边将其删去,每次求一遍MST.</p><p>复杂度:$O(n*mlog_2m)$</p><p>显然难以接受.</p><p>应该还是挺好写的(但是并不保证严格)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,c;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c &lt; b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> sel;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn],sell[maxn],cnt = <span class="number">0</span>,n,m,ans = INT_MAX;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) fa[i] = i;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=getf(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;f=c==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>;c=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;c=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">a[i].u = read(),a[i].v = read(),a[i].c = read(),a[i].sel = <span class="number">1</span>;</span><br><span class="line">Pre();</span><br><span class="line">sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ltotal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ltotal == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> fax = getf(a[i].u),fay = getf(a[i].v);</span><br><span class="line"><span class="keyword">if</span> (fax == fay) <span class="keyword">continue</span>;</span><br><span class="line">fa[fax] = fay;</span><br><span class="line">++ltotal;</span><br><span class="line">sell[++cnt] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">&#123;</span><br><span class="line">Pre();</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">a[sell[i]].sel = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[j].sel) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (lt == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> fax = getf(a[j].u),fay = getf(a[j].v);</span><br><span class="line"><span class="keyword">if</span> (fax == fay) <span class="keyword">continue</span>;</span><br><span class="line">fa[fax] = fay;</span><br><span class="line">++lt;</span><br><span class="line">ret += a[j].c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lt == n - <span class="number">1</span>) ans = min(ans,ret);</span><br><span class="line">a[sell[i]].sel = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（还能接受的）算法"><a href="#（还能接受的）算法" class="headerlink" title="（还能接受的）算法"></a><del>（还能接受的）</del>算法</h5><p><strong>倍增LCA（似乎ST表也可以） + MST</strong></p><p>定理:如果图G的边的个数E和个点的个数N不满足关系E + 1 = N,那么存在边(u,v) 属于 T 和(x, y)不属于T满足T \ (u, v) U (x, y)是图的一颗次小生成树.</p><p>根据这个定理,记录下原最小生成树中的边,</p><p>然后枚举它的邻边并尝试添入并删去环中（如果有）最长的边,取权值的最小值即可.</p><p>置于怎么求最小生成树中$X \ to \ Y$的最短距离,可以树形dp或者LCA.</p><p>辣鸡的我<del>（拉拉板子）</del>写了个倍增,跑的还行吧…</p><p><a href="https://www.luogu.org/problemnew/show/P4180" target="_blank" rel="noopener">LUOGU模板传送</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a[SIZE];</span><br><span class="line"><span class="keyword">int</span> f[SIZE],fa[<span class="number">25</span>][SIZE],dep[SIZE];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">2</span>][<span class="number">25</span>][SIZE],n,m,ret,ans = LLONG_MAX,mx;</span><br><span class="line"><span class="keyword">bool</span> used[SIZE &lt;&lt; <span class="number">2</span>],vis[SIZE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge y)&#123;</span><br><span class="line">        <span class="keyword">return</span> val &lt; y.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[SIZE&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==f[x]?x:f[x]=F(f[x]);&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sort(e,e+m);</span><br><span class="line"><span class="keyword">int</span> Lfs=n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) f[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m &amp;&amp; Lfs; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x=F(e[i].from),y=F(e[i].to);</span><br><span class="line"><span class="keyword">if</span>(x!=y) &#123;</span><br><span class="line">f[x]=y;ret+=e[i].val;used[i]=<span class="number">1</span>;</span><br><span class="line">--Lfs;mx=max(mx,e[i].val);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">23</span>; ++i) &#123;</span><br><span class="line">fa[i][x]=fa[i<span class="number">-1</span>][fa[i<span class="number">-1</span>][x]];</span><br><span class="line"><span class="keyword">int</span> t1=d[<span class="number">0</span>][i<span class="number">-1</span>][x], t2=d[<span class="number">0</span>][i<span class="number">-1</span>][fa[i<span class="number">-1</span>][x]];</span><br><span class="line">d[<span class="number">0</span>][i][x]=max(t1 ,t2);</span><br><span class="line">d[<span class="number">1</span>][i][x]=max(d[<span class="number">1</span>][i<span class="number">-1</span>][x] , d[<span class="number">1</span>][i<span class="number">-1</span>][fa[i<span class="number">-1</span>][x]]);</span><br><span class="line"><span class="keyword">if</span>(t1!=t2) d[<span class="number">1</span>][i][x]=max(d[<span class="number">1</span>][i][x] , min(t1 , t2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a[x].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> t=e[a[x][i]].to+e[a[x][i]].from-x;</span><br><span class="line"><span class="keyword">if</span>(vis[t]) <span class="keyword">continue</span>;   </span><br><span class="line">dep[t]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[<span class="number">0</span>][t]=x;</span><br><span class="line">d[<span class="number">0</span>][<span class="number">0</span>][t]=e[a[x][i]].val;</span><br><span class="line">dfs(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])</span><br><span class="line">swap(u,v);</span><br><span class="line"><span class="keyword">if</span>(dep[u]!=dep[v]) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">23</span>,h=dep[u]-dep[v]; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span>(h&amp;(<span class="number">1</span>&lt;&lt;i)) u=fa[i][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">23</span>; i&gt;=<span class="number">0</span>; --i) <span class="keyword">if</span>(fa[i][u]!=fa[i][v])</span><br><span class="line">u=fa[i][u] , v=fa[i][v];</span><br><span class="line"><span class="keyword">return</span> fa[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fht=lca(u,v);</span><br><span class="line"><span class="keyword">int</span> m1=<span class="number">-1</span>,m2=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">23</span>,h1=dep[u]-dep[fht],h2=dep[v]-dep[fht]; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span>(h1&amp;(<span class="number">1</span>&lt;&lt;i)) &#123;</span><br><span class="line"><span class="keyword">if</span>(d[<span class="number">0</span>][i][u]&gt;m1) m2=m1,m1=d[<span class="number">0</span>][i][u];</span><br><span class="line">m2=max(m2 , d[<span class="number">1</span>][i][u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h2&amp;(<span class="number">1</span>&lt;&lt;i)) &#123;</span><br><span class="line"><span class="keyword">if</span>(d[<span class="number">0</span>][i][v]&gt;m1) m2=m1,m1=d[<span class="number">0</span>][i][v];</span><br><span class="line">m2=max(m2 , d[<span class="number">1</span>][i][v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//严格大于的关键,这里若是return没有处理好极其容易被Hack </span></span><br><span class="line"><span class="keyword">if</span>(m1!=c) <span class="keyword">return</span> c-m1;</span><br><span class="line"><span class="keyword">if</span>(m2!=<span class="number">-1</span>) <span class="keyword">return</span> c-m2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">signed</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read(), m = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) &#123; </span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">u = read(),v = read(),w = read();</span><br><span class="line">e[i]=(Edge)&#123;u,v,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line">kruskal();  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) <span class="keyword">if</span>(used[i]) &#123; </span><br><span class="line">a[e[i].from].push_back(i);</span><br><span class="line">a[e[i].to].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dep[<span class="number">1</span>]=<span class="number">1</span>;dfs(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i) <span class="keyword">if</span>(!used[i]) &#123; </span><br><span class="line"><span class="keyword">if</span>(e[i].val-mx&gt;ans) <span class="keyword">break</span>; <span class="keyword">int</span> t=get(e[i].from,e[i].to,e[i].val); <span class="keyword">if</span>(t) ans=min(ans,t); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ret+ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>听说好像有大爷还用LCT来维护这个X到Y的最大值,给跪了啊</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;次小生成树&quot;&gt;&lt;a href=&quot;#次小生成树&quot; class=&quot;headerlink&quot; title=&quot;次小生成树&quot;&gt;&lt;/a&gt;次小生成树&lt;/h3&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;顾名思义,在一个图$G=(V,E)$中如果存在最小生成树$T$，如果有一个生成树$T’ \not= T $且对于$\forall T_x &amp;gt; T’$,则称生成树$T’$为$G$的次小生成树.&lt;/p&gt;
    
    </summary>
    
      <category term="生成树" scheme="http://yoursite.com/categories/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
